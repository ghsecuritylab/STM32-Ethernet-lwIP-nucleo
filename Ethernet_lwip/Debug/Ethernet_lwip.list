
Ethernet_lwip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ec4  08015258  08015258  00025258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801811c  0801811c  0002811c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018124  08018124  00028124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018128  08018128  00028128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0801812c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
  8 .bss          0000a84c  20000080  20000080  00030080  2**2
                  ALLOC
  9 ._user_heap_stack 00001500  2000a8cc  2000a8cc  00030080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003b26d  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000070d0  00000000  00000000  0006b31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001dc8  00000000  00000000  000723f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001bc0  00000000  00000000  000741b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013263  00000000  00000000  00075d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000096ef  00000000  00000000  00088fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000926ca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e2c  00000000  00000000  00092748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015240 	.word	0x08015240

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08015240 	.word	0x08015240

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f8f8 	bl	80007be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f013 fd32 	bl	8014038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f013 fd04 	bl	8013fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	20003f94 	.word	0x20003f94

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20003f94 	.word	0x20003f94

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_Delay+0x40>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f7      	bcc.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	f002 021f 	and.w	r2, r2, #31
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	4909      	ldr	r1, [pc, #36]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	2201      	movs	r2, #1
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	401a      	ands	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a2:	2101      	movs	r1, #1
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	1e59      	subs	r1, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff4e 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e6:	f7ff ff63 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	6978      	ldr	r0, [r7, #20]
 80007f2:	f7ff ffb3 	bl	800075c <NVIC_EncodePriority>
 80007f6:	4602      	mov	r2, r0
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff82 	bl	8000708 <__NVIC_SetPriority>
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff56 	bl	80006cc <__NVIC_EnableIRQ>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000838:	4baa      	ldr	r3, [pc, #680]	; (8000ae4 <HAL_ETH_Init+0x2bc>)
 800083a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e185      	b.n	8000b5a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f012 fe48 	bl	80134f8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4a9e      	ldr	r2, [pc, #632]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 800086e:	4b9e      	ldr	r3, [pc, #632]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6453      	str	r3, [r2, #68]	; 0x44
 8000878:	4b9b      	ldr	r3, [pc, #620]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000884:	4a99      	ldr	r2, [pc, #612]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000886:	4b99      	ldr	r3, [pc, #612]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800088e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000890:	4996      	ldr	r1, [pc, #600]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000892:	4b96      	ldr	r3, [pc, #600]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	4313      	orrs	r3, r2
 800089c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	f042 0201 	orr.w	r2, r2, #1
 80008b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80008b6:	f7ff fea9 	bl	800060c <HAL_GetTick>
 80008ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008bc:	e011      	b.n	80008e2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008be:	f7ff fea5 	bl	800060c <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008cc:	d909      	bls.n	80008e2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2203      	movs	r2, #3
 80008d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80008de:	2303      	movs	r3, #3
 80008e0:	e13b      	b.n	8000b5a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e4      	bne.n	80008be <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f023 031c 	bic.w	r3, r3, #28
 8000902:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000904:	f001 fd3e 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 8000908:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4a78      	ldr	r2, [pc, #480]	; (8000af0 <HAL_ETH_Init+0x2c8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d908      	bls.n	8000924 <HAL_ETH_Init+0xfc>
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4a77      	ldr	r2, [pc, #476]	; (8000af4 <HAL_ETH_Init+0x2cc>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d804      	bhi.n	8000924 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	e027      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	4a73      	ldr	r2, [pc, #460]	; (8000af4 <HAL_ETH_Init+0x2cc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d908      	bls.n	800093e <HAL_ETH_Init+0x116>
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	4a72      	ldr	r2, [pc, #456]	; (8000af8 <HAL_ETH_Init+0x2d0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d804      	bhi.n	800093e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f043 030c 	orr.w	r3, r3, #12
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e01a      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4a6d      	ldr	r2, [pc, #436]	; (8000af8 <HAL_ETH_Init+0x2d0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d903      	bls.n	800094e <HAL_ETH_Init+0x126>
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4a6c      	ldr	r2, [pc, #432]	; (8000afc <HAL_ETH_Init+0x2d4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d911      	bls.n	8000972 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	4a6a      	ldr	r2, [pc, #424]	; (8000afc <HAL_ETH_Init+0x2d4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d908      	bls.n	8000968 <HAL_ETH_Init+0x140>
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	4a69      	ldr	r2, [pc, #420]	; (8000b00 <HAL_ETH_Init+0x2d8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d804      	bhi.n	8000968 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e005      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	e000      	b.n	8000974 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000972:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800097c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fc19 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000992:	6939      	ldr	r1, [r7, #16]
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 fca5 	bl	80012e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e0d9      	b.n	8000b5a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	f7ff fe3c 	bl	8000624 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a7 	beq.w	8000b04 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80009b6:	f7ff fe29 	bl	800060c <HAL_GetTick>
 80009ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	461a      	mov	r2, r3
 80009c2:	2101      	movs	r1, #1
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fb90 	bl	80010ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009ca:	f7ff fe1f 	bl	800060c <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d8:	4293      	cmp	r3, r2
 80009da:	d90f      	bls.n	80009fc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009e0:	6939      	ldr	r1, [r7, #16]
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 fc7e 	bl	80012e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e0ae      	b.n	8000b5a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0da      	beq.n	80009bc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fbd4 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a1c:	6939      	ldr	r1, [r7, #16]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fc60 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e094      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a30:	f7ff fdec 	bl	800060c <HAL_GetTick>
 8000a34:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 fb53 	bl	80010ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a44:	f7ff fde2 	bl	800060c <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d90f      	bls.n	8000a76 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a5a:	6939      	ldr	r1, [r7, #16]
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 fc41 	bl	80012e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e071      	b.n	8000b5a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0da      	beq.n	8000a36 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	461a      	mov	r2, r3
 8000a86:	2119      	movs	r1, #25
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fb2e 	bl	80010ea <HAL_ETH_ReadPHYRegister>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fc22 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e056      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	e002      	b.n	8000ac6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	e037      	b.n	8000b48 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	e032      	b.n	8000b48 <HAL_ETH_Init+0x320>
 8000ae2:	bf00      	nop
 8000ae4:	03938700 	.word	0x03938700
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40013800 	.word	0x40013800
 8000af0:	01312cff 	.word	0x01312cff
 8000af4:	02160ebf 	.word	0x02160ebf
 8000af8:	039386ff 	.word	0x039386ff
 8000afc:	05f5e0ff 	.word	0x05f5e0ff
 8000b00:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb4c 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fbd8 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e00c      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b40:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b44:	f7ff fd6e 	bl	8000624 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 fbca 	bl	80012e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop

08000b64 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <HAL_ETH_DMATxDescListInit+0x20>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e052      	b.n	8000c2a <HAL_ETH_DMATxDescListInit+0xc6>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e030      	b.n	8000c02 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bb0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bb8:	fb02 f303 	mul.w	r3, r2, r3
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d908      	bls.n	8000bf6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	015b      	lsls	r3, r3, #5
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	4413      	add	r3, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	e002      	b.n	8000bfc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3ca      	bcc.n	8000ba0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c14:	3310      	adds	r3, #16
 8000c16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b087      	sub	sp, #28
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ETH_DMARxDescListInit+0x20>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e056      	b.n	8000d04 <HAL_ETH_DMARxDescListInit+0xce>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2202      	movs	r2, #2
 8000c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e034      	b.n	8000cdc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	4413      	add	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c82:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000c8a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d908      	bls.n	8000cd0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	e002      	b.n	8000cd6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3c6      	bcc.n	8000c72 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cee:	330c      	adds	r3, #12
 8000cf0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_ETH_TransmitFrame+0x24>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e0cd      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0b8      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da09      	bge.n	8000d7c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2212      	movs	r2, #18
 8000d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e0a9      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d915      	bls.n	8000db2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_ETH_TransmitFrame+0x1cc>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0a9b      	lsrs	r3, r3, #10
 8000d90:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <HAL_ETH_TransmitFrame+0x1cc>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	0a9b      	lsrs	r3, r3, #10
 8000d9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e001      	b.n	8000db6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d11c      	bne.n	8000df6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dc4:	6812      	ldr	r2, [r2, #0]
 8000dc6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000dca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000dd6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000de6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df4:	e04b      	b.n	8000e8e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e044      	b.n	8000e86 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e0a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e2a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d116      	bne.n	8000e64 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e44:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_ETH_TransmitFrame+0x1d0>)
 8000e4a:	fb02 f203 	mul.w	r2, r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000e56:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e62:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e72:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	3301      	adds	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3b6      	bcc.n	8000dfc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e96:	3314      	adds	r3, #20
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00d      	beq.n	8000ebe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eaa:	3314      	adds	r3, #20
 8000eac:	2204      	movs	r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	ac02b00b 	.word	0xac02b00b
 8000ee0:	fffffa0c 	.word	0xfffffa0c

08000ee4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e074      	b.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000f0e:	e05a      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d10d      	bne.n	8000f42 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f40:	e041      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
 8000f66:	e02e      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d103      	bne.n	8000f8a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f96:	1f1a      	subs	r2, r3, #4
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e010      	b.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db02      	blt.n	8000fd6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d99c      	bls.n	8000f10 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001004:	3314      	adds	r3, #20
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100c:	2b40      	cmp	r3, #64	; 0x40
 800100e:	d112      	bne.n	8001036 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f012 fb37 	bl	8013684 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800101e:	3314      	adds	r3, #20
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001034:	e01b      	b.n	800106e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103e:	3314      	adds	r3, #20
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d111      	bne.n	800106e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f839 	bl	80010c2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001058:	3314      	adds	r3, #20
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001076:	3314      	adds	r3, #20
 8001078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001086:	3314      	adds	r3, #20
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001092:	d112      	bne.n	80010ba <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f81e 	bl	80010d6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010a2:	3314      	adds	r3, #20
 80010a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	460b      	mov	r3, r1
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b82      	cmp	r3, #130	; 0x82
 800110a:	d101      	bne.n	8001110 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800110c:	2302      	movs	r3, #2
 800110e:	e050      	b.n	80011b2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2282      	movs	r2, #130	; 0x82
 8001114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 031c 	and.w	r3, r3, #28
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8a1b      	ldrh	r3, [r3, #16]
 800112c:	02db      	lsls	r3, r3, #11
 800112e:	b29b      	uxth	r3, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001136:	897b      	ldrh	r3, [r7, #10]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff fa56 	bl	800060c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001162:	e015      	b.n	8001190 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001164:	f7ff fa52 	bl	800060c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d309      	bcc.n	8001188 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e014      	b.n	80011b2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e4      	bne.n	8001164 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	460b      	mov	r3, r1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b42      	cmp	r3, #66	; 0x42
 80011da:	d101      	bne.n	80011e0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80011dc:	2302      	movs	r3, #2
 80011de:	e04e      	b.n	800127e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2242      	movs	r2, #66	; 0x42
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 031c 	and.w	r3, r3, #28
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8a1b      	ldrh	r3, [r3, #16]
 80011fc:	02db      	lsls	r3, r3, #11
 80011fe:	b29b      	uxth	r3, r3
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001206:	897b      	ldrh	r3, [r7, #10]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	b292      	uxth	r2, r2
 800122c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001236:	f7ff f9e9 	bl	800060c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800123c:	e015      	b.n	800126a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800123e:	f7ff f9e5 	bl	800060c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d309      	bcc.n	8001262 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00d      	b.n	800127e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e4      	bne.n	800123e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ETH_Start+0x16>
 8001298:	2302      	movs	r3, #2
 800129a:	e01f      	b.n	80012dc <HAL_ETH_Start+0x56>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fa19 	bl	80016e4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fa33 	bl	800171e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fa7d 	bl	80017b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fa4a 	bl	8001758 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fa5f 	bl	8001788 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	; 0xc0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001300:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001308:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001312:	2300      	movs	r3, #0
 8001314:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132e:	663b      	str	r3, [r7, #96]	; 0x60
 8001330:	e001      	b.n	8001336 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001340:	2300      	movs	r3, #0
 8001342:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013bc:	4bab      	ldr	r3, [pc, #684]	; (800166c <ETH_MACDMAConfig+0x388>)
 80013be:	4013      	ands	r3, r2
 80013c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80013c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013c8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80013ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80013cc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80013ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80013d0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80013d6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80013d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80013da:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80013dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80013de:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80013e4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80013e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80013e8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80013ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80013ec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80013ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80013f0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80013f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80013f4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80013f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80013f8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013fe:	4313      	orrs	r3, r2
 8001400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800140c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff f903 	bl	8000624 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001426:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800142e:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001430:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001432:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001434:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8001436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800143a:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 800143c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001440:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001442:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001446:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001448:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800144c:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 800144e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001452:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001454:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff f8df 	bl	8000624 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146e:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001478:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001482:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800148e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001492:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001496:	4013      	ands	r3, r2
 8001498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800149c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a0:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80014a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014a6:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80014a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80014ac:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80014ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80014b2:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80014b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80014b8:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80014ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80014be:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014c4:	4313      	orrs	r3, r2
 80014c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014d2:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff f8a0 	bl	8000624 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014ec:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80014f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff f88b 	bl	8000624 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001516:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800151c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001520:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800152a:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800153c:	2304      	movs	r3, #4
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800154c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	3318      	adds	r3, #24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001578:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <ETH_MACDMAConfig+0x38c>)
 800157a:	4013      	ands	r3, r2
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001580:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001582:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001584:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001586:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001588:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800158a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800158c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800158e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001590:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001592:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001594:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001596:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001598:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800159c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80015a0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	3318      	adds	r3, #24
 80015b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ba:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	3318      	adds	r3, #24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff f829 	bl	8000624 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	3318      	adds	r3, #24
 80015dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015e0:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80015e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015ea:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80015ee:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 80015f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015f2:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 80015f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80015f6:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 80015f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015fa:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80015fc:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80015fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001600:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001602:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff f802 	bl	8000624 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800162c:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10f      	bne.n	8001656 <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	331c      	adds	r3, #28
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001652:	331c      	adds	r3, #28
 8001654:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	461a      	mov	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f808 	bl	8001674 <ETH_MACAddressConfig>
}
 8001664:	bf00      	nop
 8001666:	37c0      	adds	r7, #192	; 0xc0
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	ff20810f 	.word	0xff20810f
 8001670:	f8de3f23 	.word	0xf8de3f23

08001674 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3305      	adds	r3, #5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	3204      	adds	r2, #4
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <ETH_MACAddressConfig+0x68>)
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3303      	adds	r3, #3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <ETH_MACAddressConfig+0x6c>)
 80016c6:	4413      	add	r3, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40028040 	.word	0x40028040
 80016e0:	40028044 	.word	0x40028044

080016e4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 f87f 	bl	800180c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f042 0204 	orr.w	r2, r2, #4
 8001738:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 f862 	bl	800180c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	3318      	adds	r3, #24
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001774:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001778:	3318      	adds	r3, #24
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	3318      	adds	r3, #24
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80017a8:	3318      	adds	r3, #24
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d0:	3318      	adds	r3, #24
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017d8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80017dc:	3318      	adds	r3, #24
 80017de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	3318      	adds	r3, #24
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 f80c 	bl	800180c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fe:	3318      	adds	r3, #24
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <ETH_Delay+0x34>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <ETH_Delay+0x38>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a5b      	lsrs	r3, r3, #9
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001828:	bf00      	nop
  } 
  while (Delay --);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	60fa      	str	r2, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f9      	bne.n	8001828 <ETH_Delay+0x1c>
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000018 	.word	0x20000018
 8001844:	10624dd3 	.word	0x10624dd3

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e177      	b.n	8001b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8166 	bne.w	8001b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x4a>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b12      	cmp	r3, #18
 8001890:	d123      	bne.n	80018da <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d00b      	beq.n	800192e <HAL_GPIO_Init+0xe6>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001922:	2b11      	cmp	r3, #17
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b12      	cmp	r3, #18
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80c0 	beq.w	8001b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d4:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x324>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x328>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d037      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d031      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x21a>
 8001a5e:	2309      	movs	r3, #9
 8001a60:	e012      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a62:	230a      	movs	r3, #10
 8001a64:	e010      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae84 	bls.w	8001864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40022400 	.word	0x40022400
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e22d      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d075      	beq.n	8001cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bee:	4ba3      	ldr	r3, [pc, #652]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfa:	4ba0      	ldr	r3, [pc, #640]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b9d      	ldr	r3, [pc, #628]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b99      	ldr	r3, [pc, #612]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d157      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e208      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x74>
 8001c36:	4a91      	ldr	r2, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4a8b      	ldr	r2, [pc, #556]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	4b8a      	ldr	r3, [pc, #552]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4a88      	ldr	r2, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	4b87      	ldr	r3, [pc, #540]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xb0>
 8001c68:	4a84      	ldr	r2, [pc, #528]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4a81      	ldr	r2, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe fcc0 	bl	800060c <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7fe fcbc 	bl	800060c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1cd      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xc0>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fcac 	bl	800060c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fca8 	bl	800060c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1b9      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xe8>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e18d      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4956      	ldr	r1, [pc, #344]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e03a      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b4f      	ldr	r3, [pc, #316]	; (8001e80 <HAL_RCC_OscConfig+0x2b0>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7fe fc61 	bl	800060c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7fe fc5d 	bl	800060c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e16e      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4943      	ldr	r1, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e015      	b.n	8001dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_OscConfig+0x2b0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe fc40 	bl	800060c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d90:	f7fe fc3c 	bl	800060c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e14d      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d030      	beq.n	8001e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCC_OscConfig+0x2b4>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7fe fc20 	bl	800060c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7fe fc1c 	bl	800060c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e12d      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x200>
 8001dee:	e015      	b.n	8001e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x2b4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7fe fc09 	bl	800060c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fc05 	bl	800060c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e116      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a0 	beq.w	8001f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x2b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d121      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <HAL_RCC_OscConfig+0x2b8>)
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_RCC_OscConfig+0x2b8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fbcb 	bl	800060c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e011      	b.n	8001e9e <HAL_RCC_OscConfig+0x2ce>
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470000 	.word	0x42470000
 8001e84:	42470e80 	.word	0x42470e80
 8001e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe fbbe 	bl	800060c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0cf      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
 8001eb2:	4a66      	ldr	r2, [pc, #408]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001eb4:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebe:	e01c      	b.n	8001efa <HAL_RCC_OscConfig+0x32a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x312>
 8001ec8:	4a60      	ldr	r2, [pc, #384]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001eca:	4b60      	ldr	r3, [pc, #384]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	e00b      	b.n	8001efa <HAL_RCC_OscConfig+0x32a>
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ef0:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d015      	beq.n	8001f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7fe fb83 	bl	800060c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7fe fb7f 	bl	800060c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e08e      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ee      	beq.n	8001f0a <HAL_RCC_OscConfig+0x33a>
 8001f2c:	e014      	b.n	8001f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fb6d 	bl	800060c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fb69 	bl	800060c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e078      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ee      	bne.n	8001f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d064      	beq.n	800203c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d05c      	beq.n	8002038 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d141      	bne.n	800200a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_RCC_OscConfig+0x480>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fb3e 	bl	800060c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fb3a 	bl	800060c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e04b      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fb2:	4926      	ldr	r1, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	019b      	lsls	r3, r3, #6
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	061b      	lsls	r3, r3, #24
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_RCC_OscConfig+0x480>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fb13 	bl	800060c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe fb0f 	bl	800060c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e020      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x41a>
 8002008:	e018      	b.n	800203c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_RCC_OscConfig+0x480>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fafc 	bl	800060c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe faf8 	bl	800060c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e009      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x47c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x448>
 8002036:	e001      	b.n	800203c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40007000 	.word	0x40007000
 800204c:	40023800 	.word	0x40023800
 8002050:	42470060 	.word	0x42470060

08002054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ca      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d20c      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b64      	ldr	r3, [pc, #400]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b62      	ldr	r3, [pc, #392]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b6      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a8:	4a58      	ldr	r2, [pc, #352]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c0:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020c2:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	494f      	ldr	r1, [pc, #316]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020ce:	4b4f      	ldr	r3, [pc, #316]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d044      	beq.n	8002174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d119      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07d      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d003      	beq.n	8002112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06d      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e065      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4936      	ldr	r1, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe fa62 	bl	800060c <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7fe fa5e 	bl	800060c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e04d      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d90c      	bls.n	800219c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_RCC_ClockConfig+0x1b4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e030      	b.n	80021fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4918      	ldr	r1, [pc, #96]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4911      	ldr	r1, [pc, #68]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021da:	f000 f81d 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021de:	4601      	mov	r1, r0
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	fa21 f303 	lsr.w	r3, r1, r3
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f011 ff1e 	bl	8014038 <HAL_InitTick>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00
 800220c:	40023800 	.word	0x40023800
 8002210:	0801806c 	.word	0x0801806c
 8002214:	20000018 	.word	0x20000018

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221c:	b087      	sub	sp, #28
 800221e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002220:	2200      	movs	r2, #0
 8002222:	60fa      	str	r2, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	617a      	str	r2, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800222c:	2200      	movs	r2, #0
 800222e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002230:	4a51      	ldr	r2, [pc, #324]	; (8002378 <HAL_RCC_GetSysClockFreq+0x160>)
 8002232:	6892      	ldr	r2, [r2, #8]
 8002234:	f002 020c 	and.w	r2, r2, #12
 8002238:	2a04      	cmp	r2, #4
 800223a:	d007      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
 800223c:	2a08      	cmp	r2, #8
 800223e:	d008      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x3a>
 8002240:	2a00      	cmp	r2, #0
 8002242:	f040 8090 	bne.w	8002366 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002246:	4b4d      	ldr	r3, [pc, #308]	; (800237c <HAL_RCC_GetSysClockFreq+0x164>)
 8002248:	613b      	str	r3, [r7, #16]
       break;
 800224a:	e08f      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_GetSysClockFreq+0x168>)
 800224e:	613b      	str	r3, [r7, #16]
      break;
 8002250:	e08c      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002252:	4a49      	ldr	r2, [pc, #292]	; (8002378 <HAL_RCC_GetSysClockFreq+0x160>)
 8002254:	6852      	ldr	r2, [r2, #4]
 8002256:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800225a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225c:	4a46      	ldr	r2, [pc, #280]	; (8002378 <HAL_RCC_GetSysClockFreq+0x160>)
 800225e:	6852      	ldr	r2, [r2, #4]
 8002260:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002264:	2a00      	cmp	r2, #0
 8002266:	d023      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCC_GetSysClockFreq+0x160>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	ea03 0301 	and.w	r3, r3, r1
 800227e:	ea04 0402 	and.w	r4, r4, r2
 8002282:	4a3f      	ldr	r2, [pc, #252]	; (8002380 <HAL_RCC_GetSysClockFreq+0x168>)
 8002284:	fb02 f104 	mul.w	r1, r2, r4
 8002288:	2200      	movs	r2, #0
 800228a:	fb02 f203 	mul.w	r2, r2, r3
 800228e:	440a      	add	r2, r1
 8002290:	493b      	ldr	r1, [pc, #236]	; (8002380 <HAL_RCC_GetSysClockFreq+0x168>)
 8002292:	fba3 0101 	umull	r0, r1, r3, r1
 8002296:	1853      	adds	r3, r2, r1
 8002298:	4619      	mov	r1, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f04f 0400 	mov.w	r4, #0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	f7fd fff4 	bl	8000290 <__aeabi_uldivmod>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e04c      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_RCC_GetSysClockFreq+0x160>)
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	0992      	lsrs	r2, r2, #6
 80022b6:	4611      	mov	r1, r2
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f240 15ff 	movw	r5, #511	; 0x1ff
 80022c0:	f04f 0600 	mov.w	r6, #0
 80022c4:	ea05 0501 	and.w	r5, r5, r1
 80022c8:	ea06 0602 	and.w	r6, r6, r2
 80022cc:	4629      	mov	r1, r5
 80022ce:	4632      	mov	r2, r6
 80022d0:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80022d4:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80022d8:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80022dc:	4651      	mov	r1, sl
 80022de:	465a      	mov	r2, fp
 80022e0:	46aa      	mov	sl, r5
 80022e2:	46b3      	mov	fp, r6
 80022e4:	4655      	mov	r5, sl
 80022e6:	465e      	mov	r6, fp
 80022e8:	1b4d      	subs	r5, r1, r5
 80022ea:	eb62 0606 	sbc.w	r6, r2, r6
 80022ee:	4629      	mov	r1, r5
 80022f0:	4632      	mov	r2, r6
 80022f2:	0194      	lsls	r4, r2, #6
 80022f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022f8:	018b      	lsls	r3, r1, #6
 80022fa:	1a5b      	subs	r3, r3, r1
 80022fc:	eb64 0402 	sbc.w	r4, r4, r2
 8002300:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002304:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002308:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800230c:	4643      	mov	r3, r8
 800230e:	464c      	mov	r4, r9
 8002310:	4655      	mov	r5, sl
 8002312:	465e      	mov	r6, fp
 8002314:	18ed      	adds	r5, r5, r3
 8002316:	eb46 0604 	adc.w	r6, r6, r4
 800231a:	462b      	mov	r3, r5
 800231c:	4634      	mov	r4, r6
 800231e:	02a2      	lsls	r2, r4, #10
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002332:	4618      	mov	r0, r3
 8002334:	4621      	mov	r1, r4
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f04f 0400 	mov.w	r4, #0
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	f7fd ffa6 	bl	8000290 <__aeabi_uldivmod>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_GetSysClockFreq+0x160>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	3301      	adds	r3, #1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	e002      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetSysClockFreq+0x164>)
 8002368:	613b      	str	r3, [r7, #16]
      break;
 800236a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236c:	693b      	ldr	r3, [r7, #16]
}
 800236e:	4618      	mov	r0, r3
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	00f42400 	.word	0x00f42400
 8002380:	017d7840 	.word	0x017d7840

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000018 	.word	0x20000018

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0b5b      	lsrs	r3, r3, #13
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	0801807c 	.word	0x0801807c

080023c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	220f      	movs	r2, #15
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_GetClockConfig+0x5c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCC_GetClockConfig+0x60>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01d      	b.n	8002476 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f815 	bl	800247e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 f968 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	68d2      	ldr	r2, [r2, #12]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b06      	cmp	r3, #6
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d122      	bne.n	8002536 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d11b      	bne.n	8002536 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0202 	mvn.w	r2, #2
 8002506:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8ee 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002522:	e005      	b.n	8002530 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8e0 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8f1 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d122      	bne.n	800258a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d11b      	bne.n	800258a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0204 	mvn.w	r2, #4
 800255a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8c4 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002576:	e005      	b.n	8002584 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f8b6 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f8c7 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d122      	bne.n	80025de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d11b      	bne.n	80025de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0208 	mvn.w	r2, #8
 80025ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f89a 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 80025ca:	e005      	b.n	80025d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f88c 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f89d 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d122      	bne.n	8002632 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d11b      	bne.n	8002632 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0210 	mvn.w	r2, #16
 8002602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2208      	movs	r2, #8
 8002608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f870 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 800261e:	e005      	b.n	800262c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f862 	bl	80026ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f873 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10e      	bne.n	800265e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0201 	mvn.w	r2, #1
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f011 fca7 	bl	8013fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f903 	bl	8002890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d10e      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f838 	bl	8002726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d10e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d107      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0220 	mvn.w	r2, #32
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8cd 	bl	800287c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <TIM_Base_SetConfig+0x114>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275a:	d00f      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3d      	ldr	r2, [pc, #244]	; (8002854 <TIM_Base_SetConfig+0x118>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3b      	ldr	r2, [pc, #236]	; (800285c <TIM_Base_SetConfig+0x120>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3a      	ldr	r2, [pc, #232]	; (8002860 <TIM_Base_SetConfig+0x124>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <TIM_Base_SetConfig+0x114>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d02b      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d027      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <TIM_Base_SetConfig+0x118>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d023      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <TIM_Base_SetConfig+0x11c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <TIM_Base_SetConfig+0x120>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01b      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <TIM_Base_SetConfig+0x124>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d017      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a28      	ldr	r2, [pc, #160]	; (8002864 <TIM_Base_SetConfig+0x128>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <TIM_Base_SetConfig+0x12c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00f      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a26      	ldr	r2, [pc, #152]	; (800286c <TIM_Base_SetConfig+0x130>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00b      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <TIM_Base_SetConfig+0x134>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a24      	ldr	r2, [pc, #144]	; (8002874 <TIM_Base_SetConfig+0x138>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <TIM_Base_SetConfig+0x13c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <TIM_Base_SetConfig+0x114>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d003      	beq.n	8002834 <TIM_Base_SetConfig+0xf8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <TIM_Base_SetConfig+0x124>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d103      	bne.n	800283c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	615a      	str	r2, [r3, #20]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40010000 	.word	0x40010000
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40010400 	.word	0x40010400
 8002864:	40014000 	.word	0x40014000
 8002868:	40014400 	.word	0x40014400
 800286c:	40014800 	.word	0x40014800
 8002870:	40001800 	.word	0x40001800
 8002874:	40001c00 	.word	0x40001c00
 8002878:	40002000 	.word	0x40002000

0800287c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b6:	2b84      	cmp	r3, #132	; 0x84
 80028b8:	d005      	beq.n	80028c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	3303      	adds	r3, #3
 80028c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028da:	f3ef 8305 	mrs	r3, IPSR
 80028de:	607b      	str	r3, [r7, #4]
  return(result);
 80028e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028fc:	f001 ffbe 	bl	800487c <vTaskStartScheduler>
  
  return osOK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}

08002906 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800290a:	f7ff ffe3 	bl	80028d4 <inHandlerMode>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002914:	f002 f8b2 	bl	8004a7c <xTaskGetTickCountFromISR>
 8002918:	4603      	mov	r3, r0
 800291a:	e002      	b.n	8002922 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800291c:	f002 f89e 	bl	8004a5c <xTaskGetTickCount>
 8002920:	4603      	mov	r3, r0
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}

08002926 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002928:	b087      	sub	sp, #28
 800292a:	af02      	add	r7, sp, #8
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685c      	ldr	r4, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800293c:	b29e      	uxth	r6, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ffad 	bl	80028a4 <makeFreeRtosPriority>
 800294a:	4602      	mov	r2, r0
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4632      	mov	r2, r6
 8002958:	4629      	mov	r1, r5
 800295a:	4620      	mov	r0, r4
 800295c:	f001 fe30 	bl	80045c0 <xTaskCreate>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d001      	beq.n	800296a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002974 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <osDelay+0x16>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	e000      	b.n	800298c <osDelay+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f001 ff41 	bl	8004814 <vTaskDelay>
  
  return osOK;
 8002992:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80029a4:	2001      	movs	r0, #1
 80029a6:	f000 ffd3 	bl	8003950 <xQueueCreateMutex>
 80029aa:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <osMutexWait+0x18>
    return osErrorParameter;
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	e03a      	b.n	8002a42 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d6:	d103      	bne.n	80029e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e009      	b.n	80029f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <osMutexWait+0x40>
      ticks = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80029f4:	f7ff ff6e 	bl	80028d4 <inHandlerMode>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d017      	beq.n	8002a2e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	461a      	mov	r2, r3
 8002a04:	2100      	movs	r1, #0
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 fbb6 	bl	8004178 <xQueueReceiveFromISR>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <osMutexWait+0x62>
      return osErrorOS;
 8002a12:	23ff      	movs	r3, #255	; 0xff
 8002a14:	e015      	b.n	8002a42 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <osMutexWait+0x8c>
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <osMutexWait+0x98>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	e008      	b.n	8002a40 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f001 fa99 	bl	8003f68 <xQueueSemaphoreTake>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <osMutexWait+0x8c>
    return osErrorOS;
 8002a3c:	23ff      	movs	r3, #255	; 0xff
 8002a3e:	e000      	b.n	8002a42 <osMutexWait+0x8e>
  }
  
  return osOK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002a60:	f7ff ff38 	bl	80028d4 <inHandlerMode>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 f913 	bl	8003c9c <xQueueGiveFromISR>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <osMutexRelease+0x30>
      return osErrorOS;
 8002a7c:	23ff      	movs	r3, #255	; 0xff
 8002a7e:	e017      	b.n	8002ab0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d013      	beq.n	8002aae <osMutexRelease+0x5e>
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <osMutexRelease+0x68>)
 8002a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	e00a      	b.n	8002aae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 ff6e 	bl	8003980 <xQueueGenericSend>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002aaa:	23ff      	movs	r3, #255	; 0xff
 8002aac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d110      	bne.n	8002aee <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8002acc:	2203      	movs	r2, #3
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f000 fecb 	bl	800386c <xQueueGenericCreate>
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <osSemaphoreCreate+0x2e>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 ff4b 	bl	8003980 <xQueueGenericSend>
    return sema;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	e000      	b.n	8002af0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8002aee:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	e03a      	b.n	8002b86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1a:	d103      	bne.n	8002b24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e009      	b.n	8002b38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <osSemaphoreWait+0x40>
      ticks = 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002b38:	f7ff fecc 	bl	80028d4 <inHandlerMode>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	461a      	mov	r2, r3
 8002b48:	2100      	movs	r1, #0
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f001 fb14 	bl	8004178 <xQueueReceiveFromISR>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b56:	23ff      	movs	r3, #255	; 0xff
 8002b58:	e015      	b.n	8002b86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d011      	beq.n	8002b84 <osSemaphoreWait+0x8c>
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <osSemaphoreWait+0x98>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	e008      	b.n	8002b84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f001 f9f7 	bl	8003f68 <xQueueSemaphoreTake>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002b80:	23ff      	movs	r3, #255	; 0xff
 8002b82:	e000      	b.n	8002b86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000ed04 	.word	0xe000ed04

08002b94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002ba4:	f7ff fe96 	bl	80028d4 <inHandlerMode>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f001 f871 	bl	8003c9c <xQueueGiveFromISR>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d001      	beq.n	8002bc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002bc0:	23ff      	movs	r3, #255	; 0xff
 8002bc2:	e017      	b.n	8002bf4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d013      	beq.n	8002bf2 <osSemaphoreRelease+0x5e>
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <osSemaphoreRelease+0x68>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	e00a      	b.n	8002bf2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fecc 	bl	8003980 <xQueueGenericSend>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002bee:	23ff      	movs	r3, #255	; 0xff
 8002bf0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	e000ed04 	.word	0xe000ed04

08002c00 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002c08:	f7ff fe64 	bl	80028d4 <inHandlerMode>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8002c12:	2382      	movs	r3, #130	; 0x82
 8002c14:	e003      	b.n	8002c1e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f001 fb63 	bl	80042e2 <vQueueDelete>

  return osOK; 
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f000 fe16 	bl	800386c <xQueueGenericCreate>
 8002c40:	4603      	mov	r3, r0
#endif
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <osMessagePut+0x1e>
    ticks = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002c6a:	f7ff fe33 	bl	80028d4 <inHandlerMode>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d018      	beq.n	8002ca6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002c74:	f107 0210 	add.w	r2, r7, #16
 8002c78:	f107 0108 	add.w	r1, r7, #8
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 ff78 	bl	8003b74 <xQueueGenericSendFromISR>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <osMessagePut+0x42>
      return osErrorOS;
 8002c8a:	23ff      	movs	r3, #255	; 0xff
 8002c8c:	e018      	b.n	8002cc0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d014      	beq.n	8002cbe <osMessagePut+0x72>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <osMessagePut+0x7c>)
 8002c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	e00b      	b.n	8002cbe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002ca6:	f107 0108 	add.w	r1, r7, #8
 8002caa:	2300      	movs	r3, #0
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fe66 	bl	8003980 <xQueueGenericSend>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <osMessagePut+0x72>
      return osErrorOS;
 8002cba:	23ff      	movs	r3, #255	; 0xff
 8002cbc:	e000      	b.n	8002cc0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b08b      	sub	sp, #44	; 0x2c
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	617b      	str	r3, [r7, #20]
    return event;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	461c      	mov	r4, r3
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cfa:	e054      	b.n	8002da6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0a:	d103      	bne.n	8002d14 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	e009      	b.n	8002d28 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <osMessageGet+0x5c>
      ticks = 1;
 8002d24:	2301      	movs	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002d28:	f7ff fdd4 	bl	80028d4 <inHandlerMode>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01c      	beq.n	8002d6c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002d32:	f107 0220 	add.w	r2, r7, #32
 8002d36:	f107 0314 	add.w	r3, r7, #20
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	68b8      	ldr	r0, [r7, #8]
 8002d40:	f001 fa1a 	bl	8004178 <xQueueReceiveFromISR>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e001      	b.n	8002d54 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01d      	beq.n	8002d96 <osMessageGet+0xca>
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <osMessageGet+0xe4>)
 8002d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	e014      	b.n	8002d96 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	3304      	adds	r3, #4
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	4619      	mov	r1, r3
 8002d76:	68b8      	ldr	r0, [r7, #8]
 8002d78:	f001 f81a 	bl	8003db0 <xQueueReceive>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002d82:	2310      	movs	r3, #16
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e006      	b.n	8002d96 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <osMessageGet+0xc6>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <osMessageGet+0xc8>
 8002d92:	2340      	movs	r3, #64	; 0x40
 8002d94:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	461c      	mov	r4, r3
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	372c      	adds	r7, #44	; 0x2c
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002dbc:	f7ff fd8a 	bl	80028d4 <inHandlerMode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f001 fa70 	bl	80042ac <uxQueueMessagesWaitingFromISR>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	e003      	b.n	8002dd8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f001 fa4e 	bl	8004272 <uxQueueMessagesWaiting>
 8002dd6:	4603      	mov	r3, r0
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002de8:	f7ff fd74 	bl	80028d4 <inHandlerMode>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <osMessageDelete+0x16>
    return osErrorISR;
 8002df2:	2382      	movs	r3, #130	; 0x82
 8002df4:	e003      	b.n	8002dfe <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f001 fa73 	bl	80042e2 <vQueueDelete>

  return osOK; 
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f103 0208 	add.w	r2, r3, #8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 0208 	add.w	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f103 0208 	add.w	r2, r3, #8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	601a      	str	r2, [r3, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ebe:	d103      	bne.n	8002ec8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e00c      	b.n	8002ee2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e002      	b.n	8002ed6 <vListInsert+0x2e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d9f6      	bls.n	8002ed0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6852      	ldr	r2, [r2, #4]
 8002f3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d103      	bne.n	8002f4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b04      	subs	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f023 0201 	bic.w	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3b04      	subs	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <pxPortInitialiseStack+0x64>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3b14      	subs	r3, #20
 8002faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3b04      	subs	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f06f 0202 	mvn.w	r2, #2
 8002fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3b20      	subs	r3, #32
 8002fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	08002fd9 	.word	0x08002fd9

08002fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <prvTaskExitError+0x50>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fea:	d009      	beq.n	8003000 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e7fe      	b.n	8002ffe <prvTaskExitError+0x26>
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003012:	bf00      	nop
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0fc      	beq.n	8003014 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000004 	.word	0x20000004
 800302c:	00000000 	.word	0x00000000

08003030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <pxCurrentTCBConst2>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	6808      	ldr	r0, [r1, #0]
 8003036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303a:	f380 8809 	msr	PSP, r0
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f380 8811 	msr	BASEPRI, r0
 800304a:	4770      	bx	lr
 800304c:	f3af 8000 	nop.w

08003050 <pxCurrentTCBConst2>:
 8003050:	20003cbc 	.word	0x20003cbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop

08003058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003058:	4808      	ldr	r0, [pc, #32]	; (800307c <prvPortStartFirstTask+0x24>)
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	6800      	ldr	r0, [r0, #0]
 800305e:	f380 8808 	msr	MSP, r0
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8814 	msr	CONTROL, r0
 800306a:	b662      	cpsie	i
 800306c:	b661      	cpsie	f
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	df00      	svc	0
 8003078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800307a:	bf00      	nop
 800307c:	e000ed08 	.word	0xe000ed08

08003080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003086:	4b44      	ldr	r3, [pc, #272]	; (8003198 <xPortStartScheduler+0x118>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a44      	ldr	r2, [pc, #272]	; (800319c <xPortStartScheduler+0x11c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d109      	bne.n	80030a4 <xPortStartScheduler+0x24>
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e7fe      	b.n	80030a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <xPortStartScheduler+0x118>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <xPortStartScheduler+0x120>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d109      	bne.n	80030c2 <xPortStartScheduler+0x42>
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e7fe      	b.n	80030c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <xPortStartScheduler+0x124>)
 80030c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <xPortStartScheduler+0x128>)
 80030e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030ea:	4b30      	ldr	r3, [pc, #192]	; (80031ac <xPortStartScheduler+0x12c>)
 80030ec:	2207      	movs	r2, #7
 80030ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030f0:	e009      	b.n	8003106 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <xPortStartScheduler+0x12c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <xPortStartScheduler+0x12c>)
 80030fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d0ef      	beq.n	80030f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <xPortStartScheduler+0x12c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	d009      	beq.n	8003132 <xPortStartScheduler+0xb2>
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	e7fe      	b.n	8003130 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <xPortStartScheduler+0x12c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <xPortStartScheduler+0x12c>)
 800313a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <xPortStartScheduler+0x12c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <xPortStartScheduler+0x12c>)
 8003146:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003150:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <xPortStartScheduler+0x130>)
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <xPortStartScheduler+0x130>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800315a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <xPortStartScheduler+0x130>)
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <xPortStartScheduler+0x130>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003166:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003168:	f000 f8d6 	bl	8003318 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <xPortStartScheduler+0x134>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003172:	f000 f8f5 	bl	8003360 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003176:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <xPortStartScheduler+0x138>)
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <xPortStartScheduler+0x138>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003180:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003182:	f7ff ff69 	bl	8003058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003186:	f001 fd47 	bl	8004c18 <vTaskSwitchContext>
	prvTaskExitError();
 800318a:	f7ff ff25 	bl	8002fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	e000ed00 	.word	0xe000ed00
 800319c:	410fc271 	.word	0x410fc271
 80031a0:	410fc270 	.word	0x410fc270
 80031a4:	e000e400 	.word	0xe000e400
 80031a8:	2000009c 	.word	0x2000009c
 80031ac:	200000a0 	.word	0x200000a0
 80031b0:	e000ed20 	.word	0xe000ed20
 80031b4:	20000004 	.word	0x20000004
 80031b8:	e000ef34 	.word	0xe000ef34

080031bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <vPortEnterCritical+0x54>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <vPortEnterCritical+0x54>)
 80031dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <vPortEnterCritical+0x54>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10e      	bne.n	8003204 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <vPortEnterCritical+0x58>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <vPortEnterCritical+0x48>
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	e7fe      	b.n	8003202 <vPortEnterCritical+0x46>
	}
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000004 	.word	0x20000004
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <vPortExitCritical+0x4c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <vPortExitCritical+0x22>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e7fe      	b.n	8003238 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <vPortExitCritical+0x4c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3b01      	subs	r3, #1
 8003240:	4a08      	ldr	r2, [pc, #32]	; (8003264 <vPortExitCritical+0x4c>)
 8003242:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <vPortExitCritical+0x4c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d104      	bne.n	8003256 <vPortExitCritical+0x3e>
 800324c:	2300      	movs	r3, #0
 800324e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000004 	.word	0x20000004
	...

08003270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003270:	f3ef 8009 	mrs	r0, PSP
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <pxCurrentTCBConst>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	f01e 0f10 	tst.w	lr, #16
 8003280:	bf08      	it	eq
 8003282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328a:	6010      	str	r0, [r2, #0]
 800328c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003294:	f380 8811 	msr	BASEPRI, r0
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f001 fcba 	bl	8004c18 <vTaskSwitchContext>
 80032a4:	f04f 0000 	mov.w	r0, #0
 80032a8:	f380 8811 	msr	BASEPRI, r0
 80032ac:	bc09      	pop	{r0, r3}
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	6808      	ldr	r0, [r1, #0]
 80032b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b6:	f01e 0f10 	tst.w	lr, #16
 80032ba:	bf08      	it	eq
 80032bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032c0:	f380 8809 	msr	PSP, r0
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	f3af 8000 	nop.w

080032d0 <pxCurrentTCBConst>:
 80032d0:	20003cbc 	.word	0x20003cbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop

080032d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
	__asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032f0:	f001 fbd6 	bl	8004aa0 <xTaskIncrementTick>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <SysTick_Handler+0x3c>)
 80032fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <vPortSetupTimerInterrupt+0x34>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <vPortSetupTimerInterrupt+0x38>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <vPortSetupTimerInterrupt+0x3c>)
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <vPortSetupTimerInterrupt+0x40>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	490b      	ldr	r1, [pc, #44]	; (800335c <vPortSetupTimerInterrupt+0x44>)
 8003330:	fba1 1303 	umull	r1, r3, r1, r3
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	3b01      	subs	r3, #1
 8003338:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <vPortSetupTimerInterrupt+0x34>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010
 8003350:	e000e018 	.word	0xe000e018
 8003354:	e000e014 	.word	0xe000e014
 8003358:	20000018 	.word	0x20000018
 800335c:	10624dd3 	.word	0x10624dd3

08003360 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003360:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003370 <vPortEnableVFP+0x10>
 8003364:	6801      	ldr	r1, [r0, #0]
 8003366:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800336a:	6001      	str	r1, [r0, #0]
 800336c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800336e:	bf00      	nop
 8003370:	e000ed88 	.word	0xe000ed88

08003374 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800337a:	f3ef 8305 	mrs	r3, IPSR
 800337e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	d913      	bls.n	80033ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <vPortValidateInterruptPriority+0x6c>)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <vPortValidateInterruptPriority+0x70>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	7afa      	ldrb	r2, [r7, #11]
 8003396:	429a      	cmp	r2, r3
 8003398:	d209      	bcs.n	80033ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	e7fe      	b.n	80033ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <vPortValidateInterruptPriority+0x74>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <vPortValidateInterruptPriority+0x78>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d909      	bls.n	80033d2 <vPortValidateInterruptPriority+0x5e>
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	e7fe      	b.n	80033d0 <vPortValidateInterruptPriority+0x5c>
	}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e3f0 	.word	0xe000e3f0
 80033e4:	2000009c 	.word	0x2000009c
 80033e8:	e000ed0c 	.word	0xe000ed0c
 80033ec:	200000a0 	.word	0x200000a0

080033f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80033fc:	f001 fa84 	bl	8004908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003400:	4b57      	ldr	r3, [pc, #348]	; (8003560 <pvPortMalloc+0x170>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003408:	f000 f90c 	bl	8003624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800340c:	4b55      	ldr	r3, [pc, #340]	; (8003564 <pvPortMalloc+0x174>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 808c 	bne.w	8003532 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01c      	beq.n	800345a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003420:	2208      	movs	r2, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	2b00      	cmp	r3, #0
 8003430:	d013      	beq.n	800345a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f023 0307 	bic.w	r3, r3, #7
 8003438:	3308      	adds	r3, #8
 800343a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <pvPortMalloc+0x6a>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e7fe      	b.n	8003458 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d068      	beq.n	8003532 <pvPortMalloc+0x142>
 8003460:	4b41      	ldr	r3, [pc, #260]	; (8003568 <pvPortMalloc+0x178>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	429a      	cmp	r2, r3
 8003468:	d863      	bhi.n	8003532 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800346a:	4b40      	ldr	r3, [pc, #256]	; (800356c <pvPortMalloc+0x17c>)
 800346c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <pvPortMalloc+0x17c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003474:	e004      	b.n	8003480 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d203      	bcs.n	8003492 <pvPortMalloc+0xa2>
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f1      	bne.n	8003476 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003492:	4b33      	ldr	r3, [pc, #204]	; (8003560 <pvPortMalloc+0x170>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	429a      	cmp	r2, r3
 800349a:	d04a      	beq.n	8003532 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	4413      	add	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	1ad2      	subs	r2, r2, r3
 80034b6:	2308      	movs	r3, #8
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d91e      	bls.n	80034fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <pvPortMalloc+0xf4>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e7fe      	b.n	80034e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad2      	subs	r2, r2, r3
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034f6:	69b8      	ldr	r0, [r7, #24]
 80034f8:	f000 f8f6 	bl	80036e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <pvPortMalloc+0x178>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <pvPortMalloc+0x178>)
 8003508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800350a:	4b17      	ldr	r3, [pc, #92]	; (8003568 <pvPortMalloc+0x178>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <pvPortMalloc+0x180>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d203      	bcs.n	800351e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <pvPortMalloc+0x178>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a15      	ldr	r2, [pc, #84]	; (8003570 <pvPortMalloc+0x180>)
 800351c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <pvPortMalloc+0x174>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	431a      	orrs	r2, r3
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003532:	f001 f9f7 	bl	8004924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <pvPortMalloc+0x164>
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e7fe      	b.n	8003552 <pvPortMalloc+0x162>
	return pvReturn;
 8003554:	69fb      	ldr	r3, [r7, #28]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	; 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20003cac 	.word	0x20003cac
 8003564:	20003cb8 	.word	0x20003cb8
 8003568:	20003cb0 	.word	0x20003cb0
 800356c:	20003ca4 	.word	0x20003ca4
 8003570:	20003cb4 	.word	0x20003cb4

08003574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d046      	beq.n	8003614 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003586:	2308      	movs	r3, #8
 8003588:	425b      	negs	r3, r3
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4413      	add	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <vPortFree+0xa8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <vPortFree+0x42>
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e7fe      	b.n	80035b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <vPortFree+0x5e>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e7fe      	b.n	80035d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <vPortFree+0xa8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d019      	beq.n	8003614 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d115      	bne.n	8003614 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <vPortFree+0xa8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80035f8:	f001 f986 	bl	8004908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <vPortFree+0xac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4413      	add	r3, r2
 8003606:	4a06      	ldr	r2, [pc, #24]	; (8003620 <vPortFree+0xac>)
 8003608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800360a:	6938      	ldr	r0, [r7, #16]
 800360c:	f000 f86c 	bl	80036e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003610:	f001 f988 	bl	8004924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003614:	bf00      	nop
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20003cb8 	.word	0x20003cb8
 8003620:	20003cb0 	.word	0x20003cb0

08003624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800362a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800362e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <prvHeapInit+0xac>)
 8003632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3307      	adds	r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0307 	bic.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <prvHeapInit+0xac>)
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800365c:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <prvHeapInit+0xb0>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <prvHeapInit+0xb0>)
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4413      	add	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003670:	2208      	movs	r2, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <prvHeapInit+0xb4>)
 8003684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <prvHeapInit+0xb4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <prvHeapInit+0xb4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	1ad2      	subs	r2, r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <prvHeapInit+0xb4>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <prvHeapInit+0xb8>)
 80036b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <prvHeapInit+0xbc>)
 80036ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <prvHeapInit+0xc0>)
 80036be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036c2:	601a      	str	r2, [r3, #0]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	200000a4 	.word	0x200000a4
 80036d4:	20003ca4 	.word	0x20003ca4
 80036d8:	20003cac 	.word	0x20003cac
 80036dc:	20003cb4 	.word	0x20003cb4
 80036e0:	20003cb0 	.word	0x20003cb0
 80036e4:	20003cb8 	.word	0x20003cb8

080036e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <prvInsertBlockIntoFreeList+0xac>)
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e002      	b.n	80036fc <prvInsertBlockIntoFreeList+0x14>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3f7      	bcc.n	80036f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d108      	bne.n	800372a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d118      	bne.n	8003770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <prvInsertBlockIntoFreeList+0xb0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d00d      	beq.n	8003766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e008      	b.n	8003778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <prvInsertBlockIntoFreeList+0xb0>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e003      	b.n	8003778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d002      	beq.n	8003786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20003ca4 	.word	0x20003ca4
 8003798:	20003cac 	.word	0x20003cac

0800379c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <xQueueGenericReset+0x28>
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	e7fe      	b.n	80037c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80037c4:	f7ff fcfa 	bl	80031bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	68f9      	ldr	r1, [r7, #12]
 80037d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	441a      	add	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	3b01      	subs	r3, #1
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	22ff      	movs	r2, #255	; 0xff
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d114      	bne.n	8003844 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01a      	beq.n	8003858 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3310      	adds	r3, #16
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fa74 	bl	8004d14 <xTaskRemoveFromEventList>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <xQueueGenericReset+0xcc>)
 8003834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	e009      	b.n	8003858 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3310      	adds	r3, #16
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fadc 	bl	8002e06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3324      	adds	r3, #36	; 0x24
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fad7 	bl	8002e06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003858:	f7ff fcde 	bl	8003218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <xQueueGenericCreate+0x28>
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e7fe      	b.n	8003892 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e004      	b.n	80038aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3348      	adds	r3, #72	; 0x48
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fd9e 	bl	80033f0 <pvPortMalloc>
 80038b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	3348      	adds	r3, #72	; 0x48
 80038c0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038c2:	79fa      	ldrb	r2, [r7, #7]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f805 	bl	80038de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80038d4:	69bb      	ldr	r3, [r7, #24]
	}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e002      	b.n	8003900 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800390c:	2101      	movs	r1, #1
 800390e:	69b8      	ldr	r0, [r7, #24]
 8003910:	f7ff ff44 	bl	800379c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00e      	beq.n	8003948 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800393c:	2300      	movs	r3, #0
 800393e:	2200      	movs	r2, #0
 8003940:	2100      	movs	r1, #0
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f81c 	bl	8003980 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800395a:	2301      	movs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	461a      	mov	r2, r3
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	f7ff ff7f 	bl	800386c <xQueueGenericCreate>
 800396e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff ffd3 	bl	800391c <prvInitialiseMutex>

		return pxNewQueue;
 8003976:	68fb      	ldr	r3, [r7, #12]
	}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08e      	sub	sp, #56	; 0x38
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <xQueueGenericSend+0x30>
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ae:	e7fe      	b.n	80039ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <xQueueGenericSend+0x3e>
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <xQueueGenericSend+0x42>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <xQueueGenericSend+0x44>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <xQueueGenericSend+0x5c>
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	e7fe      	b.n	80039da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x6a>
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <xQueueGenericSend+0x6e>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericSend+0x70>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <xQueueGenericSend+0x88>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	e7fe      	b.n	8003a06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a08:	f001 fb22 	bl	8005050 <xTaskGetSchedulerState>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <xQueueGenericSend+0x98>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xQueueGenericSend+0x9c>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <xQueueGenericSend+0x9e>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <xQueueGenericSend+0xb6>
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a36:	f7ff fbc1 	bl	80031bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <xQueueGenericSend+0xcc>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d129      	bne.n	8003aa0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fc7b 	bl	800434c <prvCopyDataToQueue>
 8003a56:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f955 	bl	8004d14 <xTaskRemoveFromEventList>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a70:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <xQueueGenericSend+0x1f0>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	e00a      	b.n	8003a98 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a88:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <xQueueGenericSend+0x1f0>)
 8003a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a98:	f7ff fbbe 	bl	8003218 <vPortExitCritical>
				return pdPASS;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e063      	b.n	8003b68 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aa6:	f7ff fbb7 	bl	8003218 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e05c      	b.n	8003b68 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 f98d 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac2:	f7ff fba9 	bl	8003218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac6:	f000 ff1f 	bl	8004908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aca:	f7ff fb77 	bl	80031bc <vPortEnterCritical>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ada:	d103      	bne.n	8003ae4 <xQueueGenericSend+0x164>
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aea:	b25b      	sxtb	r3, r3
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af0:	d103      	bne.n	8003afa <xQueueGenericSend+0x17a>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afa:	f7ff fb8d 	bl	8003218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003afe:	1d3a      	adds	r2, r7, #4
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f97c 	bl	8004e04 <xTaskCheckForTimeOut>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d124      	bne.n	8003b5c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b14:	f000 fd12 	bl	800453c <prvIsQueueFull>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d018      	beq.n	8003b50 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	3310      	adds	r3, #16
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f8d0 	bl	8004ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 fc9d 	bl	800446c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b32:	f000 fef7 	bl	8004924 <xTaskResumeAll>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f47f af7c 	bne.w	8003a36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <xQueueGenericSend+0x1f0>)
 8003b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	e772      	b.n	8003a36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 fc8b 	bl	800446c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b56:	f000 fee5 	bl	8004924 <xTaskResumeAll>
 8003b5a:	e76c      	b.n	8003a36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5e:	f000 fc85 	bl	800446c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b62:	f000 fedf 	bl	8004924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b66:	2300      	movs	r3, #0
		}
	}
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3738      	adds	r7, #56	; 0x38
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <xQueueGenericSendFromISR+0x2c>
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	e7fe      	b.n	8003b9e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <xQueueGenericSendFromISR+0x3a>
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <xQueueGenericSendFromISR+0x3e>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <xQueueGenericSendFromISR+0x40>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <xQueueGenericSendFromISR+0x58>
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	e7fe      	b.n	8003bca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d103      	bne.n	8003bda <xQueueGenericSendFromISR+0x66>
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <xQueueGenericSendFromISR+0x6a>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueGenericSendFromISR+0x6c>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <xQueueGenericSendFromISR+0x84>
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e7fe      	b.n	8003bf6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bf8:	f7ff fbbc 	bl	8003374 <vPortValidateInterruptPriority>
	__asm volatile
 8003bfc:	f3ef 8211 	mrs	r2, BASEPRI
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61ba      	str	r2, [r7, #24]
 8003c12:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <xQueueGenericSendFromISR+0xb6>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d12c      	bne.n	8003c84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3a:	f000 fb87 	bl	800434c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c46:	d112      	bne.n	8003c6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	3324      	adds	r3, #36	; 0x24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 f85d 	bl	8004d14 <xTaskRemoveFromEventList>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e007      	b.n	8003c7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c72:	3301      	adds	r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c82:	e001      	b.n	8003c88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08e      	sub	sp, #56	; 0x38
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	e7fe      	b.n	8003cc2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <xQueueGiveFromISR+0x44>
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e7fe      	b.n	8003cde <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <xQueueGiveFromISR+0x54>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <xQueueGiveFromISR+0x58>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <xQueueGiveFromISR+0x5a>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <xQueueGiveFromISR+0x72>
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e7fe      	b.n	8003d0c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d0e:	f7ff fb31 	bl	8003374 <vPortValidateInterruptPriority>
	__asm volatile
 8003d12:	f3ef 8211 	mrs	r2, BASEPRI
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	617a      	str	r2, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003d2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d92b      	bls.n	8003d96 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d58:	d112      	bne.n	8003d80 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ffd4 	bl	8004d14 <xTaskRemoveFromEventList>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00e      	beq.n	8003d90 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e007      	b.n	8003d90 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	b25a      	sxtb	r2, r3
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d90:	2301      	movs	r3, #1
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
 8003d94:	e001      	b.n	8003d9a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3738      	adds	r7, #56	; 0x38
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08c      	sub	sp, #48	; 0x30
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <xQueueReceive+0x2e>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	e7fe      	b.n	8003ddc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <xQueueReceive+0x3c>
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xQueueReceive+0x40>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xQueueReceive+0x42>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <xQueueReceive+0x5a>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e7fe      	b.n	8003e08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0a:	f001 f921 	bl	8005050 <xTaskGetSchedulerState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueReceive+0x6a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x6e>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x70>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <xQueueReceive+0x88>
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e7fe      	b.n	8003e36 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e38:	f7ff f9c0 	bl	80031bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01f      	beq.n	8003e88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4c:	f000 fae8 	bl	8004420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	1e5a      	subs	r2, r3, #1
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00f      	beq.n	8003e80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	3310      	adds	r3, #16
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 ff55 	bl	8004d14 <xTaskRemoveFromEventList>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e70:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <xQueueReceive+0x1b4>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e80:	f7ff f9ca 	bl	8003218 <vPortExitCritical>
				return pdPASS;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e069      	b.n	8003f5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e8e:	f7ff f9c3 	bl	8003218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e062      	b.n	8003f5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 ff99 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eaa:	f7ff f9b5 	bl	8003218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eae:	f000 fd2b 	bl	8004908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb2:	f7ff f983 	bl	80031bc <vPortEnterCritical>
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ebc:	b25b      	sxtb	r3, r3
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec2:	d103      	bne.n	8003ecc <xQueueReceive+0x11c>
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed8:	d103      	bne.n	8003ee2 <xQueueReceive+0x132>
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee2:	f7ff f999 	bl	8003218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee6:	1d3a      	adds	r2, r7, #4
 8003ee8:	f107 0310 	add.w	r3, r7, #16
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 ff88 	bl	8004e04 <xTaskCheckForTimeOut>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d123      	bne.n	8003f42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efc:	f000 fb08 	bl	8004510 <prvIsQueueEmpty>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d017      	beq.n	8003f36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fedc 	bl	8004ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f16:	f000 faa9 	bl	800446c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f1a:	f000 fd03 	bl	8004924 <xTaskResumeAll>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d189      	bne.n	8003e38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <xQueueReceive+0x1b4>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	e780      	b.n	8003e38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f38:	f000 fa98 	bl	800446c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3c:	f000 fcf2 	bl	8004924 <xTaskResumeAll>
 8003f40:	e77a      	b.n	8003e38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f44:	f000 fa92 	bl	800446c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f48:	f000 fcec 	bl	8004924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4e:	f000 fadf 	bl	8004510 <prvIsQueueEmpty>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f43f af6f 	beq.w	8003e38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	; 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08e      	sub	sp, #56	; 0x38
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <xQueueSemaphoreTake+0x30>
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	e7fe      	b.n	8003f96 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <xQueueSemaphoreTake+0x4c>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e7fe      	b.n	8003fb2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fb4:	f001 f84c 	bl	8005050 <xTaskGetSchedulerState>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <xQueueSemaphoreTake+0x5c>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <xQueueSemaphoreTake+0x60>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <xQueueSemaphoreTake+0x62>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <xQueueSemaphoreTake+0x7a>
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e7fe      	b.n	8003fe0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fe2:	f7ff f8eb 	bl	80031bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d024      	beq.n	800403c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004002:	f001 f9eb 	bl	80053dc <pvTaskIncrementMutexHeldCount>
 8004006:	4602      	mov	r2, r0
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00f      	beq.n	8004034 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	3310      	adds	r3, #16
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fe7b 	bl	8004d14 <xTaskRemoveFromEventList>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <xQueueSemaphoreTake+0x20c>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004034:	f7ff f8f0 	bl	8003218 <vPortExitCritical>
				return pdPASS;
 8004038:	2301      	movs	r3, #1
 800403a:	e096      	b.n	800416a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d110      	bne.n	8004064 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <xQueueSemaphoreTake+0xf4>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e7fe      	b.n	800405a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800405c:	f7ff f8dc 	bl	8003218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004060:	2300      	movs	r3, #0
 8004062:	e082      	b.n	800416a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	4618      	mov	r0, r3
 8004070:	f000 feb2 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004078:	f7ff f8ce 	bl	8003218 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800407c:	f000 fc44 	bl	8004908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004080:	f7ff f89c 	bl	80031bc <vPortEnterCritical>
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800408a:	b25b      	sxtb	r3, r3
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004090:	d103      	bne.n	800409a <xQueueSemaphoreTake+0x132>
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a6:	d103      	bne.n	80040b0 <xQueueSemaphoreTake+0x148>
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b0:	f7ff f8b2 	bl	8003218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040b4:	463a      	mov	r2, r7
 80040b6:	f107 030c 	add.w	r3, r7, #12
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fea1 	bl	8004e04 <xTaskCheckForTimeOut>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d132      	bne.n	800412e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ca:	f000 fa21 	bl	8004510 <prvIsQueueEmpty>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d026      	beq.n	8004122 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80040dc:	f7ff f86e 	bl	80031bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 ffd1 	bl	800508c <xTaskPriorityInherit>
 80040ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80040ec:	f7ff f894 	bl	8003218 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	3324      	adds	r3, #36	; 0x24
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fde7 	bl	8004ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004100:	f000 f9b4 	bl	800446c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004104:	f000 fc0e 	bl	8004924 <xTaskResumeAll>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	f47f af69 	bne.w	8003fe2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <xQueueSemaphoreTake+0x20c>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	e75f      	b.n	8003fe2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004124:	f000 f9a2 	bl	800446c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004128:	f000 fbfc 	bl	8004924 <xTaskResumeAll>
 800412c:	e759      	b.n	8003fe2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800412e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004130:	f000 f99c 	bl	800446c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004134:	f000 fbf6 	bl	8004924 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800413a:	f000 f9e9 	bl	8004510 <prvIsQueueEmpty>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	f43f af4e 	beq.w	8003fe2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800414c:	f7ff f836 	bl	80031bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004152:	f000 f8e3 	bl	800431c <prvGetDisinheritPriorityAfterTimeout>
 8004156:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	f001 f89e 	bl	80052a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004164:	f7ff f858 	bl	8003218 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004168:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800416a:	4618      	mov	r0, r3
 800416c:	3738      	adds	r7, #56	; 0x38
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <xQueueReceiveFromISR+0x2a>
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	e7fe      	b.n	80041a0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <xQueueReceiveFromISR+0x38>
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <xQueueReceiveFromISR+0x3c>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <xQueueReceiveFromISR+0x3e>
 80041b4:	2300      	movs	r3, #0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <xQueueReceiveFromISR+0x56>
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e7fe      	b.n	80041cc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041ce:	f7ff f8d1 	bl	8003374 <vPortValidateInterruptPriority>
	__asm volatile
 80041d2:	f3ef 8211 	mrs	r2, BASEPRI
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	61ba      	str	r2, [r7, #24]
 80041e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80041ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d02f      	beq.n	800425a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004208:	f000 f90a 	bl	8004420 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004214:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421c:	d112      	bne.n	8004244 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	3310      	adds	r3, #16
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fd72 	bl	8004d14 <xTaskRemoveFromEventList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00b      	beq.n	8004254 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e007      	b.n	8004254 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004248:	3301      	adds	r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	b25a      	sxtb	r2, r3
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004254:	2301      	movs	r3, #1
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
 8004258:	e001      	b.n	800425e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800425a:	2300      	movs	r3, #0
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800426a:	4618      	mov	r0, r3
 800426c:	3738      	adds	r7, #56	; 0x38
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	e7fe      	b.n	8004292 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004294:	f7fe ff92 	bl	80031bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800429e:	f7fe ffbb 	bl	8003218 <vPortExitCritical>

	return uxReturn;
 80042a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <uxQueueMessagesWaitingFromISR+0x22>
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	e7fe      	b.n	80042cc <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80042d4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <vQueueDelete+0x26>
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	e7fe      	b.n	8004306 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f92f 	bl	800456c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff f930 	bl	8003574 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d006      	beq.n	800433a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e001      	b.n	800433e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800433e:	68fb      	ldr	r3, [r7, #12]
	}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d14d      	bne.n	800440e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 ff0e 	bl	8005198 <xTaskPriorityDisinherit>
 800437c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	e043      	b.n	800440e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d119      	bne.n	80043c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6898      	ldr	r0, [r3, #8]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	461a      	mov	r2, r3
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	f010 f805 	bl	80143a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d32b      	bcc.n	800440e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	e026      	b.n	800440e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68d8      	ldr	r0, [r3, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	461a      	mov	r2, r3
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	f00f ffeb 	bl	80143a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	425b      	negs	r3, r3
 80043da:	441a      	add	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d207      	bcs.n	80043fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	425b      	negs	r3, r3
 80043f6:	441a      	add	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d105      	bne.n	800440e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3b01      	subs	r3, #1
 800440c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004416:	697b      	ldr	r3, [r7, #20]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	441a      	add	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d303      	bcc.n	8004454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68d9      	ldr	r1, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	461a      	mov	r2, r3
 800445e:	6838      	ldr	r0, [r7, #0]
 8004460:	f00f ffa1 	bl	80143a6 <memcpy>
	}
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004474:	f7fe fea2 	bl	80031bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004480:	e011      	b.n	80044a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3324      	adds	r3, #36	; 0x24
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fc40 	bl	8004d14 <xTaskRemoveFromEventList>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800449a:	f000 fd13 	bl	8004ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dce9      	bgt.n	8004482 <prvUnlockQueue+0x16>
 80044ae:	e000      	b.n	80044b2 <prvUnlockQueue+0x46>
					break;
 80044b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	22ff      	movs	r2, #255	; 0xff
 80044b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044ba:	f7fe fead 	bl	8003218 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044be:	f7fe fe7d 	bl	80031bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ca:	e011      	b.n	80044f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d012      	beq.n	80044fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3310      	adds	r3, #16
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fc1b 	bl	8004d14 <xTaskRemoveFromEventList>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044e4:	f000 fcee 	bl	8004ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	dce9      	bgt.n	80044cc <prvUnlockQueue+0x60>
 80044f8:	e000      	b.n	80044fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004504:	f7fe fe88 	bl	8003218 <vPortExitCritical>
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004518:	f7fe fe50 	bl	80031bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e001      	b.n	800452e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800452e:	f7fe fe73 	bl	8003218 <vPortExitCritical>

	return xReturn;
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004544:	f7fe fe3a 	bl	80031bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	429a      	cmp	r2, r3
 8004552:	d102      	bne.n	800455a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e001      	b.n	800455e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800455e:	f7fe fe5b 	bl	8003218 <vPortExitCritical>

	return xReturn;
 8004562:	68fb      	ldr	r3, [r7, #12]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e016      	b.n	80045a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <vQueueUnregisterQueue+0x50>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	d10b      	bne.n	80045a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800458a:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <vQueueUnregisterQueue+0x50>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2100      	movs	r1, #0
 8004590:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004594:	4a09      	ldr	r2, [pc, #36]	; (80045bc <vQueueUnregisterQueue+0x50>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
				break;
 80045a0:	e005      	b.n	80045ae <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b07      	cmp	r3, #7
 80045ac:	d9e5      	bls.n	800457a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20003f98 	.word	0x20003f98

080045c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af04      	add	r7, sp, #16
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe ff0b 	bl	80033f0 <pvPortMalloc>
 80045da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045e2:	2054      	movs	r0, #84	; 0x54
 80045e4:	f7fe ff04 	bl	80033f0 <pvPortMalloc>
 80045e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
 80045f6:	e005      	b.n	8004604 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045f8:	6978      	ldr	r0, [r7, #20]
 80045fa:	f7fe ffbb 	bl	8003574 <vPortFree>
 80045fe:	e001      	b.n	8004604 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d013      	beq.n	8004632 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	2300      	movs	r3, #0
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	9302      	str	r3, [sp, #8]
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f80e 	bl	8004642 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004626:	69f8      	ldr	r0, [r7, #28]
 8004628:	f000 f88a 	bl	8004740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800462c:	2301      	movs	r3, #1
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e002      	b.n	8004638 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004636:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004638:	69bb      	ldr	r3, [r7, #24]
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b088      	sub	sp, #32
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800465a:	3b01      	subs	r3, #1
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f023 0307 	bic.w	r3, r3, #7
 8004668:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <prvInitialiseNewTask+0x46>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e7fe      	b.n	8004686 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e012      	b.n	80046b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	7819      	ldrb	r1, [r3, #0]
 8004696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	3334      	adds	r3, #52	; 0x34
 800469e:	460a      	mov	r2, r1
 80046a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d9e9      	bls.n	800468e <prvInitialiseNewTask+0x4c>
 80046ba:	e000      	b.n	80046be <prvInitialiseNewTask+0x7c>
		{
			break;
 80046bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	2b06      	cmp	r3, #6
 80046ca:	d901      	bls.n	80046d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046cc:	2306      	movs	r3, #6
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	2200      	movs	r2, #0
 80046e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	3304      	adds	r3, #4
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fbad 	bl	8002e46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	3318      	adds	r3, #24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fba8 	bl	8002e46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	f1c3 0207 	rsb	r2, r3, #7
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	2200      	movs	r2, #0
 8004710:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	69b8      	ldr	r0, [r7, #24]
 8004720:	f7fe fc26 	bl	8002f70 <pxPortInitialiseStack>
 8004724:	4602      	mov	r2, r0
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004736:	bf00      	nop
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004748:	f7fe fd38 	bl	80031bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <prvAddNewTaskToReadyList+0xb8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <prvAddNewTaskToReadyList+0xb8>)
 8004754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004756:	4b29      	ldr	r3, [pc, #164]	; (80047fc <prvAddNewTaskToReadyList+0xbc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800475e:	4a27      	ldr	r2, [pc, #156]	; (80047fc <prvAddNewTaskToReadyList+0xbc>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <prvAddNewTaskToReadyList+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d110      	bne.n	800478e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800476c:	f000 fbce 	bl	8004f0c <prvInitialiseTaskLists>
 8004770:	e00d      	b.n	800478e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <prvAddNewTaskToReadyList+0xc0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <prvAddNewTaskToReadyList+0xbc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	429a      	cmp	r2, r3
 8004786:	d802      	bhi.n	800478e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <prvAddNewTaskToReadyList+0xbc>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <prvAddNewTaskToReadyList+0xc4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <prvAddNewTaskToReadyList+0xc4>)
 8004796:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	2201      	movs	r2, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <prvAddNewTaskToReadyList+0xc8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	4a18      	ldr	r2, [pc, #96]	; (8004808 <prvAddNewTaskToReadyList+0xc8>)
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <prvAddNewTaskToReadyList+0xcc>)
 80047b8:	441a      	add	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f7fe fb4d 	bl	8002e60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047c6:	f7fe fd27 	bl	8003218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <prvAddNewTaskToReadyList+0xc0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <prvAddNewTaskToReadyList+0xbc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	429a      	cmp	r2, r3
 80047de:	d207      	bcs.n	80047f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <prvAddNewTaskToReadyList+0xd0>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20003dbc 	.word	0x20003dbc
 80047fc:	20003cbc 	.word	0x20003cbc
 8004800:	20003dc8 	.word	0x20003dc8
 8004804:	20003dd8 	.word	0x20003dd8
 8004808:	20003dc4 	.word	0x20003dc4
 800480c:	20003cc0 	.word	0x20003cc0
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <vTaskDelay+0x60>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <vTaskDelay+0x2e>
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	e7fe      	b.n	8004840 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004842:	f000 f861 	bl	8004908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004846:	2100      	movs	r1, #0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fddb 	bl	8005404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800484e:	f000 f869 	bl	8004924 <xTaskResumeAll>
 8004852:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <vTaskDelay+0x64>)
 800485c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20003de4 	.word	0x20003de4
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <vTaskStartScheduler+0x74>)
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	4919      	ldr	r1, [pc, #100]	; (80048f4 <vTaskStartScheduler+0x78>)
 8004890:	4819      	ldr	r0, [pc, #100]	; (80048f8 <vTaskStartScheduler+0x7c>)
 8004892:	f7ff fe95 	bl	80045c0 <xTaskCreate>
 8004896:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d115      	bne.n	80048ca <vTaskStartScheduler+0x4e>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <vTaskStartScheduler+0x80>)
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <vTaskStartScheduler+0x84>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <vTaskStartScheduler+0x88>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048c4:	f7fe fbdc 	bl	8003080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048c8:	e00d      	b.n	80048e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d0:	d109      	bne.n	80048e6 <vTaskStartScheduler+0x6a>
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	e7fe      	b.n	80048e4 <vTaskStartScheduler+0x68>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20003de0 	.word	0x20003de0
 80048f4:	08015258 	.word	0x08015258
 80048f8:	08004edd 	.word	0x08004edd
 80048fc:	20003ddc 	.word	0x20003ddc
 8004900:	20003dc8 	.word	0x20003dc8
 8004904:	20003dc0 	.word	0x20003dc0

08004908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <vTaskSuspendAll+0x18>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a03      	ldr	r2, [pc, #12]	; (8004920 <vTaskSuspendAll+0x18>)
 8004914:	6013      	str	r3, [r2, #0]
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20003de4 	.word	0x20003de4

08004924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004932:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <xTaskResumeAll+0x114>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <xTaskResumeAll+0x2a>
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	e7fe      	b.n	800494c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800494e:	f7fe fc35 	bl	80031bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004952:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <xTaskResumeAll+0x114>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a37      	ldr	r2, [pc, #220]	; (8004a38 <xTaskResumeAll+0x114>)
 800495a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <xTaskResumeAll+0x114>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d161      	bne.n	8004a28 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004964:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <xTaskResumeAll+0x118>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d05d      	beq.n	8004a28 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800496c:	e02e      	b.n	80049cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800496e:	4b34      	ldr	r3, [pc, #208]	; (8004a40 <xTaskResumeAll+0x11c>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3318      	adds	r3, #24
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe facd 	bl	8002f1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fac8 	bl	8002f1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	2201      	movs	r2, #1
 8004990:	409a      	lsls	r2, r3
 8004992:	4b2c      	ldr	r3, [pc, #176]	; (8004a44 <xTaskResumeAll+0x120>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <xTaskResumeAll+0x120>)
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4a27      	ldr	r2, [pc, #156]	; (8004a48 <xTaskResumeAll+0x124>)
 80049aa:	441a      	add	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fe fa54 	bl	8002e60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049bc:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <xTaskResumeAll+0x128>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <xTaskResumeAll+0x12c>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049cc:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <xTaskResumeAll+0x11c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1cc      	bne.n	800496e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049da:	f000 fb13 	bl	8005004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <xTaskResumeAll+0x130>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049ea:	f000 f859 	bl	8004aa0 <xTaskIncrementTick>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <xTaskResumeAll+0x12c>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f1      	bne.n	80049ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004a06:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <xTaskResumeAll+0x130>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <xTaskResumeAll+0x12c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <xTaskResumeAll+0x134>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a28:	f7fe fbf6 	bl	8003218 <vPortExitCritical>

	return xAlreadyYielded;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20003de4 	.word	0x20003de4
 8004a3c:	20003dbc 	.word	0x20003dbc
 8004a40:	20003d7c 	.word	0x20003d7c
 8004a44:	20003dc4 	.word	0x20003dc4
 8004a48:	20003cc0 	.word	0x20003cc0
 8004a4c:	20003cbc 	.word	0x20003cbc
 8004a50:	20003dd0 	.word	0x20003dd0
 8004a54:	20003dcc 	.word	0x20003dcc
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <xTaskGetTickCount+0x1c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a68:	687b      	ldr	r3, [r7, #4]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20003dc0 	.word	0x20003dc0

08004a7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a82:	f7fe fc77 	bl	8003374 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <xTaskGetTickCountFromISR+0x20>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a90:	683b      	ldr	r3, [r7, #0]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20003dc0 	.word	0x20003dc0

08004aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aaa:	4b50      	ldr	r3, [pc, #320]	; (8004bec <xTaskIncrementTick+0x14c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 808c 	bne.w	8004bcc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ab4:	4b4e      	ldr	r3, [pc, #312]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004abc:	4a4c      	ldr	r2, [pc, #304]	; (8004bf0 <xTaskIncrementTick+0x150>)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11f      	bne.n	8004b08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <xTaskIncrementTick+0x46>
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	e7fe      	b.n	8004ae4 <xTaskIncrementTick+0x44>
 8004ae6:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	4b42      	ldr	r3, [pc, #264]	; (8004bf8 <xTaskIncrementTick+0x158>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <xTaskIncrementTick+0x158>)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b40      	ldr	r3, [pc, #256]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	4a3e      	ldr	r2, [pc, #248]	; (8004bfc <xTaskIncrementTick+0x15c>)
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	f000 fa7e 	bl	8005004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b08:	4b3d      	ldr	r3, [pc, #244]	; (8004c00 <xTaskIncrementTick+0x160>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d34d      	bcc.n	8004bae <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <xTaskIncrementTick+0x80>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <xTaskIncrementTick+0x82>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <xTaskIncrementTick+0x160>)
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b2c:	601a      	str	r2, [r3, #0]
					break;
 8004b2e:	e03e      	b.n	8004bae <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b30:	4b30      	ldr	r3, [pc, #192]	; (8004bf4 <xTaskIncrementTick+0x154>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d203      	bcs.n	8004b50 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b48:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <xTaskIncrementTick+0x160>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6013      	str	r3, [r2, #0]
						break;
 8004b4e:	e02e      	b.n	8004bae <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f9e0 	bl	8002f1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	3318      	adds	r3, #24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe f9d7 	bl	8002f1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	2201      	movs	r2, #1
 8004b72:	409a      	lsls	r2, r3
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <xTaskIncrementTick+0x164>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <xTaskIncrementTick+0x164>)
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <xTaskIncrementTick+0x168>)
 8004b8c:	441a      	add	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7fe f963 	bl	8002e60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <xTaskIncrementTick+0x16c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d3b4      	bcc.n	8004b12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bac:	e7b1      	b.n	8004b12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <xTaskIncrementTick+0x16c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	4914      	ldr	r1, [pc, #80]	; (8004c08 <xTaskIncrementTick+0x168>)
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d907      	bls.n	8004bd6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	e004      	b.n	8004bd6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xTaskIncrementTick+0x170>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xTaskIncrementTick+0x170>)
 8004bd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <xTaskIncrementTick+0x174>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004be2:	697b      	ldr	r3, [r7, #20]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20003de4 	.word	0x20003de4
 8004bf0:	20003dc0 	.word	0x20003dc0
 8004bf4:	20003d74 	.word	0x20003d74
 8004bf8:	20003d78 	.word	0x20003d78
 8004bfc:	20003dd4 	.word	0x20003dd4
 8004c00:	20003ddc 	.word	0x20003ddc
 8004c04:	20003dc4 	.word	0x20003dc4
 8004c08:	20003cc0 	.word	0x20003cc0
 8004c0c:	20003cbc 	.word	0x20003cbc
 8004c10:	20003dcc 	.word	0x20003dcc
 8004c14:	20003dd0 	.word	0x20003dd0

08004c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <vTaskSwitchContext+0xa0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c26:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <vTaskSwitchContext+0xa4>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c2c:	e03e      	b.n	8004cac <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004c2e:	4b23      	ldr	r3, [pc, #140]	; (8004cbc <vTaskSwitchContext+0xa4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <vTaskSwitchContext+0xa8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	fab3 f383 	clz	r3, r3
 8004c40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c42:	7afb      	ldrb	r3, [r7, #11]
 8004c44:	f1c3 031f 	rsb	r3, r3, #31
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	491e      	ldr	r1, [pc, #120]	; (8004cc4 <vTaskSwitchContext+0xac>)
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	e7fe      	b.n	8004c70 <vTaskSwitchContext+0x58>
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <vTaskSwitchContext+0xac>)
 8004c7e:	4413      	add	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3308      	adds	r3, #8
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d104      	bne.n	8004ca2 <vTaskSwitchContext+0x8a>
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <vTaskSwitchContext+0xb0>)
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	bf00      	nop
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	20003de4 	.word	0x20003de4
 8004cbc:	20003dd0 	.word	0x20003dd0
 8004cc0:	20003dc4 	.word	0x20003dc4
 8004cc4:	20003cc0 	.word	0x20003cc0
 8004cc8:	20003cbc 	.word	0x20003cbc

08004ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <vTaskPlaceOnEventList+0x24>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e7fe      	b.n	8004cee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <vTaskPlaceOnEventList+0x44>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3318      	adds	r3, #24
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fe f8d5 	bl	8002ea8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cfe:	2101      	movs	r1, #1
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	f000 fb7f 	bl	8005404 <prvAddCurrentTaskToDelayedList>
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20003cbc 	.word	0x20003cbc

08004d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <xTaskRemoveFromEventList+0x2a>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e7fe      	b.n	8004d3c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3318      	adds	r3, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe f8e9 	bl	8002f1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <xTaskRemoveFromEventList+0xac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11c      	bne.n	8004d8a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe f8e0 	bl	8002f1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <xTaskRemoveFromEventList+0xb0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <xTaskRemoveFromEventList+0xb0>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <xTaskRemoveFromEventList+0xb4>)
 8004d7a:	441a      	add	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7fe f86c 	bl	8002e60 <vListInsertEnd>
 8004d88:	e005      	b.n	8004d96 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3318      	adds	r3, #24
 8004d8e:	4619      	mov	r1, r3
 8004d90:	480e      	ldr	r0, [pc, #56]	; (8004dcc <xTaskRemoveFromEventList+0xb8>)
 8004d92:	f7fe f865 	bl	8002e60 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <xTaskRemoveFromEventList+0xbc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d905      	bls.n	8004db0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <xTaskRemoveFromEventList+0xc0>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e001      	b.n	8004db4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004db4:	697b      	ldr	r3, [r7, #20]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20003de4 	.word	0x20003de4
 8004dc4:	20003dc4 	.word	0x20003dc4
 8004dc8:	20003cc0 	.word	0x20003cc0
 8004dcc:	20003d7c 	.word	0x20003d7c
 8004dd0:	20003cbc 	.word	0x20003cbc
 8004dd4:	20003dd0 	.word	0x20003dd0

08004dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <vTaskInternalSetTimeOutState+0x24>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <vTaskInternalSetTimeOutState+0x28>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	20003dd4 	.word	0x20003dd4
 8004e00:	20003dc0 	.word	0x20003dc0

08004e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <xTaskCheckForTimeOut+0x24>
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e7fe      	b.n	8004e26 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <xTaskCheckForTimeOut+0x3e>
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e7fe      	b.n	8004e40 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004e42:	f7fe f9bb 	bl	80031bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <xTaskCheckForTimeOut+0xb8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5e:	d102      	bne.n	8004e66 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e023      	b.n	8004eae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <xTaskCheckForTimeOut+0xbc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d007      	beq.n	8004e82 <xTaskCheckForTimeOut+0x7e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d802      	bhi.n	8004e82 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e015      	b.n	8004eae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d90b      	bls.n	8004ea4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff9d 	bl	8004dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	e004      	b.n	8004eae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eae:	f7fe f9b3 	bl	8003218 <vPortExitCritical>

	return xReturn;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20003dc0 	.word	0x20003dc0
 8004ec0:	20003dd4 	.word	0x20003dd4

08004ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <vTaskMissedYield+0x14>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20003dd0 	.word	0x20003dd0

08004edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ee4:	f000 f852 	bl	8004f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <prvIdleTask+0x28>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d9f9      	bls.n	8004ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <prvIdleTask+0x2c>)
 8004ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f00:	e7f0      	b.n	8004ee4 <prvIdleTask+0x8>
 8004f02:	bf00      	nop
 8004f04:	20003cc0 	.word	0x20003cc0
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e00c      	b.n	8004f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4a12      	ldr	r2, [pc, #72]	; (8004f6c <prvInitialiseTaskLists+0x60>)
 8004f24:	4413      	add	r3, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd ff6d 	bl	8002e06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d9ef      	bls.n	8004f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f38:	480d      	ldr	r0, [pc, #52]	; (8004f70 <prvInitialiseTaskLists+0x64>)
 8004f3a:	f7fd ff64 	bl	8002e06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f3e:	480d      	ldr	r0, [pc, #52]	; (8004f74 <prvInitialiseTaskLists+0x68>)
 8004f40:	f7fd ff61 	bl	8002e06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f44:	480c      	ldr	r0, [pc, #48]	; (8004f78 <prvInitialiseTaskLists+0x6c>)
 8004f46:	f7fd ff5e 	bl	8002e06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f4a:	480c      	ldr	r0, [pc, #48]	; (8004f7c <prvInitialiseTaskLists+0x70>)
 8004f4c:	f7fd ff5b 	bl	8002e06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f50:	480b      	ldr	r0, [pc, #44]	; (8004f80 <prvInitialiseTaskLists+0x74>)
 8004f52:	f7fd ff58 	bl	8002e06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <prvInitialiseTaskLists+0x78>)
 8004f58:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <prvInitialiseTaskLists+0x64>)
 8004f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <prvInitialiseTaskLists+0x7c>)
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <prvInitialiseTaskLists+0x68>)
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20003cc0 	.word	0x20003cc0
 8004f70:	20003d4c 	.word	0x20003d4c
 8004f74:	20003d60 	.word	0x20003d60
 8004f78:	20003d7c 	.word	0x20003d7c
 8004f7c:	20003d90 	.word	0x20003d90
 8004f80:	20003da8 	.word	0x20003da8
 8004f84:	20003d74 	.word	0x20003d74
 8004f88:	20003d78 	.word	0x20003d78

08004f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f92:	e019      	b.n	8004fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f94:	f7fe f912 	bl	80031bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <prvCheckTasksWaitingTermination+0x4c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fd ffb8 	bl	8002f1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004faa:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <prvCheckTasksWaitingTermination+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <prvCheckTasksWaitingTermination+0x50>)
 8004fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fbe:	f7fe f92b 	bl	8003218 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f80e 	bl	8004fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e1      	bne.n	8004f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20003d90 	.word	0x20003d90
 8004fdc:	20003dbc 	.word	0x20003dbc
 8004fe0:	20003da4 	.word	0x20003da4

08004fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fabf 	bl	8003574 <vPortFree>
			vPortFree( pxTCB );
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fe fabc 	bl	8003574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800500a:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <prvResetNextTaskUnblockTime+0x44>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <prvResetNextTaskUnblockTime+0x14>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <prvResetNextTaskUnblockTime+0x16>
 8005018:	2300      	movs	r3, #0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <prvResetNextTaskUnblockTime+0x48>)
 8005020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005024:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005026:	e008      	b.n	800503a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <prvResetNextTaskUnblockTime+0x44>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <prvResetNextTaskUnblockTime+0x48>)
 8005038:	6013      	str	r3, [r2, #0]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20003d74 	.word	0x20003d74
 800504c:	20003ddc 	.word	0x20003ddc

08005050 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <xTaskGetSchedulerState+0x34>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800505e:	2301      	movs	r3, #1
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	e008      	b.n	8005076 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005064:	4b08      	ldr	r3, [pc, #32]	; (8005088 <xTaskGetSchedulerState+0x38>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800506c:	2302      	movs	r3, #2
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	e001      	b.n	8005076 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005076:	687b      	ldr	r3, [r7, #4]
	}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	20003dc8 	.word	0x20003dc8
 8005088:	20003de4 	.word	0x20003de4

0800508c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d06e      	beq.n	8005180 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a6:	4b39      	ldr	r3, [pc, #228]	; (800518c <xTaskPriorityInherit+0x100>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d25e      	bcs.n	800516e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	db06      	blt.n	80050c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b8:	4b34      	ldr	r3, [pc, #208]	; (800518c <xTaskPriorityInherit+0x100>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	f1c3 0207 	rsb	r2, r3, #7
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6959      	ldr	r1, [r3, #20]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <xTaskPriorityInherit+0x104>)
 80050d8:	4413      	add	r3, r2
 80050da:	4299      	cmp	r1, r3
 80050dc:	d101      	bne.n	80050e2 <xTaskPriorityInherit+0x56>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <xTaskPriorityInherit+0x58>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d03a      	beq.n	800515e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd ff14 	bl	8002f1a <uxListRemove>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d115      	bne.n	8005124 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4924      	ldr	r1, [pc, #144]	; (8005190 <xTaskPriorityInherit+0x104>)
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <xTaskPriorityInherit+0x98>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	2201      	movs	r2, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43da      	mvns	r2, r3
 800511a:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <xTaskPriorityInherit+0x108>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4013      	ands	r3, r2
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <xTaskPriorityInherit+0x108>)
 8005122:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <xTaskPriorityInherit+0x100>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <xTaskPriorityInherit+0x108>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <xTaskPriorityInherit+0x108>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a10      	ldr	r2, [pc, #64]	; (8005190 <xTaskPriorityInherit+0x104>)
 800514e:	441a      	add	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fd fe82 	bl	8002e60 <vListInsertEnd>
 800515c:	e004      	b.n	8005168 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <xTaskPriorityInherit+0x100>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e008      	b.n	8005180 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <xTaskPriorityInherit+0x100>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	429a      	cmp	r2, r3
 800517a:	d201      	bcs.n	8005180 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005180:	68fb      	ldr	r3, [r7, #12]
	}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20003cbc 	.word	0x20003cbc
 8005190:	20003cc0 	.word	0x20003cc0
 8005194:	20003dc4 	.word	0x20003dc4

08005198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d06c      	beq.n	8005288 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ae:	4b39      	ldr	r3, [pc, #228]	; (8005294 <xTaskPriorityDisinherit+0xfc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d009      	beq.n	80051cc <xTaskPriorityDisinherit+0x34>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e7fe      	b.n	80051ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <xTaskPriorityDisinherit+0x50>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	e7fe      	b.n	80051e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d044      	beq.n	8005288 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	2b00      	cmp	r3, #0
 8005204:	d140      	bne.n	8005288 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd fe85 	bl	8002f1a <uxListRemove>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d115      	bne.n	8005242 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521a:	491f      	ldr	r1, [pc, #124]	; (8005298 <xTaskPriorityDisinherit+0x100>)
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTaskPriorityDisinherit+0xaa>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	2201      	movs	r2, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43da      	mvns	r2, r3
 8005238:	4b18      	ldr	r3, [pc, #96]	; (800529c <xTaskPriorityDisinherit+0x104>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4013      	ands	r3, r2
 800523e:	4a17      	ldr	r2, [pc, #92]	; (800529c <xTaskPriorityDisinherit+0x104>)
 8005240:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	f1c3 0207 	rsb	r2, r3, #7
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	2201      	movs	r2, #1
 800525c:	409a      	lsls	r2, r3
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <xTaskPriorityDisinherit+0x104>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <xTaskPriorityDisinherit+0x104>)
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4a08      	ldr	r2, [pc, #32]	; (8005298 <xTaskPriorityDisinherit+0x100>)
 8005276:	441a      	add	r2, r3
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f7fd fdee 	bl	8002e60 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005284:	2301      	movs	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005288:	697b      	ldr	r3, [r7, #20]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20003cbc 	.word	0x20003cbc
 8005298:	20003cc0 	.word	0x20003cc0
 800529c:	20003dc4 	.word	0x20003dc4

080052a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8086 	beq.w	80053c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e7fe      	b.n	80052d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d202      	bcs.n	80052e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e002      	b.n	80052ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d067      	beq.n	80053c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d162      	bne.n	80053c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005300:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	429a      	cmp	r2, r3
 8005308:	d109      	bne.n	800531e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	e7fe      	b.n	800531c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db04      	blt.n	800533c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f1c3 0207 	rsb	r2, r3, #7
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	6959      	ldr	r1, [r3, #20]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800534c:	4413      	add	r3, r2
 800534e:	4299      	cmp	r1, r3
 8005350:	d101      	bne.n	8005356 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d034      	beq.n	80053c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	3304      	adds	r3, #4
 8005360:	4618      	mov	r0, r3
 8005362:	f7fd fdda 	bl	8002f1a <uxListRemove>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	4918      	ldr	r1, [pc, #96]	; (80053d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	2201      	movs	r2, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43da      	mvns	r2, r3
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4013      	ands	r3, r2
 8005394:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005396:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	2201      	movs	r2, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80053b8:	441a      	add	r2, r3
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7fd fd4d 	bl	8002e60 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053c6:	bf00      	nop
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20003cbc 	.word	0x20003cbc
 80053d4:	20003cc0 	.word	0x20003cc0
 80053d8:	20003dc4 	.word	0x20003dc4

080053dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <pvTaskIncrementMutexHeldCount+0x24>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <pvTaskIncrementMutexHeldCount+0x24>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ee:	3201      	adds	r2, #1
 80053f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80053f2:	4b03      	ldr	r3, [pc, #12]	; (8005400 <pvTaskIncrementMutexHeldCount+0x24>)
 80053f4:	681b      	ldr	r3, [r3, #0]
	}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	20003cbc 	.word	0x20003cbc

08005404 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800540e:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd fd7d 	bl	8002f1a <uxListRemove>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	2201      	movs	r2, #1
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	4b21      	ldr	r3, [pc, #132]	; (80054bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4013      	ands	r3, r2
 800543a:	4a20      	ldr	r2, [pc, #128]	; (80054bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800543c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005444:	d10a      	bne.n	800545c <prvAddCurrentTaskToDelayedList+0x58>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	481a      	ldr	r0, [pc, #104]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005456:	f7fd fd03 	bl	8002e60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800545a:	e026      	b.n	80054aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005464:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d209      	bcs.n	8005488 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7fd fd11 	bl	8002ea8 <vListInsert>
}
 8005486:	e010      	b.n	80054aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7fd fd07 	bl	8002ea8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d202      	bcs.n	80054aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80054a4:	4a09      	ldr	r2, [pc, #36]	; (80054cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6013      	str	r3, [r2, #0]
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20003dc0 	.word	0x20003dc0
 80054b8:	20003cbc 	.word	0x20003cbc
 80054bc:	20003dc4 	.word	0x20003dc4
 80054c0:	20003da8 	.word	0x20003da8
 80054c4:	20003d78 	.word	0x20003d78
 80054c8:	20003d74 	.word	0x20003d74
 80054cc:	20003ddc 	.word	0x20003ddc

080054d0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	461a      	mov	r2, r3
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f002 f96d 	bl	80077c4 <tcpip_send_msg_wait_sem>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80054ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <netconn_apimsg+0x2e>
    return apimsg->err;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80054fc:	e001      	b.n	8005502 <netconn_apimsg+0x32>
  }
  return err;
 80054fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	603a      	str	r2, [r7, #0]
 8005516:	71fb      	strb	r3, [r7, #7]
 8005518:	460b      	mov	r3, r1
 800551a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 ff83 	bl	800642c <netconn_alloc>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d054      	beq.n	80055d8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800552e:	79bb      	ldrb	r3, [r7, #6]
 8005530:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005536:	f107 030c 	add.w	r3, r7, #12
 800553a:	4619      	mov	r1, r3
 800553c:	4829      	ldr	r0, [pc, #164]	; (80055e4 <netconn_new_with_proto_and_callback+0xd8>)
 800553e:	f7ff ffc7 	bl	80054d0 <netconn_apimsg>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8005548:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800554c:	2b00      	cmp	r3, #0
 800554e:	d043      	beq.n	80055d8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <netconn_new_with_proto_and_callback+0x58>
 8005558:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <netconn_new_with_proto_and_callback+0xdc>)
 800555a:	2289      	movs	r2, #137	; 0x89
 800555c:	4923      	ldr	r1, [pc, #140]	; (80055ec <netconn_new_with_proto_and_callback+0xe0>)
 800555e:	4824      	ldr	r0, [pc, #144]	; (80055f0 <netconn_new_with_proto_and_callback+0xe4>)
 8005560:	f00e ff34 	bl	80143cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	3310      	adds	r3, #16
 8005568:	4618      	mov	r0, r3
 800556a:	f00d fe97 	bl	801329c <sys_mbox_valid>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <netconn_new_with_proto_and_callback+0x74>
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <netconn_new_with_proto_and_callback+0xdc>)
 8005576:	228a      	movs	r2, #138	; 0x8a
 8005578:	491e      	ldr	r1, [pc, #120]	; (80055f4 <netconn_new_with_proto_and_callback+0xe8>)
 800557a:	481d      	ldr	r0, [pc, #116]	; (80055f0 <netconn_new_with_proto_and_callback+0xe4>)
 800557c:	f00e ff26 	bl	80143cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	3314      	adds	r3, #20
 8005584:	4618      	mov	r0, r3
 8005586:	f00d fe89 	bl	801329c <sys_mbox_valid>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <netconn_new_with_proto_and_callback+0x90>
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <netconn_new_with_proto_and_callback+0xdc>)
 8005592:	228c      	movs	r2, #140	; 0x8c
 8005594:	4918      	ldr	r1, [pc, #96]	; (80055f8 <netconn_new_with_proto_and_callback+0xec>)
 8005596:	4816      	ldr	r0, [pc, #88]	; (80055f0 <netconn_new_with_proto_and_callback+0xe4>)
 8005598:	f00e ff18 	bl	80143cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	330c      	adds	r3, #12
 80055a0:	4618      	mov	r0, r3
 80055a2:	f00d ff0a 	bl	80133ba <sys_sem_valid>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <netconn_new_with_proto_and_callback+0xac>
 80055ac:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <netconn_new_with_proto_and_callback+0xdc>)
 80055ae:	228f      	movs	r2, #143	; 0x8f
 80055b0:	4912      	ldr	r1, [pc, #72]	; (80055fc <netconn_new_with_proto_and_callback+0xf0>)
 80055b2:	480f      	ldr	r0, [pc, #60]	; (80055f0 <netconn_new_with_proto_and_callback+0xe4>)
 80055b4:	f00e ff0a 	bl	80143cc <iprintf>
      sys_sem_free(&conn->op_completed);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	330c      	adds	r3, #12
 80055bc:	4618      	mov	r0, r3
 80055be:	f00d feef 	bl	80133a0 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	3310      	adds	r3, #16
 80055c6:	4618      	mov	r0, r3
 80055c8:	f00d fdcc 	bl	8013164 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80055cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ce:	2007      	movs	r0, #7
 80055d0:	f006 fd9a 	bl	800c108 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3728      	adds	r7, #40	; 0x28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	080063d5 	.word	0x080063d5
 80055e8:	08015260 	.word	0x08015260
 80055ec:	08015294 	.word	0x08015294
 80055f0:	080152b8 	.word	0x080152b8
 80055f4:	080152e0 	.word	0x080152e0
 80055f8:	080152f8 	.word	0x080152f8
 80055fc:	0801531c 	.word	0x0801531c

08005600 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <netconn_delete+0x12>
    return ERR_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e016      	b.n	8005640 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005616:	2329      	movs	r3, #41	; 0x29
 8005618:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4619      	mov	r1, r3
 8005620:	4809      	ldr	r0, [pc, #36]	; (8005648 <netconn_delete+0x48>)
 8005622:	f7ff ff55 	bl	80054d0 <netconn_apimsg>
 8005626:	4603      	mov	r3, r0
 8005628:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800562a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <netconn_delete+0x38>
    return err;
 8005632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005636:	e003      	b.n	8005640 <netconn_delete+0x40>
  }

  netconn_free(conn);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 ff67 	bl	800650c <netconn_free>

  return ERR_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	08006991 	.word	0x08006991

0800564c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d108      	bne.n	8005672 <netconn_bind+0x26>
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <netconn_bind+0x5c>)
 8005662:	22ff      	movs	r2, #255	; 0xff
 8005664:	4911      	ldr	r1, [pc, #68]	; (80056ac <netconn_bind+0x60>)
 8005666:	4812      	ldr	r0, [pc, #72]	; (80056b0 <netconn_bind+0x64>)
 8005668:	f00e feb0 	bl	80143cc <iprintf>
 800566c:	f06f 030f 	mvn.w	r3, #15
 8005670:	e015      	b.n	800569e <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8005678:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <netconn_bind+0x68>)
 800567a:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005688:	f107 0310 	add.w	r3, r7, #16
 800568c:	4619      	mov	r1, r3
 800568e:	480a      	ldr	r0, [pc, #40]	; (80056b8 <netconn_bind+0x6c>)
 8005690:	f7ff ff1e 	bl	80054d0 <netconn_apimsg>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800569a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08015260 	.word	0x08015260
 80056ac:	08015398 	.word	0x08015398
 80056b0:	080152b8 	.word	0x080152b8
 80056b4:	08017ec0 	.word	0x08017ec0
 80056b8:	08006b95 	.word	0x08006b95

080056bc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <netconn_listen_with_backlog+0x26>
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <netconn_listen_with_backlog+0x48>)
 80056d0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80056d4:	490c      	ldr	r1, [pc, #48]	; (8005708 <netconn_listen_with_backlog+0x4c>)
 80056d6:	480d      	ldr	r0, [pc, #52]	; (800570c <netconn_listen_with_backlog+0x50>)
 80056d8:	f00e fe78 	bl	80143cc <iprintf>
 80056dc:	f06f 030f 	mvn.w	r3, #15
 80056e0:	e00b      	b.n	80056fa <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	4808      	ldr	r0, [pc, #32]	; (8005710 <netconn_listen_with_backlog+0x54>)
 80056ee:	f7ff feef 	bl	80054d0 <netconn_apimsg>
 80056f2:	4603      	mov	r3, r0
 80056f4:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80056f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	08015260 	.word	0x08015260
 8005708:	080153f8 	.word	0x080153f8
 800570c:	080152b8 	.word	0x080152b8
 8005710:	08006c55 	.word	0x08006c55

08005714 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <netconn_accept+0x24>
 8005724:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <netconn_accept+0xe4>)
 8005726:	f240 128d 	movw	r2, #397	; 0x18d
 800572a:	4934      	ldr	r1, [pc, #208]	; (80057fc <netconn_accept+0xe8>)
 800572c:	4834      	ldr	r0, [pc, #208]	; (8005800 <netconn_accept+0xec>)
 800572e:	f00e fe4d 	bl	80143cc <iprintf>
 8005732:	f06f 030f 	mvn.w	r3, #15
 8005736:	e05b      	b.n	80057f0 <netconn_accept+0xdc>
  *new_conn = NULL;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <netconn_accept+0x44>
 8005744:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <netconn_accept+0xe4>)
 8005746:	f240 128f 	movw	r2, #399	; 0x18f
 800574a:	492e      	ldr	r1, [pc, #184]	; (8005804 <netconn_accept+0xf0>)
 800574c:	482c      	ldr	r0, [pc, #176]	; (8005800 <netconn_accept+0xec>)
 800574e:	f00e fe3d 	bl	80143cc <iprintf>
 8005752:	f06f 030f 	mvn.w	r3, #15
 8005756:	e04b      	b.n	80057f0 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800575e:	f113 0f0c 	cmn.w	r3, #12
 8005762:	da03      	bge.n	800576c <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800576a:	e041      	b.n	80057f0 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3314      	adds	r3, #20
 8005770:	4618      	mov	r0, r3
 8005772:	f00d fd93 	bl	801329c <sys_mbox_valid>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <netconn_accept+0x6e>
    return ERR_CLSD;
 800577c:	f06f 030e 	mvn.w	r3, #14
 8005780:	e036      	b.n	80057f0 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3314      	adds	r3, #20
 8005786:	f107 010c 	add.w	r1, r7, #12
 800578a:	2200      	movs	r2, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f00d fd2a 	bl	80131e6 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <netconn_accept+0x96>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	2200      	movs	r2, #0
 80057a4:	2101      	movs	r1, #1
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <netconn_accept+0xf4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d102      	bne.n	80057b8 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 80057b2:	f06f 030c 	mvn.w	r3, #12
 80057b6:	e01b      	b.n	80057f0 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d114      	bne.n	80057e8 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <netconn_accept+0xce>
 80057c4:	f00d fe7a 	bl	80134bc <sys_arch_protect>
 80057c8:	6138      	str	r0, [r7, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80057d0:	f113 0f0c 	cmn.w	r3, #12
 80057d4:	db02      	blt.n	80057dc <netconn_accept+0xc8>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	22f1      	movs	r2, #241	; 0xf1
 80057da:	721a      	strb	r2, [r3, #8]
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f00d fe7b 	bl	80134d8 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 80057e2:	f06f 030e 	mvn.w	r3, #14
 80057e6:	e003      	b.n	80057f0 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80057ee:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	08015260 	.word	0x08015260
 80057fc:	08015418 	.word	0x08015418
 8005800:	080152b8 	.word	0x080152b8
 8005804:	08015438 	.word	0x08015438
 8005808:	20003fd8 	.word	0x20003fd8

0800580c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <netconn_recv_data+0x28>
 8005820:	4b5c      	ldr	r3, [pc, #368]	; (8005994 <netconn_recv_data+0x188>)
 8005822:	f240 12e7 	movw	r2, #487	; 0x1e7
 8005826:	495c      	ldr	r1, [pc, #368]	; (8005998 <netconn_recv_data+0x18c>)
 8005828:	485c      	ldr	r0, [pc, #368]	; (800599c <netconn_recv_data+0x190>)
 800582a:	f00e fdcf 	bl	80143cc <iprintf>
 800582e:	f06f 030f 	mvn.w	r3, #15
 8005832:	e0aa      	b.n	800598a <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <netconn_recv_data+0x48>
 8005840:	4b54      	ldr	r3, [pc, #336]	; (8005994 <netconn_recv_data+0x188>)
 8005842:	f240 12e9 	movw	r2, #489	; 0x1e9
 8005846:	4956      	ldr	r1, [pc, #344]	; (80059a0 <netconn_recv_data+0x194>)
 8005848:	4854      	ldr	r0, [pc, #336]	; (800599c <netconn_recv_data+0x190>)
 800584a:	f00e fdbf 	bl	80143cc <iprintf>
 800584e:	f06f 030f 	mvn.w	r3, #15
 8005852:	e09a      	b.n	800598a <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800585c:	2b10      	cmp	r3, #16
 800585e:	d115      	bne.n	800588c <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3310      	adds	r3, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f00d fd19 	bl	801329c <sys_mbox_valid>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10d      	bne.n	800588c <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3314      	adds	r3, #20
 8005874:	4618      	mov	r0, r3
 8005876:	f00d fd11 	bl	801329c <sys_mbox_valid>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <netconn_recv_data+0x7a>
 8005880:	f06f 030a 	mvn.w	r3, #10
 8005884:	e081      	b.n	800598a <netconn_recv_data+0x17e>
 8005886:	f06f 030e 	mvn.w	r3, #14
 800588a:	e07e      	b.n	800598a <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3310      	adds	r3, #16
 8005890:	4618      	mov	r0, r3
 8005892:	f00d fd03 	bl	801329c <sys_mbox_valid>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <netconn_recv_data+0xa4>
 800589c:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <netconn_recv_data+0x188>)
 800589e:	f240 12f5 	movw	r2, #501	; 0x1f5
 80058a2:	4940      	ldr	r1, [pc, #256]	; (80059a4 <netconn_recv_data+0x198>)
 80058a4:	483d      	ldr	r0, [pc, #244]	; (800599c <netconn_recv_data+0x190>)
 80058a6:	f00e fd91 	bl	80143cc <iprintf>
 80058aa:	f06f 030a 	mvn.w	r3, #10
 80058ae:	e06c      	b.n	800598a <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80058b6:	f113 0f0c 	cmn.w	r3, #12
 80058ba:	da03      	bge.n	80058c4 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80058c2:	e062      	b.n	800598a <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3310      	adds	r3, #16
 80058c8:	f107 0120 	add.w	r1, r7, #32
 80058cc:	2200      	movs	r2, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f00d fc89 	bl	80131e6 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d138      	bne.n	8005952 <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	891b      	ldrh	r3, [r3, #8]
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e001      	b.n	80058f6 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 80058f2:	2301      	movs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	4619      	mov	r1, r3
 80058fc:	482a      	ldr	r0, [pc, #168]	; (80059a8 <netconn_recv_data+0x19c>)
 80058fe:	f7ff fde7 	bl	80054d0 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d120      	bne.n	800594a <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <netconn_recv_data+0x110>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	2200      	movs	r2, #0
 8005916:	2101      	movs	r1, #1
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <netconn_recv_data+0x12a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005934:	e029      	b.n	800598a <netconn_recv_data+0x17e>
 8005936:	f06f 030d 	mvn.w	r3, #13
 800593a:	e026      	b.n	800598a <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800593c:	2101      	movs	r1, #1
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f926 	bl	8005b90 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8005944:	f06f 030e 	mvn.w	r3, #14
 8005948:	e01f      	b.n	800598a <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	891b      	ldrh	r3, [r3, #8]
 800594e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005950:	e00d      	b.n	800596e <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <netconn_recv_data+0x15a>
 8005958:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <netconn_recv_data+0x188>)
 800595a:	f240 223e 	movw	r2, #574	; 0x23e
 800595e:	4913      	ldr	r1, [pc, #76]	; (80059ac <netconn_recv_data+0x1a0>)
 8005960:	480e      	ldr	r0, [pc, #56]	; (800599c <netconn_recv_data+0x190>)
 8005962:	f00e fd33 	bl	80143cc <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	891b      	ldrh	r3, [r3, #8]
 800596c:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <netconn_recv_data+0x176>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800597c:	2101      	movs	r1, #1
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3728      	adds	r7, #40	; 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08015260 	.word	0x08015260
 8005998:	08015458 	.word	0x08015458
 800599c:	080152b8 	.word	0x080152b8
 80059a0:	08015478 	.word	0x08015478
 80059a4:	08015494 	.word	0x08015494
 80059a8:	08006dd9 	.word	0x08006dd9
 80059ac:	080154b4 	.word	0x080154b4

080059b0 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <netconn_recv+0x28>
 80059c4:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <netconn_recv+0xdc>)
 80059c6:	f44f 721d 	mov.w	r2, #628	; 0x274
 80059ca:	4931      	ldr	r1, [pc, #196]	; (8005a90 <netconn_recv+0xe0>)
 80059cc:	4831      	ldr	r0, [pc, #196]	; (8005a94 <netconn_recv+0xe4>)
 80059ce:	f00e fcfd 	bl	80143cc <iprintf>
 80059d2:	f06f 030f 	mvn.w	r3, #15
 80059d6:	e054      	b.n	8005a82 <netconn_recv+0xd2>
  *new_buf = NULL;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <netconn_recv+0x48>
 80059e4:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <netconn_recv+0xdc>)
 80059e6:	f240 2276 	movw	r2, #630	; 0x276
 80059ea:	492b      	ldr	r1, [pc, #172]	; (8005a98 <netconn_recv+0xe8>)
 80059ec:	4829      	ldr	r0, [pc, #164]	; (8005a94 <netconn_recv+0xe4>)
 80059ee:	f00e fced 	bl	80143cc <iprintf>
 80059f2:	f06f 030f 	mvn.w	r3, #15
 80059f6:	e044      	b.n	8005a82 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d139      	bne.n	8005a78 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005a08:	2006      	movs	r0, #6
 8005a0a:	f006 fb2b 	bl	800c064 <memp_malloc>
 8005a0e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <netconn_recv+0x6c>
      return ERR_MEM;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a1a:	e032      	b.n	8005a82 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8005a1c:	f107 030c 	add.w	r3, r7, #12
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fef2 	bl	800580c <netconn_recv_data>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8005a2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d006      	beq.n	8005a42 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	2006      	movs	r0, #6
 8005a38:	f006 fb66 	bl	800c108 <memp_free>
      return err;
 8005a3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a40:	e01f      	b.n	8005a82 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <netconn_recv+0xa6>
 8005a48:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <netconn_recv+0xdc>)
 8005a4a:	f240 228a 	movw	r2, #650	; 0x28a
 8005a4e:	4913      	ldr	r1, [pc, #76]	; (8005a9c <netconn_recv+0xec>)
 8005a50:	4810      	ldr	r0, [pc, #64]	; (8005a94 <netconn_recv+0xe4>)
 8005a52:	f00e fcbb 	bl	80143cc <iprintf>

    buf->p = p;
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e004      	b.n	8005a82 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fec6 	bl	800580c <netconn_recv_data>
 8005a80:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08015260 	.word	0x08015260
 8005a90:	08015458 	.word	0x08015458
 8005a94:	080152b8 	.word	0x080152b8
 8005a98:	08015478 	.word	0x08015478
 8005a9c:	080154c0 	.word	0x080154c0

08005aa0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <netconn_write_partly+0x28>
 8005ab4:	4b31      	ldr	r3, [pc, #196]	; (8005b7c <netconn_write_partly+0xdc>)
 8005ab6:	f240 22e6 	movw	r2, #742	; 0x2e6
 8005aba:	4931      	ldr	r1, [pc, #196]	; (8005b80 <netconn_write_partly+0xe0>)
 8005abc:	4831      	ldr	r0, [pc, #196]	; (8005b84 <netconn_write_partly+0xe4>)
 8005abe:	f00e fc85 	bl	80143cc <iprintf>
 8005ac2:	f06f 030f 	mvn.w	r3, #15
 8005ac6:	e054      	b.n	8005b72 <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d009      	beq.n	8005ae8 <netconn_write_partly+0x48>
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <netconn_write_partly+0xdc>)
 8005ad6:	f240 22e7 	movw	r2, #743	; 0x2e7
 8005ada:	492b      	ldr	r1, [pc, #172]	; (8005b88 <netconn_write_partly+0xe8>)
 8005adc:	4829      	ldr	r0, [pc, #164]	; (8005b84 <netconn_write_partly+0xe4>)
 8005ade:	f00e fc75 	bl	80143cc <iprintf>
 8005ae2:	f06f 0305 	mvn.w	r3, #5
 8005ae6:	e044      	b.n	8005b72 <netconn_write_partly+0xd2>
  if (size == 0) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <netconn_write_partly+0x52>
    return ERR_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e03f      	b.n	8005b72 <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	7f1b      	ldrb	r3, [r3, #28]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <netconn_write_partly+0x68>
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <netconn_write_partly+0x6c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <netconn_write_partly+0x6e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8005b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <netconn_write_partly+0x86>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8005b20:	f06f 0305 	mvn.w	r3, #5
 8005b24:	e025      	b.n	8005b72 <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005b38:	f107 0310 	add.w	r3, r7, #16
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4813      	ldr	r0, [pc, #76]	; (8005b8c <netconn_write_partly+0xec>)
 8005b40:	f7ff fcc6 	bl	80054d0 <netconn_apimsg>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8005b4a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <netconn_write_partly+0xce>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <netconn_write_partly+0xce>
    if (dontblock) {
 8005b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e002      	b.n	8005b6e <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8005b6e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3728      	adds	r7, #40	; 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	08015260 	.word	0x08015260
 8005b80:	080154e8 	.word	0x080154e8
 8005b84:	080152b8 	.word	0x080152b8
 8005b88:	08015504 	.word	0x08015504
 8005b8c:	080071b5 	.word	0x080071b5

08005b90 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <netconn_close_shutdown+0x26>
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <netconn_close_shutdown+0x50>)
 8005ba4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005ba8:	490e      	ldr	r1, [pc, #56]	; (8005be4 <netconn_close_shutdown+0x54>)
 8005baa:	480f      	ldr	r0, [pc, #60]	; (8005be8 <netconn_close_shutdown+0x58>)
 8005bac:	f00e fc0e 	bl	80143cc <iprintf>
 8005bb0:	f06f 030f 	mvn.w	r3, #15
 8005bb4:	e00f      	b.n	8005bd6 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005bbe:	2329      	movs	r3, #41	; 0x29
 8005bc0:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005bc2:	f107 0308 	add.w	r3, r7, #8
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4808      	ldr	r0, [pc, #32]	; (8005bec <netconn_close_shutdown+0x5c>)
 8005bca:	f7ff fc81 	bl	80054d0 <netconn_apimsg>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8005bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	08015260 	.word	0x08015260
 8005be4:	08015528 	.word	0x08015528
 8005be8:	080152b8 	.word	0x080152b8
 8005bec:	08007315 	.word	0x08007315

08005bf0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ffc8 	bl	8005b90 <netconn_close_shutdown>
 8005c00:	4603      	mov	r3, r0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <recv_udp+0x20>
 8005c20:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <recv_udp+0xe8>)
 8005c22:	22b1      	movs	r2, #177	; 0xb1
 8005c24:	4934      	ldr	r1, [pc, #208]	; (8005cf8 <recv_udp+0xec>)
 8005c26:	4835      	ldr	r0, [pc, #212]	; (8005cfc <recv_udp+0xf0>)
 8005c28:	f00e fbd0 	bl	80143cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <recv_udp+0x32>
 8005c32:	4b30      	ldr	r3, [pc, #192]	; (8005cf4 <recv_udp+0xe8>)
 8005c34:	22b2      	movs	r2, #178	; 0xb2
 8005c36:	4932      	ldr	r1, [pc, #200]	; (8005d00 <recv_udp+0xf4>)
 8005c38:	4830      	ldr	r0, [pc, #192]	; (8005cfc <recv_udp+0xf0>)
 8005c3a:	f00e fbc7 	bl	80143cc <iprintf>
  conn = (struct netconn *)arg;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <recv_udp+0x44>
    pbuf_free(p);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f006 ffbf 	bl	800cbcc <pbuf_free>
    return;
 8005c4e:	e04d      	b.n	8005cec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d005      	beq.n	8005c66 <recv_udp+0x5a>
 8005c5a:	4b26      	ldr	r3, [pc, #152]	; (8005cf4 <recv_udp+0xe8>)
 8005c5c:	22ba      	movs	r2, #186	; 0xba
 8005c5e:	4929      	ldr	r1, [pc, #164]	; (8005d04 <recv_udp+0xf8>)
 8005c60:	4826      	ldr	r0, [pc, #152]	; (8005cfc <recv_udp+0xf0>)
 8005c62:	f00e fbb3 	bl	80143cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3310      	adds	r3, #16
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f00d fb16 	bl	801329c <sys_mbox_valid>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f006 ffa8 	bl	800cbcc <pbuf_free>
    return;
 8005c7c:	e036      	b.n	8005cec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005c7e:	2006      	movs	r0, #6
 8005c80:	f006 f9f0 	bl	800c064 <memp_malloc>
 8005c84:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <recv_udp+0x88>
    pbuf_free(p);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f006 ff9d 	bl	800cbcc <pbuf_free>
    return;
 8005c92:	e02b      	b.n	8005cec <recv_udp+0xe0>
  } else {
    buf->p = p;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <recv_udp+0xa0>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	e000      	b.n	8005cae <recv_udp+0xa2>
 8005cac:	2300      	movs	r3, #0
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005cb6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	891b      	ldrh	r3, [r3, #8]
 8005cbc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3310      	adds	r3, #16
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f00d fa74 	bl	80131b2 <sys_mbox_trypost>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8005cd0:	69b8      	ldr	r0, [r7, #24]
 8005cd2:	f001 fbc7 	bl	8007464 <netbuf_delete>
    return;
 8005cd6:	e009      	b.n	8005cec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <recv_udp+0xe0>
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	8afa      	ldrh	r2, [r7, #22]
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	69f8      	ldr	r0, [r7, #28]
 8005cea:	4798      	blx	r3
  }
}
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	08015544 	.word	0x08015544
 8005cf8:	08015578 	.word	0x08015578
 8005cfc:	0801559c 	.word	0x0801559c
 8005d00:	080155c4 	.word	0x080155c4
 8005d04:	080155e4 	.word	0x080155e4

08005d08 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <recv_tcp+0x20>
 8005d1c:	4b39      	ldr	r3, [pc, #228]	; (8005e04 <recv_tcp+0xfc>)
 8005d1e:	22f9      	movs	r2, #249	; 0xf9
 8005d20:	4939      	ldr	r1, [pc, #228]	; (8005e08 <recv_tcp+0x100>)
 8005d22:	483a      	ldr	r0, [pc, #232]	; (8005e0c <recv_tcp+0x104>)
 8005d24:	f00e fb52 	bl	80143cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <recv_tcp+0x32>
 8005d2e:	4b35      	ldr	r3, [pc, #212]	; (8005e04 <recv_tcp+0xfc>)
 8005d30:	22fa      	movs	r2, #250	; 0xfa
 8005d32:	4937      	ldr	r1, [pc, #220]	; (8005e10 <recv_tcp+0x108>)
 8005d34:	4835      	ldr	r0, [pc, #212]	; (8005e0c <recv_tcp+0x104>)
 8005d36:	f00e fb49 	bl	80143cc <iprintf>
  conn = (struct netconn *)arg;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <recv_tcp+0x42>
    return ERR_VAL;
 8005d44:	f06f 0305 	mvn.w	r3, #5
 8005d48:	e057      	b.n	8005dfa <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d006      	beq.n	8005d62 <recv_tcp+0x5a>
 8005d54:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <recv_tcp+0xfc>)
 8005d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d5a:	492e      	ldr	r1, [pc, #184]	; (8005e14 <recv_tcp+0x10c>)
 8005d5c:	482b      	ldr	r0, [pc, #172]	; (8005e0c <recv_tcp+0x104>)
 8005d5e:	f00e fb35 	bl	80143cc <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	3310      	adds	r3, #16
 8005d66:	4618      	mov	r0, r3
 8005d68:	f00d fa98 	bl	801329c <sys_mbox_valid>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10d      	bne.n	8005d8e <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	891b      	ldrh	r3, [r3, #8]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	68b8      	ldr	r0, [r7, #8]
 8005d80:	f007 fe10 	bl	800d9a4 <tcp_recved>
      pbuf_free(p);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f006 ff21 	bl	800cbcc <pbuf_free>
    }
    return ERR_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e035      	b.n	8005dfa <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8005d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d011      	beq.n	8005dba <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00e      	beq.n	8005dba <recv_tcp+0xb2>
 8005d9c:	f00d fb8e 	bl	80134bc <sys_arch_protect>
 8005da0:	6178      	str	r0, [r7, #20]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005da8:	f113 0f0c 	cmn.w	r3, #12
 8005dac:	db02      	blt.n	8005db4 <recv_tcp+0xac>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	721a      	strb	r2, [r3, #8]
 8005db4:	6978      	ldr	r0, [r7, #20]
 8005db6:	f00d fb8f 	bl	80134d8 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <recv_tcp+0xc0>
    len = p->tot_len;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	891b      	ldrh	r3, [r3, #8]
 8005dc4:	83fb      	strh	r3, [r7, #30]
 8005dc6:	e001      	b.n	8005dcc <recv_tcp+0xc4>
  } else {
    len = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	3310      	adds	r3, #16
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f00d f9ed 	bl	80131b2 <sys_mbox_trypost>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de2:	e00a      	b.n	8005dfa <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <recv_tcp+0xf0>
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	8bfa      	ldrh	r2, [r7, #30]
 8005df2:	2100      	movs	r1, #0
 8005df4:	69b8      	ldr	r0, [r7, #24]
 8005df6:	4798      	blx	r3
  }

  return ERR_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08015544 	.word	0x08015544
 8005e08:	08015604 	.word	0x08015604
 8005e0c:	0801559c 	.word	0x0801559c
 8005e10:	08015628 	.word	0x08015628
 8005e14:	08015648 	.word	0x08015648

08005e18 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <poll_tcp+0x22>
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <poll_tcp+0xbc>)
 8005e2e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005e32:	4929      	ldr	r1, [pc, #164]	; (8005ed8 <poll_tcp+0xc0>)
 8005e34:	4829      	ldr	r0, [pc, #164]	; (8005edc <poll_tcp+0xc4>)
 8005e36:	f00e fac9 	bl	80143cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d104      	bne.n	8005e4c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005e42:	2101      	movs	r1, #1
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f001 f813 	bl	8006e70 <lwip_netconn_do_writemore>
 8005e4a:	e016      	b.n	8005e7a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d112      	bne.n	8005e7a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <poll_tcp+0x5a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	7a5b      	ldrb	r3, [r3, #9]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	7a5a      	ldrb	r2, [r3, #9]
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005e72:	2101      	movs	r1, #1
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fc13 	bl	80066a0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	7f1b      	ldrb	r3, [r3, #28]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d021      	beq.n	8005eca <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01d      	beq.n	8005eca <poll_tcp+0xb2>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e96:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8005e9a:	d316      	bcc.n	8005eca <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d810      	bhi.n	8005eca <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	7f1b      	ldrb	r3, [r3, #28]
 8005eac:	f023 0310 	bic.w	r3, r3, #16
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <poll_tcp+0xb2>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2102      	movs	r1, #2
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	08015544 	.word	0x08015544
 8005ed8:	08015668 	.word	0x08015668
 8005edc:	0801559c 	.word	0x0801559c

08005ee0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <sent_tcp+0x26>
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <sent_tcp+0x9c>)
 8005efa:	f240 1261 	movw	r2, #353	; 0x161
 8005efe:	4920      	ldr	r1, [pc, #128]	; (8005f80 <sent_tcp+0xa0>)
 8005f00:	4820      	ldr	r0, [pc, #128]	; (8005f84 <sent_tcp+0xa4>)
 8005f02:	f00e fa63 	bl	80143cc <iprintf>

  if (conn) {
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d032      	beq.n	8005f72 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d104      	bne.n	8005f1e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005f14:	2101      	movs	r1, #1
 8005f16:	6978      	ldr	r0, [r7, #20]
 8005f18:	f000 ffaa 	bl	8006e70 <lwip_netconn_do_writemore>
 8005f1c:	e007      	b.n	8005f2e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d103      	bne.n	8005f2e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005f26:	2101      	movs	r1, #1
 8005f28:	6978      	ldr	r0, [r7, #20]
 8005f2a:	f000 fbb9 	bl	80066a0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01d      	beq.n	8005f72 <sent_tcp+0x92>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f3e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8005f42:	d316      	bcc.n	8005f72 <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d810      	bhi.n	8005f72 <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	7f1b      	ldrb	r3, [r3, #28]
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <sent_tcp+0x92>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	88fa      	ldrh	r2, [r7, #6]
 8005f6c:	2102      	movs	r1, #2
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	08015544 	.word	0x08015544
 8005f80:	08015668 	.word	0x08015668
 8005f84:	0801559c 	.word	0x0801559c

08005f88 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <err_tcp+0x24>
 8005f9e:	4b6c      	ldr	r3, [pc, #432]	; (8006150 <err_tcp+0x1c8>)
 8005fa0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8005fa4:	496b      	ldr	r1, [pc, #428]	; (8006154 <err_tcp+0x1cc>)
 8005fa6:	486c      	ldr	r0, [pc, #432]	; (8006158 <err_tcp+0x1d0>)
 8005fa8:	f00e fa10 	bl	80143cc <iprintf>

  conn->pcb.tcp = NULL;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	2200      	movs	r2, #0
 8005fb0:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8005fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d114      	bne.n	8005ff2 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d018      	beq.n	8006004 <err_tcp+0x7c>
 8005fd2:	f00d fa73 	bl	80134bc <sys_arch_protect>
 8005fd6:	61f8      	str	r0, [r7, #28]
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005fde:	f113 0f0c 	cmn.w	r3, #12
 8005fe2:	db02      	blt.n	8005fea <err_tcp+0x62>
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	721a      	strb	r2, [r3, #8]
 8005fea:	69f8      	ldr	r0, [r7, #28]
 8005fec:	f00d fa74 	bl	80134d8 <sys_arch_unprotect>
 8005ff0:	e008      	b.n	8006004 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8005ff2:	f00d fa63 	bl	80134bc <sys_arch_protect>
 8005ff6:	61b8      	str	r0, [r7, #24]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	721a      	strb	r2, [r3, #8]
 8005ffe:	69b8      	ldr	r0, [r7, #24]
 8006000:	f00d fa6a 	bl	80134d8 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <err_tcp+0x90>
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	2200      	movs	r2, #0
 8006012:	2104      	movs	r1, #4
 8006014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006016:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <err_tcp+0xa4>
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	2200      	movs	r2, #0
 8006026:	2100      	movs	r1, #0
 8006028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800602a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <err_tcp+0xb8>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	2200      	movs	r2, #0
 800603a:	2102      	movs	r1, #2
 800603c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800603e:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	3310      	adds	r3, #16
 8006044:	4618      	mov	r0, r3
 8006046:	f00d f929 	bl	801329c <sys_mbox_valid>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	3310      	adds	r3, #16
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f00d f8ab 	bl	80131b2 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	3314      	adds	r3, #20
 8006060:	4618      	mov	r0, r3
 8006062:	f00d f91b 	bl	801329c <sys_mbox_valid>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	3314      	adds	r3, #20
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f00d f89d 	bl	80131b2 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800607c:	2b01      	cmp	r3, #1
 800607e:	d007      	beq.n	8006090 <err_tcp+0x108>
 8006080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006084:	2b04      	cmp	r3, #4
 8006086:	d003      	beq.n	8006090 <err_tcp+0x108>
 8006088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800608c:	2b03      	cmp	r3, #3
 800608e:	d14d      	bne.n	800612c <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	7f1b      	ldrb	r3, [r3, #28]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	7f1b      	ldrb	r3, [r3, #28]
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d145      	bne.n	8006144 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <err_tcp+0x146>
 80060c0:	4b23      	ldr	r3, [pc, #140]	; (8006150 <err_tcp+0x1c8>)
 80060c2:	f240 12b3 	movw	r2, #435	; 0x1b3
 80060c6:	4925      	ldr	r1, [pc, #148]	; (800615c <err_tcp+0x1d4>)
 80060c8:	4823      	ldr	r0, [pc, #140]	; (8006158 <err_tcp+0x1d0>)
 80060ca:	f00e f97f 	bl	80143cc <iprintf>
      conn->current_msg->err = err;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	78fa      	ldrb	r2, [r7, #3]
 80060d4:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80060e0:	6938      	ldr	r0, [r7, #16]
 80060e2:	f00d f96a 	bl	80133ba <sys_sem_valid>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <err_tcp+0x172>
 80060ec:	4b18      	ldr	r3, [pc, #96]	; (8006150 <err_tcp+0x1c8>)
 80060ee:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80060f2:	491b      	ldr	r1, [pc, #108]	; (8006160 <err_tcp+0x1d8>)
 80060f4:	4818      	ldr	r0, [pc, #96]	; (8006158 <err_tcp+0x1d0>)
 80060f6:	f00e f969 	bl	80143cc <iprintf>
      conn->current_msg = NULL;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2200      	movs	r2, #0
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <err_tcp+0x19c>
 8006106:	f00d f9d9 	bl	80134bc <sys_arch_protect>
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006112:	f113 0f0c 	cmn.w	r3, #12
 8006116:	db02      	blt.n	800611e <err_tcp+0x196>
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	721a      	strb	r2, [r3, #8]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f00d f9da 	bl	80134d8 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8006124:	6938      	ldr	r0, [r7, #16]
 8006126:	f00d f92e 	bl	8013386 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800612a:	e00b      	b.n	8006144 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <err_tcp+0x1be>
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <err_tcp+0x1c8>)
 8006136:	f240 12bd 	movw	r2, #445	; 0x1bd
 800613a:	490a      	ldr	r1, [pc, #40]	; (8006164 <err_tcp+0x1dc>)
 800613c:	4806      	ldr	r0, [pc, #24]	; (8006158 <err_tcp+0x1d0>)
 800613e:	f00e f945 	bl	80143cc <iprintf>
  }
}
 8006142:	e000      	b.n	8006146 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8006144:	bf00      	nop
}
 8006146:	bf00      	nop
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	08015544 	.word	0x08015544
 8006154:	08015668 	.word	0x08015668
 8006158:	0801559c 	.word	0x0801559c
 800615c:	08015678 	.word	0x08015678
 8006160:	08015694 	.word	0x08015694
 8006164:	080156b0 	.word	0x080156b0

08006168 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f008 f9f5 	bl	800e568 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800617e:	490a      	ldr	r1, [pc, #40]	; (80061a8 <setup_tcp+0x40>)
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f008 fa03 	bl	800e58c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006186:	4909      	ldr	r1, [pc, #36]	; (80061ac <setup_tcp+0x44>)
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f008 fa21 	bl	800e5d0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800618e:	2202      	movs	r2, #2
 8006190:	4907      	ldr	r1, [pc, #28]	; (80061b0 <setup_tcp+0x48>)
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f008 fa76 	bl	800e684 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006198:	4906      	ldr	r1, [pc, #24]	; (80061b4 <setup_tcp+0x4c>)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f008 fa38 	bl	800e610 <tcp_err>
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	08005d09 	.word	0x08005d09
 80061ac:	08005ee1 	.word	0x08005ee1
 80061b0:	08005e19 	.word	0x08005e19
 80061b4:	08005f89 	.word	0x08005f89

080061b8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <accept_function+0x1e>
    return ERR_VAL;
 80061d0:	f06f 0305 	mvn.w	r3, #5
 80061d4:	e08d      	b.n	80062f2 <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	3314      	adds	r3, #20
 80061da:	4618      	mov	r0, r3
 80061dc:	f00d f85e 	bl	801329c <sys_mbox_valid>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80061e6:	f06f 0305 	mvn.w	r3, #5
 80061ea:	e082      	b.n	80062f2 <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d115      	bne.n	800621e <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	3314      	adds	r3, #20
 80061f6:	4941      	ldr	r1, [pc, #260]	; (80062fc <accept_function+0x144>)
 80061f8:	4618      	mov	r0, r3
 80061fa:	f00c ffda 	bl	80131b2 <sys_mbox_trypost>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <accept_function+0x60>
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	2200      	movs	r2, #0
 8006212:	2100      	movs	r1, #0
 8006214:	69f8      	ldr	r0, [r7, #28]
 8006216:	4798      	blx	r3
    }
    return ERR_VAL;
 8006218:	f06f 0305 	mvn.w	r3, #5
 800621c:	e069      	b.n	80062f2 <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f000 f8ff 	bl	800642c <netconn_alloc>
 800622e:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d115      	bne.n	8006262 <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3314      	adds	r3, #20
 800623a:	4930      	ldr	r1, [pc, #192]	; (80062fc <accept_function+0x144>)
 800623c:	4618      	mov	r0, r3
 800623e:	f00c ffb8 	bl	80131b2 <sys_mbox_trypost>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <accept_function+0xa4>
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	2200      	movs	r2, #0
 8006256:	2100      	movs	r1, #0
 8006258:	69f8      	ldr	r0, [r7, #28]
 800625a:	4798      	blx	r3
    }
    return ERR_MEM;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006260:	e047      	b.n	80062f2 <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8006268:	69b8      	ldr	r0, [r7, #24]
 800626a:	f7ff ff7d 	bl	8006168 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	79fa      	ldrb	r2, [r7, #7]
 8006272:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3314      	adds	r3, #20
 8006278:	69b9      	ldr	r1, [r7, #24]
 800627a:	4618      	mov	r0, r3
 800627c:	f00c ff99 	bl	80131b2 <sys_mbox_trypost>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02a      	beq.n	80062dc <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800628c:	2100      	movs	r1, #0
 800628e:	6978      	ldr	r0, [r7, #20]
 8006290:	f008 f96a 	bl	800e568 <tcp_arg>
    tcp_recv(pcb, NULL);
 8006294:	2100      	movs	r1, #0
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f008 f978 	bl	800e58c <tcp_recv>
    tcp_sent(pcb, NULL);
 800629c:	2100      	movs	r1, #0
 800629e:	6978      	ldr	r0, [r7, #20]
 80062a0:	f008 f996 	bl	800e5d0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80062a4:	2200      	movs	r2, #0
 80062a6:	2100      	movs	r1, #0
 80062a8:	6978      	ldr	r0, [r7, #20]
 80062aa:	f008 f9eb 	bl	800e684 <tcp_poll>
    tcp_err(pcb, NULL);
 80062ae:	2100      	movs	r1, #0
 80062b0:	6978      	ldr	r0, [r7, #20]
 80062b2:	f008 f9ad 	bl	800e610 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2200      	movs	r2, #0
 80062ba:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00c ff4f 	bl	8013164 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3310      	adds	r3, #16
 80062ca:	4618      	mov	r0, r3
 80062cc:	f00c fff7 	bl	80132be <sys_mbox_set_invalid>
    netconn_free(newconn);
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f000 f91b 	bl	800650c <netconn_free>
    return ERR_MEM;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062da:	e00a      	b.n	80062f2 <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <accept_function+0x138>
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	2200      	movs	r2, #0
 80062ea:	2100      	movs	r1, #0
 80062ec:	69f8      	ldr	r0, [r7, #28]
 80062ee:	4798      	blx	r3
  }

  return ERR_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20003fd8 	.word	0x20003fd8

08006300 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <pcb_new+0x24>
 8006316:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <pcb_new+0xc4>)
 8006318:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800631c:	492a      	ldr	r1, [pc, #168]	; (80063c8 <pcb_new+0xc8>)
 800631e:	482b      	ldr	r0, [pc, #172]	; (80063cc <pcb_new+0xcc>)
 8006320:	f00e f854 	bl	80143cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632e:	2b10      	cmp	r3, #16
 8006330:	d022      	beq.n	8006378 <pcb_new+0x78>
 8006332:	2b20      	cmp	r3, #32
 8006334:	d133      	bne.n	800639e <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681c      	ldr	r4, [r3, #0]
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	4618      	mov	r0, r3
 800633e:	f00c fddc 	bl	8012efa <udp_new_ip_type>
 8006342:	4603      	mov	r3, r0
 8006344:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02a      	beq.n	80063a6 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b22      	cmp	r3, #34	; 0x22
 8006358:	d104      	bne.n	8006364 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6858      	ldr	r0, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	4917      	ldr	r1, [pc, #92]	; (80063d0 <pcb_new+0xd0>)
 8006372:	f00c fd67 	bl	8012e44 <udp_recv>
    }
    break;
 8006376:	e016      	b.n	80063a6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681c      	ldr	r4, [r3, #0]
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	4618      	mov	r0, r3
 8006380:	f008 f8e4 	bl	800e54c <tcp_new_ip_type>
 8006384:	4603      	mov	r3, r0
 8006386:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fee6 	bl	8006168 <setup_tcp>
    }
    break;
 800639c:	e005      	b.n	80063aa <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	22fa      	movs	r2, #250	; 0xfa
 80063a2:	711a      	strb	r2, [r3, #4]
    return;
 80063a4:	e00a      	b.n	80063bc <pcb_new+0xbc>
    break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <pcb_new+0xac>
    break;
 80063aa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	22ff      	movs	r2, #255	; 0xff
 80063ba:	711a      	strb	r2, [r3, #4]
  }
}
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	bf00      	nop
 80063c4:	08015544 	.word	0x08015544
 80063c8:	080156cc 	.word	0x080156cc
 80063cc:	0801559c 	.word	0x0801559c
 80063d0:	08005c0d 	.word	0x08005c0d

080063d4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff ff85 	bl	8006300 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d012      	beq.n	8006424 <lwip_netconn_do_newconn+0x50>
 80063fe:	f00d f85d 	bl	80134bc <sys_arch_protect>
 8006402:	60b8      	str	r0, [r7, #8]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800640c:	f113 0f0c 	cmn.w	r3, #12
 8006410:	db05      	blt.n	800641e <lwip_netconn_do_newconn+0x4a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800641c:	721a      	strb	r2, [r3, #8]
 800641e:	68b8      	ldr	r0, [r7, #8]
 8006420:	f00d f85a 	bl	80134d8 <sys_arch_unprotect>
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006438:	2007      	movs	r0, #7
 800643a:	f005 fe13 	bl	800c064 <memp_malloc>
 800643e:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <netconn_alloc+0x1e>
    return NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	e055      	b.n	80064f6 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	79fa      	ldrb	r2, [r7, #7]
 8006454:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2200      	movs	r2, #0
 800645a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006462:	2b10      	cmp	r3, #16
 8006464:	d004      	beq.n	8006470 <netconn_alloc+0x44>
 8006466:	2b20      	cmp	r3, #32
 8006468:	d105      	bne.n	8006476 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800646a:	2306      	movs	r3, #6
 800646c:	60fb      	str	r3, [r7, #12]
    break;
 800646e:	e00a      	b.n	8006486 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8006470:	2306      	movs	r3, #6
 8006472:	60fb      	str	r3, [r7, #12]
    break;
 8006474:	e007      	b.n	8006486 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <netconn_alloc+0xd4>)
 8006478:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800647c:	4921      	ldr	r1, [pc, #132]	; (8006504 <netconn_alloc+0xd8>)
 800647e:	4822      	ldr	r0, [pc, #136]	; (8006508 <netconn_alloc+0xdc>)
 8006480:	f00d ffa4 	bl	80143cc <iprintf>
    goto free_and_return;
 8006484:	e032      	b.n	80064ec <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3310      	adds	r3, #16
 800648a:	68f9      	ldr	r1, [r7, #12]
 800648c:	4618      	mov	r0, r3
 800648e:	f00c fe4b 	bl	8013128 <sys_mbox_new>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d128      	bne.n	80064ea <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	330c      	adds	r3, #12
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f00c ff1a 	bl	80132d8 <sys_sem_new>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3310      	adds	r3, #16
 80064ae:	4618      	mov	r0, r3
 80064b0:	f00c fe58 	bl	8013164 <sys_mbox_free>
    goto free_and_return;
 80064b4:	e01a      	b.n	80064ec <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	3314      	adds	r3, #20
 80064ba:	4618      	mov	r0, r3
 80064bc:	f00c feff 	bl	80132be <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064cc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	771a      	strb	r2, [r3, #28]
  return conn;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	e005      	b.n	80064f6 <netconn_alloc+0xca>
    goto free_and_return;
 80064ea:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	2007      	movs	r0, #7
 80064f0:	f005 fe0a 	bl	800c108 <memp_free>
  return NULL;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	08015544 	.word	0x08015544
 8006504:	080156ec 	.word	0x080156ec
 8006508:	0801559c 	.word	0x0801559c

0800650c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d006      	beq.n	800652a <netconn_free+0x1e>
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <netconn_free+0x80>)
 800651e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8006522:	491b      	ldr	r1, [pc, #108]	; (8006590 <netconn_free+0x84>)
 8006524:	481b      	ldr	r0, [pc, #108]	; (8006594 <netconn_free+0x88>)
 8006526:	f00d ff51 	bl	80143cc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3310      	adds	r3, #16
 800652e:	4618      	mov	r0, r3
 8006530:	f00c feb4 	bl	801329c <sys_mbox_valid>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <netconn_free+0x3c>
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <netconn_free+0x80>)
 800653c:	f240 22e2 	movw	r2, #738	; 0x2e2
 8006540:	4915      	ldr	r1, [pc, #84]	; (8006598 <netconn_free+0x8c>)
 8006542:	4814      	ldr	r0, [pc, #80]	; (8006594 <netconn_free+0x88>)
 8006544:	f00d ff42 	bl	80143cc <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3314      	adds	r3, #20
 800654c:	4618      	mov	r0, r3
 800654e:	f00c fea5 	bl	801329c <sys_mbox_valid>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <netconn_free+0x5a>
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <netconn_free+0x80>)
 800655a:	f240 22e5 	movw	r2, #741	; 0x2e5
 800655e:	490f      	ldr	r1, [pc, #60]	; (800659c <netconn_free+0x90>)
 8006560:	480c      	ldr	r0, [pc, #48]	; (8006594 <netconn_free+0x88>)
 8006562:	f00d ff33 	bl	80143cc <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	330c      	adds	r3, #12
 800656a:	4618      	mov	r0, r3
 800656c:	f00c ff18 	bl	80133a0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	330c      	adds	r3, #12
 8006574:	4618      	mov	r0, r3
 8006576:	f00c ff31 	bl	80133dc <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	2007      	movs	r0, #7
 800657e:	f005 fdc3 	bl	800c108 <memp_free>
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	08015544 	.word	0x08015544
 8006590:	08015714 	.word	0x08015714
 8006594:	0801559c 	.word	0x0801559c
 8006598:	08015744 	.word	0x08015744
 800659c:	08015780 	.word	0x08015780

080065a0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3310      	adds	r3, #16
 80065ac:	4618      	mov	r0, r3
 80065ae:	f00c fe75 	bl	801329c <sys_mbox_valid>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d035      	beq.n	8006624 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80065b8:	e01e      	b.n	80065f8 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d114      	bne.n	80065f0 <netconn_drain+0x50>
        if (mem != NULL) {
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	891b      	ldrh	r3, [r3, #8]
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f007 f9de 	bl	800d9a4 <tcp_recved>
          }
          pbuf_free(p);
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	f006 faef 	bl	800cbcc <pbuf_free>
 80065ee:	e003      	b.n	80065f8 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 ff36 	bl	8007464 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3310      	adds	r3, #16
 80065fc:	f107 020c 	add.w	r2, r7, #12
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f00c fe2e 	bl	8013264 <sys_arch_mbox_tryfetch>
 8006608:	4603      	mov	r3, r0
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660e:	d1d4      	bne.n	80065ba <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3310      	adds	r3, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f00c fda5 	bl	8013164 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3310      	adds	r3, #16
 800661e:	4618      	mov	r0, r3
 8006620:	f00c fe4d 	bl	80132be <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3314      	adds	r3, #20
 8006628:	4618      	mov	r0, r3
 800662a:	f00c fe37 	bl	801329c <sys_mbox_valid>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02e      	beq.n	8006692 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006634:	e017      	b.n	8006666 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <netconn_drain+0xfc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8006642:	6938      	ldr	r0, [r7, #16]
 8006644:	f7ff ffac 	bl	80065a0 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	f007 f80f 	bl	800d678 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2200      	movs	r2, #0
 800665e:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8006660:	6938      	ldr	r0, [r7, #16]
 8006662:	f7ff ff53 	bl	800650c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3314      	adds	r3, #20
 800666a:	f107 020c 	add.w	r2, r7, #12
 800666e:	4611      	mov	r1, r2
 8006670:	4618      	mov	r0, r3
 8006672:	f00c fdf7 	bl	8013264 <sys_arch_mbox_tryfetch>
 8006676:	4603      	mov	r3, r0
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667c:	d1db      	bne.n	8006636 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3314      	adds	r3, #20
 8006682:	4618      	mov	r0, r3
 8006684:	f00c fd6e 	bl	8013164 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3314      	adds	r3, #20
 800668c:	4618      	mov	r0, r3
 800668e:	f00c fe16 	bl	80132be <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8006692:	bf00      	nop
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20003fd8 	.word	0x20003fd8

080066a0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <lwip_netconn_do_close_internal+0x24>
 80066b6:	4baa      	ldr	r3, [pc, #680]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 80066b8:	f240 3243 	movw	r2, #835	; 0x343
 80066bc:	49a9      	ldr	r1, [pc, #676]	; (8006964 <lwip_netconn_do_close_internal+0x2c4>)
 80066be:	48aa      	ldr	r0, [pc, #680]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 80066c0:	f00d fe84 	bl	80143cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d006      	beq.n	80066de <lwip_netconn_do_close_internal+0x3e>
 80066d0:	4ba3      	ldr	r3, [pc, #652]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 80066d2:	f44f 7251 	mov.w	r2, #836	; 0x344
 80066d6:	49a5      	ldr	r1, [pc, #660]	; (800696c <lwip_netconn_do_close_internal+0x2cc>)
 80066d8:	48a3      	ldr	r0, [pc, #652]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 80066da:	f00d fe77 	bl	80143cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d006      	beq.n	80066f4 <lwip_netconn_do_close_internal+0x54>
 80066e6:	4b9e      	ldr	r3, [pc, #632]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 80066e8:	f240 3245 	movw	r2, #837	; 0x345
 80066ec:	49a0      	ldr	r1, [pc, #640]	; (8006970 <lwip_netconn_do_close_internal+0x2d0>)
 80066ee:	489e      	ldr	r0, [pc, #632]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 80066f0:	f00d fe6c 	bl	80143cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <lwip_netconn_do_close_internal+0x6a>
 80066fc:	4b98      	ldr	r3, [pc, #608]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 80066fe:	f240 3246 	movw	r2, #838	; 0x346
 8006702:	499c      	ldr	r1, [pc, #624]	; (8006974 <lwip_netconn_do_close_internal+0x2d4>)
 8006704:	4898      	ldr	r0, [pc, #608]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 8006706:	f00d fe61 	bl	80143cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <lwip_netconn_do_close_internal+0x80>
 8006712:	4b93      	ldr	r3, [pc, #588]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 8006714:	f240 3247 	movw	r2, #839	; 0x347
 8006718:	4997      	ldr	r1, [pc, #604]	; (8006978 <lwip_netconn_do_close_internal+0x2d8>)
 800671a:	4893      	ldr	r0, [pc, #588]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 800671c:	f00d fe56 	bl	80143cc <iprintf>

  tpcb = conn->pcb.tcp;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	7a1b      	ldrb	r3, [r3, #8]
 800672c:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d102      	bne.n	800674a <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8006744:	2301      	movs	r3, #1
 8006746:	77bb      	strb	r3, [r7, #30]
 8006748:	e01f      	b.n	800678a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800674a:	7dbb      	ldrb	r3, [r7, #22]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8006754:	2b05      	cmp	r3, #5
 8006756:	d007      	beq.n	8006768 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800675c:	2b06      	cmp	r3, #6
 800675e:	d003      	beq.n	8006768 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8006764:	2b08      	cmp	r3, #8
 8006766:	d102      	bne.n	800676e <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8006768:	2301      	movs	r3, #1
 800676a:	77bb      	strb	r3, [r7, #30]
 800676c:	e00d      	b.n	800678a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800676e:	7d7b      	ldrb	r3, [r7, #21]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <lwip_netconn_do_close_internal+0xe6>
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	7e9b      	ldrb	r3, [r3, #26]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8006780:	2301      	movs	r3, #1
 8006782:	77bb      	strb	r3, [r7, #30]
 8006784:	e001      	b.n	800678a <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800678a:	7fbb      	ldrb	r3, [r7, #30]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8006790:	2100      	movs	r1, #0
 8006792:	69b8      	ldr	r0, [r7, #24]
 8006794:	f007 fee8 	bl	800e568 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	7d1b      	ldrb	r3, [r3, #20]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d104      	bne.n	80067aa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80067a0:	2100      	movs	r1, #0
 80067a2:	69b8      	ldr	r0, [r7, #24]
 80067a4:	f007 ff56 	bl	800e654 <tcp_accept>
 80067a8:	e01d      	b.n	80067e6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80067aa:	7dbb      	ldrb	r3, [r7, #22]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80067b0:	2100      	movs	r1, #0
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f007 feea 	bl	800e58c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80067b8:	2100      	movs	r1, #0
 80067ba:	69b8      	ldr	r0, [r7, #24]
 80067bc:	f007 ff4a 	bl	800e654 <tcp_accept>
    }
    if (shut_tx) {
 80067c0:	7d7b      	ldrb	r3, [r7, #21]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80067c6:	2100      	movs	r1, #0
 80067c8:	69b8      	ldr	r0, [r7, #24]
 80067ca:	f007 ff01 	bl	800e5d0 <tcp_sent>
    }
    if (close) {
 80067ce:	7fbb      	ldrb	r3, [r7, #30]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2100      	movs	r1, #0
 80067d8:	69b8      	ldr	r0, [r7, #24]
 80067da:	f007 ff53 	bl	800e684 <tcp_poll>
      tcp_err(tpcb, NULL);
 80067de:	2100      	movs	r1, #0
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f007 ff15 	bl	800e610 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 80067e6:	7fbb      	ldrb	r3, [r7, #30]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80067ec:	69b8      	ldr	r0, [r7, #24]
 80067ee:	f006 fe31 	bl	800d454 <tcp_close>
 80067f2:	4603      	mov	r3, r0
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e007      	b.n	8006808 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80067f8:	7dbb      	ldrb	r3, [r7, #22]
 80067fa:	7d7a      	ldrb	r2, [r7, #21]
 80067fc:	4619      	mov	r1, r3
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f006 fe40 	bl	800d484 <tcp_shutdown>
 8006804:	4603      	mov	r3, r0
 8006806:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8006808:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8006810:	2301      	movs	r3, #1
 8006812:	777b      	strb	r3, [r7, #29]
 8006814:	e016      	b.n	8006844 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8006816:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681e:	d10f      	bne.n	8006840 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	7a5b      	ldrb	r3, [r3, #9]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10c      	bne.n	8006844 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800682a:	2301      	movs	r3, #1
 800682c:	777b      	strb	r3, [r7, #29]
        if (close) {
 800682e:	7fbb      	ldrb	r3, [r7, #30]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8006834:	69b8      	ldr	r0, [r7, #24]
 8006836:	f006 ff1f 	bl	800d678 <tcp_abort>
          err = ERR_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e001      	b.n	8006844 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8006840:	2301      	movs	r3, #1
 8006842:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8006844:	7f7b      	ldrb	r3, [r7, #29]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d056      	beq.n	80068f8 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	7ffa      	ldrb	r2, [r7, #31]
 800685a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8006868:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d129      	bne.n	80068c4 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8006870:	7fbb      	ldrb	r3, [r7, #30]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <lwip_netconn_do_close_internal+0x1f0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	2200      	movs	r2, #0
 800688a:	2104      	movs	r1, #4
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
      }
      if (shut_rx) {
 8006890:	7dbb      	ldrb	r3, [r7, #22]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <lwip_netconn_do_close_internal+0x20a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
      }
      if (shut_tx) {
 80068aa:	7d7b      	ldrb	r3, [r7, #21]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <lwip_netconn_do_close_internal+0x224>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	2200      	movs	r2, #0
 80068be:	2102      	movs	r1, #2
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <lwip_netconn_do_close_internal+0x248>
 80068ca:	f00c fdf7 	bl	80134bc <sys_arch_protect>
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80068d6:	f113 0f0c 	cmn.w	r3, #12
 80068da:	db02      	blt.n	80068e2 <lwip_netconn_do_close_internal+0x242>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7ffa      	ldrb	r2, [r7, #31]
 80068e0:	721a      	strb	r2, [r3, #8]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f00c fdf8 	bl	80134d8 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80068ee:	6938      	ldr	r0, [r7, #16]
 80068f0:	f00c fd49 	bl	8013386 <sys_sem_signal>
    }
    return ERR_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e02e      	b.n	8006956 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 80068f8:	7f7b      	ldrb	r3, [r7, #29]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11e      	bne.n	800693c <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	7d1b      	ldrb	r3, [r3, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d106      	bne.n	8006914 <lwip_netconn_do_close_internal+0x274>
 8006906:	4b16      	ldr	r3, [pc, #88]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 8006908:	f240 32e3 	movw	r2, #995	; 0x3e3
 800690c:	491b      	ldr	r1, [pc, #108]	; (800697c <lwip_netconn_do_close_internal+0x2dc>)
 800690e:	4816      	ldr	r0, [pc, #88]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 8006910:	f00d fd5c 	bl	80143cc <iprintf>
    if (shut_tx) {
 8006914:	7d7b      	ldrb	r3, [r7, #21]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800691a:	4919      	ldr	r1, [pc, #100]	; (8006980 <lwip_netconn_do_close_internal+0x2e0>)
 800691c:	69b8      	ldr	r0, [r7, #24]
 800691e:	f007 fe57 	bl	800e5d0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8006922:	2201      	movs	r2, #1
 8006924:	4917      	ldr	r1, [pc, #92]	; (8006984 <lwip_netconn_do_close_internal+0x2e4>)
 8006926:	69b8      	ldr	r0, [r7, #24]
 8006928:	f007 feac 	bl	800e684 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800692c:	4916      	ldr	r1, [pc, #88]	; (8006988 <lwip_netconn_do_close_internal+0x2e8>)
 800692e:	69b8      	ldr	r0, [r7, #24]
 8006930:	f007 fe6e 	bl	800e610 <tcp_err>
    tcp_arg(tpcb, conn);
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	69b8      	ldr	r0, [r7, #24]
 8006938:	f007 fe16 	bl	800e568 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800693c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <lwip_netconn_do_close_internal+0x2b2>
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <lwip_netconn_do_close_internal+0x2c0>)
 8006946:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800694a:	4910      	ldr	r1, [pc, #64]	; (800698c <lwip_netconn_do_close_internal+0x2ec>)
 800694c:	4806      	ldr	r0, [pc, #24]	; (8006968 <lwip_netconn_do_close_internal+0x2c8>)
 800694e:	f00d fd3d 	bl	80143cc <iprintf>
  return err;
 8006952:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	08015544 	.word	0x08015544
 8006964:	080157bc 	.word	0x080157bc
 8006968:	0801559c 	.word	0x0801559c
 800696c:	080157cc 	.word	0x080157cc
 8006970:	080157ec 	.word	0x080157ec
 8006974:	08015810 	.word	0x08015810
 8006978:	08015678 	.word	0x08015678
 800697c:	08015824 	.word	0x08015824
 8006980:	08005ee1 	.word	0x08005ee1
 8006984:	08005e19 	.word	0x08005e19
 8006988:	08005f89 	.word	0x08005f89
 800698c:	08015848 	.word	0x08015848

08006990 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <lwip_netconn_do_delconn+0x36>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d006      	beq.n	80069c6 <lwip_netconn_do_delconn+0x36>
 80069b8:	4b6f      	ldr	r3, [pc, #444]	; (8006b78 <lwip_netconn_do_delconn+0x1e8>)
 80069ba:	f240 4201 	movw	r2, #1025	; 0x401
 80069be:	496f      	ldr	r1, [pc, #444]	; (8006b7c <lwip_netconn_do_delconn+0x1ec>)
 80069c0:	486f      	ldr	r0, [pc, #444]	; (8006b80 <lwip_netconn_do_delconn+0x1f0>)
 80069c2:	f00d fd03 	bl	80143cc <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80069c6:	7cfb      	ldrb	r3, [r7, #19]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <lwip_netconn_do_delconn+0x48>
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d002      	beq.n	80069d8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80069d2:	7cfb      	ldrb	r3, [r7, #19]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d109      	bne.n	80069ec <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d10a      	bne.n	80069f4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	7f1b      	ldrb	r3, [r3, #28]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d103      	bne.n	80069f4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	22fb      	movs	r2, #251	; 0xfb
 80069f0:	711a      	strb	r2, [r3, #4]
 80069f2:	e09c      	b.n	8006b2e <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d10d      	bne.n	8006a16 <lwip_netconn_do_delconn+0x86>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	7f1b      	ldrb	r3, [r3, #28]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <lwip_netconn_do_delconn+0x86>
 8006a08:	4b5b      	ldr	r3, [pc, #364]	; (8006b78 <lwip_netconn_do_delconn+0x1e8>)
 8006a0a:	f240 421f 	movw	r2, #1055	; 0x41f
 8006a0e:	495d      	ldr	r1, [pc, #372]	; (8006b84 <lwip_netconn_do_delconn+0x1f4>)
 8006a10:	485b      	ldr	r0, [pc, #364]	; (8006b80 <lwip_netconn_do_delconn+0x1f0>)
 8006a12:	f00d fcdb 	bl	80143cc <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fdbd 	bl	80065a0 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d064      	beq.n	8006afa <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	d00e      	beq.n	8006a5c <lwip_netconn_do_delconn+0xcc>
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d000      	beq.n	8006a44 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8006a42:	e056      	b.n	8006af2 <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f00c fa07 	bl	8012e68 <udp_remove>
        break;
 8006a5a:	e04a      	b.n	8006af2 <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <lwip_netconn_do_delconn+0xe0>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <lwip_netconn_do_delconn+0xee>
 8006a70:	4b41      	ldr	r3, [pc, #260]	; (8006b78 <lwip_netconn_do_delconn+0x1e8>)
 8006a72:	f240 4235 	movw	r2, #1077	; 0x435
 8006a76:	4944      	ldr	r1, [pc, #272]	; (8006b88 <lwip_netconn_do_delconn+0x1f8>)
 8006a78:	4841      	ldr	r0, [pc, #260]	; (8006b80 <lwip_netconn_do_delconn+0x1f0>)
 8006a7a:	f00d fca7 	bl	80143cc <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2204      	movs	r2, #4
 8006a84:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fe00 	bl	80066a0 <lwip_netconn_do_close_internal>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d064      	beq.n	8006b70 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d006      	beq.n	8006abe <lwip_netconn_do_delconn+0x12e>
 8006ab0:	4b31      	ldr	r3, [pc, #196]	; (8006b78 <lwip_netconn_do_delconn+0x1e8>)
 8006ab2:	f240 423b 	movw	r2, #1083	; 0x43b
 8006ab6:	4935      	ldr	r1, [pc, #212]	; (8006b8c <lwip_netconn_do_delconn+0x1fc>)
 8006ab8:	4831      	ldr	r0, [pc, #196]	; (8006b80 <lwip_netconn_do_delconn+0x1f0>)
 8006aba:	f00d fc87 	bl	80143cc <iprintf>
          UNLOCK_TCPIP_CORE();
 8006abe:	4834      	ldr	r0, [pc, #208]	; (8006b90 <lwip_netconn_do_delconn+0x200>)
 8006ac0:	f00c fcd1 	bl	8013466 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f00c fc29 	bl	8013324 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8006ad2:	482f      	ldr	r0, [pc, #188]	; (8006b90 <lwip_netconn_do_delconn+0x200>)
 8006ad4:	f00c fcb8 	bl	8013448 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d046      	beq.n	8006b70 <lwip_netconn_do_delconn+0x1e0>
 8006ae2:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <lwip_netconn_do_delconn+0x1e8>)
 8006ae4:	f240 423f 	movw	r2, #1087	; 0x43f
 8006ae8:	4928      	ldr	r1, [pc, #160]	; (8006b8c <lwip_netconn_do_delconn+0x1fc>)
 8006aea:	4825      	ldr	r0, [pc, #148]	; (8006b80 <lwip_netconn_do_delconn+0x1f0>)
 8006aec:	f00d fc6e 	bl	80143cc <iprintf>
        return;
 8006af0:	e03e      	b.n	8006b70 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <lwip_netconn_do_delconn+0x184>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	6810      	ldr	r0, [r2, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <lwip_netconn_do_delconn+0x19e>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	6810      	ldr	r0, [r2, #0]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	4618      	mov	r0, r3
 8006b36:	f00c fc40 	bl	80133ba <sys_sem_valid>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d018      	beq.n	8006b72 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d014      	beq.n	8006b72 <lwip_netconn_do_delconn+0x1e2>
 8006b48:	f00c fcb8 	bl	80134bc <sys_arch_protect>
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b56:	f113 0f0c 	cmn.w	r3, #12
 8006b5a:	db05      	blt.n	8006b68 <lwip_netconn_do_delconn+0x1d8>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006b66:	721a      	strb	r2, [r3, #8]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f00c fcb5 	bl	80134d8 <sys_arch_unprotect>
 8006b6e:	e000      	b.n	8006b72 <lwip_netconn_do_delconn+0x1e2>
        return;
 8006b70:	bf00      	nop
  }
}
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	08015544 	.word	0x08015544
 8006b7c:	08015858 	.word	0x08015858
 8006b80:	0801559c 	.word	0x0801559c
 8006b84:	0801586c 	.word	0x0801586c
 8006b88:	0801588c 	.word	0x0801588c
 8006b8c:	080158a8 	.word	0x080158a8
 8006b90:	20003fdc 	.word	0x20003fdc

08006b94 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ba8:	f113 0f0c 	cmn.w	r3, #12
 8006bac:	da06      	bge.n	8006bbc <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	711a      	strb	r2, [r3, #4]
 8006bba:	e02f      	b.n	8006c1c <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	22fa      	movs	r2, #250	; 0xfa
 8006bc0:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d027      	beq.n	8006c1c <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d011      	beq.n	8006bfe <lwip_netconn_do_bind+0x6a>
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d000      	beq.n	8006be0 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8006bde:	e01d      	b.n	8006c1c <lwip_netconn_do_bind+0x88>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6858      	ldr	r0, [r3, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6899      	ldr	r1, [r3, #8]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	899b      	ldrh	r3, [r3, #12]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f00c f862 	bl	8012cb8 <udp_bind>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	711a      	strb	r2, [r3, #4]
        break;
 8006bfc:	e00e      	b.n	8006c1c <lwip_netconn_do_bind+0x88>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6858      	ldr	r0, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6899      	ldr	r1, [r3, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	899b      	ldrh	r3, [r3, #12]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f006 fd3f 	bl	800d690 <tcp_bind>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	711a      	strb	r2, [r3, #4]
        break;
 8006c1a:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <lwip_netconn_do_bind+0xb6>
 8006c24:	f00c fc4a 	bl	80134bc <sys_arch_protect>
 8006c28:	60b8      	str	r0, [r7, #8]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006c32:	f113 0f0c 	cmn.w	r3, #12
 8006c36:	db05      	blt.n	8006c44 <lwip_netconn_do_bind+0xb0>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006c42:	721a      	strb	r2, [r3, #8]
 8006c44:	68b8      	ldr	r0, [r7, #8]
 8006c46:	f00c fc47 	bl	80134d8 <sys_arch_unprotect>
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006c68:	f113 0f0c 	cmn.w	r3, #12
 8006c6c:	da06      	bge.n	8006c7c <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	711a      	strb	r2, [r3, #4]
 8006c7a:	e090      	b.n	8006d9e <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	22f5      	movs	r2, #245	; 0xf5
 8006c80:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8088 	beq.w	8006d9e <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d17d      	bne.n	8006d98 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d16f      	bne.n	8006d86 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	7d1b      	ldrb	r3, [r3, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	22fa      	movs	r2, #250	; 0xfa
 8006cb6:	711a      	strb	r2, [r3, #4]
 8006cb8:	e071      	b.n	8006d9e <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8006cba:	23ff      	movs	r3, #255	; 0xff
 8006cbc:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f107 020f 	add.w	r2, r7, #15
 8006cc8:	7ef9      	ldrb	r1, [r7, #27]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f006 fd82 	bl	800d7d4 <tcp_listen_with_backlog_and_err>
 8006cd0:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d104      	bne.n	8006ce2 <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8006cd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	711a      	strb	r2, [r3, #4]
 8006ce0:	e05d      	b.n	8006d9e <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f00c fad7 	bl	801329c <sys_mbox_valid>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f00c fa32 	bl	8013164 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3310      	adds	r3, #16
 8006d06:	4618      	mov	r0, r3
 8006d08:	f00c fad9 	bl	80132be <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3314      	adds	r3, #20
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f00c fabf 	bl	801329c <sys_mbox_valid>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3314      	adds	r3, #20
 8006d2a:	2106      	movs	r1, #6
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f00c f9fb 	bl	8013128 <sys_mbox_new>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d118      	bne.n	8006d76 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f007 fc01 	bl	800e568 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4919      	ldr	r1, [pc, #100]	; (8006dd4 <lwip_netconn_do_listen+0x180>)
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f007 fc70 	bl	800e654 <tcp_accept>
 8006d74:	e013      	b.n	8006d9e <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8006d76:	6978      	ldr	r0, [r7, #20]
 8006d78:	f006 fb6c 	bl	800d454 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2200      	movs	r2, #0
 8006d82:	605a      	str	r2, [r3, #4]
 8006d84:	e00b      	b.n	8006d9e <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d106      	bne.n	8006d9e <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2200      	movs	r2, #0
 8006d94:	711a      	strb	r2, [r3, #4]
 8006d96:	e002      	b.n	8006d9e <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	22f0      	movs	r2, #240	; 0xf0
 8006d9c:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d012      	beq.n	8006dcc <lwip_netconn_do_listen+0x178>
 8006da6:	f00c fb89 	bl	80134bc <sys_arch_protect>
 8006daa:	6138      	str	r0, [r7, #16]
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006db4:	f113 0f0c 	cmn.w	r3, #12
 8006db8:	db05      	blt.n	8006dc6 <lwip_netconn_do_listen+0x172>
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006dc4:	721a      	strb	r2, [r3, #8]
 8006dc6:	6938      	ldr	r0, [r7, #16]
 8006dc8:	f00c fb86 	bl	80134d8 <sys_arch_unprotect>
}
 8006dcc:	bf00      	nop
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	080061b9 	.word	0x080061b9

08006dd8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2200      	movs	r2, #0
 8006de8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d022      	beq.n	8006e3a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d11b      	bne.n	8006e3a <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0e:	d202      	bcs.n	8006e16 <lwip_netconn_do_recv+0x3e>
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	e001      	b.n	8006e1a <lwip_netconn_do_recv+0x42>
 8006e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e1a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	89fa      	ldrh	r2, [r7, #14]
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f006 fdbc 	bl	800d9a4 <tcp_recved>
        remaining -= recved;
 8006e2c:	89fb      	ldrh	r3, [r7, #14]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e6      	bne.n	8006e08 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d012      	beq.n	8006e68 <lwip_netconn_do_recv+0x90>
 8006e42:	f00c fb3b 	bl	80134bc <sys_arch_protect>
 8006e46:	60b8      	str	r0, [r7, #8]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006e50:	f113 0f0c 	cmn.w	r3, #12
 8006e54:	db05      	blt.n	8006e62 <lwip_netconn_do_recv+0x8a>
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006e60:	721a      	strb	r2, [r3, #8]
 8006e62:	68b8      	ldr	r0, [r7, #8]
 8006e64:	f00c fb38 	bl	80134d8 <sys_arch_unprotect>
}
 8006e68:	bf00      	nop
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <lwip_netconn_do_writemore+0x26>
 8006e88:	4ba2      	ldr	r3, [pc, #648]	; (8007114 <lwip_netconn_do_writemore+0x2a4>)
 8006e8a:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8006e8e:	49a2      	ldr	r1, [pc, #648]	; (8007118 <lwip_netconn_do_writemore+0x2a8>)
 8006e90:	48a2      	ldr	r0, [pc, #648]	; (800711c <lwip_netconn_do_writemore+0x2ac>)
 8006e92:	f00d fa9b 	bl	80143cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d006      	beq.n	8006eac <lwip_netconn_do_writemore+0x3c>
 8006e9e:	4b9d      	ldr	r3, [pc, #628]	; (8007114 <lwip_netconn_do_writemore+0x2a4>)
 8006ea0:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8006ea4:	499e      	ldr	r1, [pc, #632]	; (8007120 <lwip_netconn_do_writemore+0x2b0>)
 8006ea6:	489d      	ldr	r0, [pc, #628]	; (800711c <lwip_netconn_do_writemore+0x2ac>)
 8006ea8:	f00d fa90 	bl	80143cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <lwip_netconn_do_writemore+0x52>
 8006eb4:	4b97      	ldr	r3, [pc, #604]	; (8007114 <lwip_netconn_do_writemore+0x2a4>)
 8006eb6:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8006eba:	499a      	ldr	r1, [pc, #616]	; (8007124 <lwip_netconn_do_writemore+0x2b4>)
 8006ebc:	4897      	ldr	r0, [pc, #604]	; (800711c <lwip_netconn_do_writemore+0x2ac>)
 8006ebe:	f00d fa85 	bl	80143cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <lwip_netconn_do_writemore+0x68>
 8006eca:	4b92      	ldr	r3, [pc, #584]	; (8007114 <lwip_netconn_do_writemore+0x2a4>)
 8006ecc:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8006ed0:	4995      	ldr	r1, [pc, #596]	; (8007128 <lwip_netconn_do_writemore+0x2b8>)
 8006ed2:	4892      	ldr	r0, [pc, #584]	; (800711c <lwip_netconn_do_writemore+0x2ac>)
 8006ed4:	f00d fa7a 	bl	80143cc <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d306      	bcc.n	8006ef4 <lwip_netconn_do_writemore+0x84>
 8006ee6:	4b8b      	ldr	r3, [pc, #556]	; (8007114 <lwip_netconn_do_writemore+0x2a4>)
 8006ee8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8006eec:	498f      	ldr	r1, [pc, #572]	; (800712c <lwip_netconn_do_writemore+0x2bc>)
 8006eee:	488b      	ldr	r0, [pc, #556]	; (800711c <lwip_netconn_do_writemore+0x2ac>)
 8006ef0:	f00d fa6c 	bl	80143cc <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	7c1b      	ldrb	r3, [r3, #16]
 8006efa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7f1b      	ldrb	r3, [r3, #28]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <lwip_netconn_do_writemore+0xa6>
 8006f0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <lwip_netconn_do_writemore+0xaa>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <lwip_netconn_do_writemore+0xac>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f42:	d309      	bcc.n	8006f58 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8006f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f48:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8006f4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f4e:	f043 0302 	orr.w	r3, r3, #2
 8006f52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f56:	e001      	b.n	8006f5c <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f64:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8006f66:	8afa      	ldrh	r2, [r7, #22]
 8006f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d212      	bcs.n	8006f94 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8006f6e:	8afb      	ldrh	r3, [r7, #22]
 8006f70:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8006f72:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8006f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8006f80:	23f9      	movs	r3, #249	; 0xf9
 8006f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8006f86:	e029      	b.n	8006fdc <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006f88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f8c:	f043 0302 	orr.w	r3, r3, #2
 8006f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1a      	ldr	r2, [r3, #32]
 8006f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d906      	bls.n	8006fb4 <lwip_netconn_do_writemore+0x144>
 8006fa6:	4b5b      	ldr	r3, [pc, #364]	; (8007114 <lwip_netconn_do_writemore+0x2a4>)
 8006fa8:	f240 6213 	movw	r2, #1555	; 0x613
 8006fac:	4960      	ldr	r1, [pc, #384]	; (8007130 <lwip_netconn_do_writemore+0x2c0>)
 8006fae:	485b      	ldr	r0, [pc, #364]	; (800711c <lwip_netconn_do_writemore+0x2ac>)
 8006fb0:	f00d fa0c 	bl	80143cc <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6858      	ldr	r0, [r3, #4]
 8006fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fbe:	69f9      	ldr	r1, [r7, #28]
 8006fc0:	f00a f912 	bl	80111e8 <tcp_write>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <lwip_netconn_do_writemore+0x16c>
 8006fd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fda:	d132      	bne.n	8007042 <lwip_netconn_do_writemore+0x1d2>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8006fdc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d017      	beq.n	8007014 <lwip_netconn_do_writemore+0x1a4>
 8006fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d211      	bcs.n	8007014 <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <lwip_netconn_do_writemore+0x194>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ffe:	2103      	movs	r1, #3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7f1b      	ldrb	r3, [r3, #28]
 8007008:	f043 0310 	orr.w	r3, r3, #16
 800700c:	b2da      	uxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	771a      	strb	r2, [r3, #28]
 8007012:	e016      	b.n	8007042 <lwip_netconn_do_writemore+0x1d2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800701c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007020:	d305      	bcc.n	800702e <lwip_netconn_do_writemore+0x1be>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800702a:	2b04      	cmp	r3, #4
 800702c:	d909      	bls.n	8007042 <lwip_netconn_do_writemore+0x1d2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <lwip_netconn_do_writemore+0x1d2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800703c:	2103      	movs	r1, #3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8007042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007046:	2b00      	cmp	r3, #0
 8007048:	d134      	bne.n	80070b4 <lwip_netconn_do_writemore+0x244>
      err_t out_err;
      conn->write_offset += len;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007050:	441a      	add	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1a      	ldr	r2, [r3, #32]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	429a      	cmp	r2, r3
 8007062:	d003      	beq.n	800706c <lwip_netconn_do_writemore+0x1fc>
 8007064:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <lwip_netconn_do_writemore+0x20c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6a12      	ldr	r2, [r2, #32]
 8007074:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	f00a fd67 	bl	8011b54 <tcp_output>
 8007086:	4603      	mov	r3, r0
 8007088:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800708a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800708e:	f113 0f0c 	cmn.w	r3, #12
 8007092:	db04      	blt.n	800709e <lwip_netconn_do_writemore+0x22e>
 8007094:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007098:	f113 0f04 	cmn.w	r3, #4
 800709c:	d151      	bne.n	8007142 <lwip_netconn_do_writemore+0x2d2>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800709e:	7d7b      	ldrb	r3, [r7, #21]
 80070a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2200      	movs	r2, #0
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	e046      	b.n	8007142 <lwip_netconn_do_writemore+0x2d2>
      }
    } else if (err == ERR_MEM) {
 80070b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070bc:	d13a      	bne.n	8007134 <lwip_netconn_do_writemore+0x2c4>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f00a fd46 	bl	8011b54 <tcp_output>
 80070c8:	4603      	mov	r3, r0
 80070ca:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80070cc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80070d0:	f113 0f0c 	cmn.w	r3, #12
 80070d4:	db04      	blt.n	80070e0 <lwip_netconn_do_writemore+0x270>
 80070d6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80070da:	f113 0f04 	cmn.w	r3, #4
 80070de:	d10a      	bne.n	80070f6 <lwip_netconn_do_writemore+0x286>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80070e0:	7d3b      	ldrb	r3, [r7, #20]
 80070e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2200      	movs	r2, #0
 80070f2:	60da      	str	r2, [r3, #12]
 80070f4:	e025      	b.n	8007142 <lwip_netconn_do_writemore+0x2d2>
      } else if (dontblock) {
 80070f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d021      	beq.n	8007142 <lwip_netconn_do_writemore+0x2d2>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 80070fe:	23f9      	movs	r3, #249	; 0xf9
 8007100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	2200      	movs	r2, #0
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	e016      	b.n	8007142 <lwip_netconn_do_writemore+0x2d2>
 8007114:	08015544 	.word	0x08015544
 8007118:	08015668 	.word	0x08015668
 800711c:	0801559c 	.word	0x0801559c
 8007120:	08015948 	.word	0x08015948
 8007124:	08015678 	.word	0x08015678
 8007128:	08015968 	.word	0x08015968
 800712c:	08015980 	.word	0x08015980
 8007130:	080159b4 	.word	0x080159b4
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2200      	movs	r2, #0
 8007140:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8007142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02c      	beq.n	80071a4 <lwip_netconn_do_writemore+0x334>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800715c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00f      	beq.n	8007196 <lwip_netconn_do_writemore+0x326>
 8007176:	f00c f9a1 	bl	80134bc <sys_arch_protect>
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007182:	f113 0f0c 	cmn.w	r3, #12
 8007186:	db03      	blt.n	8007190 <lwip_netconn_do_writemore+0x320>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800718e:	721a      	strb	r2, [r3, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f00c f9a1 	bl	80134d8 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d006      	beq.n	80071aa <lwip_netconn_do_writemore+0x33a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800719c:	6938      	ldr	r0, [r7, #16]
 800719e:	f00c f8f2 	bl	8013386 <sys_sem_signal>
 80071a2:	e002      	b.n	80071aa <lwip_netconn_do_writemore+0x33a>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a8:	e000      	b.n	80071ac <lwip_netconn_do_writemore+0x33c>
  }
#endif
  return ERR_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3728      	adds	r7, #40	; 0x28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80071c8:	f113 0f0c 	cmn.w	r3, #12
 80071cc:	da06      	bge.n	80071dc <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	711a      	strb	r2, [r3, #4]
 80071da:	e072      	b.n	80072c2 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d168      	bne.n	80072bc <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	22fb      	movs	r2, #251	; 0xfb
 80071f8:	711a      	strb	r2, [r3, #4]
 80071fa:	e062      	b.n	80072c2 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d056      	beq.n	80072b4 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2201      	movs	r2, #1
 800720c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <lwip_netconn_do_write+0x6e>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <lwip_netconn_do_write+0x7c>
 8007222:	4b36      	ldr	r3, [pc, #216]	; (80072fc <lwip_netconn_do_write+0x148>)
 8007224:	f240 6283 	movw	r2, #1667	; 0x683
 8007228:	4935      	ldr	r1, [pc, #212]	; (8007300 <lwip_netconn_do_write+0x14c>)
 800722a:	4836      	ldr	r0, [pc, #216]	; (8007304 <lwip_netconn_do_write+0x150>)
 800722c:	f00d f8ce 	bl	80143cc <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <lwip_netconn_do_write+0x92>
 8007238:	4b30      	ldr	r3, [pc, #192]	; (80072fc <lwip_netconn_do_write+0x148>)
 800723a:	f240 6284 	movw	r2, #1668	; 0x684
 800723e:	4932      	ldr	r1, [pc, #200]	; (8007308 <lwip_netconn_do_write+0x154>)
 8007240:	4830      	ldr	r0, [pc, #192]	; (8007304 <lwip_netconn_do_write+0x150>)
 8007242:	f00d f8c3 	bl	80143cc <iprintf>
        msg->conn->current_msg = msg;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fe07 	bl	8006e70 <lwip_netconn_do_writemore>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d044      	beq.n	80072f2 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d006      	beq.n	8007280 <lwip_netconn_do_write+0xcc>
 8007272:	4b22      	ldr	r3, [pc, #136]	; (80072fc <lwip_netconn_do_write+0x148>)
 8007274:	f240 6289 	movw	r2, #1673	; 0x689
 8007278:	4924      	ldr	r1, [pc, #144]	; (800730c <lwip_netconn_do_write+0x158>)
 800727a:	4822      	ldr	r0, [pc, #136]	; (8007304 <lwip_netconn_do_write+0x150>)
 800727c:	f00d f8a6 	bl	80143cc <iprintf>
          UNLOCK_TCPIP_CORE();
 8007280:	4823      	ldr	r0, [pc, #140]	; (8007310 <lwip_netconn_do_write+0x15c>)
 8007282:	f00c f8f0 	bl	8013466 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f00c f848 	bl	8013324 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8007294:	481e      	ldr	r0, [pc, #120]	; (8007310 <lwip_netconn_do_write+0x15c>)
 8007296:	f00c f8d7 	bl	8013448 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d126      	bne.n	80072f2 <lwip_netconn_do_write+0x13e>
 80072a4:	4b15      	ldr	r3, [pc, #84]	; (80072fc <lwip_netconn_do_write+0x148>)
 80072a6:	f240 628d 	movw	r2, #1677	; 0x68d
 80072aa:	4918      	ldr	r1, [pc, #96]	; (800730c <lwip_netconn_do_write+0x158>)
 80072ac:	4815      	ldr	r0, [pc, #84]	; (8007304 <lwip_netconn_do_write+0x150>)
 80072ae:	f00d f88d 	bl	80143cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80072b2:	e01e      	b.n	80072f2 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	22f5      	movs	r2, #245	; 0xf5
 80072b8:	711a      	strb	r2, [r3, #4]
 80072ba:	e002      	b.n	80072c2 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	22fa      	movs	r2, #250	; 0xfa
 80072c0:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d014      	beq.n	80072f4 <lwip_netconn_do_write+0x140>
 80072ca:	f00c f8f7 	bl	80134bc <sys_arch_protect>
 80072ce:	60b8      	str	r0, [r7, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80072d8:	f113 0f0c 	cmn.w	r3, #12
 80072dc:	db05      	blt.n	80072ea <lwip_netconn_do_write+0x136>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80072e8:	721a      	strb	r2, [r3, #8]
 80072ea:	68b8      	ldr	r0, [r7, #8]
 80072ec:	f00c f8f4 	bl	80134d8 <sys_arch_unprotect>
 80072f0:	e000      	b.n	80072f4 <lwip_netconn_do_write+0x140>
        return;
 80072f2:	bf00      	nop
}
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	08015544 	.word	0x08015544
 8007300:	0801588c 	.word	0x0801588c
 8007304:	0801559c 	.word	0x0801559c
 8007308:	080159e0 	.word	0x080159e0
 800730c:	080158a8 	.word	0x080158a8
 8007310:	20003fdc 	.word	0x20003fdc

08007314 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d06e      	beq.n	8007410 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800733c:	2b10      	cmp	r3, #16
 800733e:	d167      	bne.n	8007410 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8007344:	2b03      	cmp	r3, #3
 8007346:	d002      	beq.n	800734e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007348:	7cfb      	ldrb	r3, [r7, #19]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d060      	beq.n	8007410 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800734e:	7cfb      	ldrb	r3, [r7, #19]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d103      	bne.n	800735c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	22f5      	movs	r2, #245	; 0xf5
 8007358:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800735a:	e05c      	b.n	8007416 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800735c:	7cfb      	ldrb	r3, [r7, #19]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d103      	bne.n	800736a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	22fb      	movs	r2, #251	; 0xfb
 8007366:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8007368:	e055      	b.n	8007416 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	7a1b      	ldrb	r3, [r3, #8]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff f910 	bl	80065a0 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <lwip_netconn_do_close+0x80>
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <lwip_netconn_do_close+0x8e>
 8007394:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <lwip_netconn_do_close+0x13c>)
 8007396:	f240 721c 	movw	r2, #1820	; 0x71c
 800739a:	492e      	ldr	r1, [pc, #184]	; (8007454 <lwip_netconn_do_close+0x140>)
 800739c:	482e      	ldr	r0, [pc, #184]	; (8007458 <lwip_netconn_do_close+0x144>)
 800739e:	f00d f815 	bl	80143cc <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2204      	movs	r2, #4
 80073a8:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff f971 	bl	80066a0 <lwip_netconn_do_close_internal>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d040      	beq.n	8007446 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d006      	beq.n	80073dc <lwip_netconn_do_close+0xc8>
 80073ce:	4b20      	ldr	r3, [pc, #128]	; (8007450 <lwip_netconn_do_close+0x13c>)
 80073d0:	f240 7221 	movw	r2, #1825	; 0x721
 80073d4:	4921      	ldr	r1, [pc, #132]	; (800745c <lwip_netconn_do_close+0x148>)
 80073d6:	4820      	ldr	r0, [pc, #128]	; (8007458 <lwip_netconn_do_close+0x144>)
 80073d8:	f00c fff8 	bl	80143cc <iprintf>
        UNLOCK_TCPIP_CORE();
 80073dc:	4820      	ldr	r0, [pc, #128]	; (8007460 <lwip_netconn_do_close+0x14c>)
 80073de:	f00c f842 	bl	8013466 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	2100      	movs	r1, #0
 80073ea:	4618      	mov	r0, r3
 80073ec:	f00b ff9a 	bl	8013324 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80073f0:	481b      	ldr	r0, [pc, #108]	; (8007460 <lwip_netconn_do_close+0x14c>)
 80073f2:	f00c f829 	bl	8013448 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d022      	beq.n	8007446 <lwip_netconn_do_close+0x132>
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <lwip_netconn_do_close+0x13c>)
 8007402:	f240 7225 	movw	r2, #1829	; 0x725
 8007406:	4915      	ldr	r1, [pc, #84]	; (800745c <lwip_netconn_do_close+0x148>)
 8007408:	4813      	ldr	r0, [pc, #76]	; (8007458 <lwip_netconn_do_close+0x144>)
 800740a:	f00c ffdf 	bl	80143cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800740e:	e01a      	b.n	8007446 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	22f5      	movs	r2, #245	; 0xf5
 8007414:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d014      	beq.n	8007448 <lwip_netconn_do_close+0x134>
 800741e:	f00c f84d 	bl	80134bc <sys_arch_protect>
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800742c:	f113 0f0c 	cmn.w	r3, #12
 8007430:	db05      	blt.n	800743e <lwip_netconn_do_close+0x12a>
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800743c:	721a      	strb	r2, [r3, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f00c f84a 	bl	80134d8 <sys_arch_unprotect>
 8007444:	e000      	b.n	8007448 <lwip_netconn_do_close+0x134>
      return;
 8007446:	bf00      	nop
}
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	08015544 	.word	0x08015544
 8007454:	0801588c 	.word	0x0801588c
 8007458:	0801559c 	.word	0x0801559c
 800745c:	080158a8 	.word	0x080158a8
 8007460:	20003fdc 	.word	0x20003fdc

08007464 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d013      	beq.n	800749a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f005 fba4 	bl	800cbcc <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	2006      	movs	r0, #6
 8007496:	f004 fe37 	bl	800c108 <memp_free>
  }
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d108      	bne.n	80074c8 <netbuf_data+0x24>
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <netbuf_data+0x80>)
 80074b8:	22c2      	movs	r2, #194	; 0xc2
 80074ba:	491b      	ldr	r1, [pc, #108]	; (8007528 <netbuf_data+0x84>)
 80074bc:	481b      	ldr	r0, [pc, #108]	; (800752c <netbuf_data+0x88>)
 80074be:	f00c ff85 	bl	80143cc <iprintf>
 80074c2:	f06f 030f 	mvn.w	r3, #15
 80074c6:	e029      	b.n	800751c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d108      	bne.n	80074e0 <netbuf_data+0x3c>
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <netbuf_data+0x80>)
 80074d0:	22c3      	movs	r2, #195	; 0xc3
 80074d2:	4917      	ldr	r1, [pc, #92]	; (8007530 <netbuf_data+0x8c>)
 80074d4:	4815      	ldr	r0, [pc, #84]	; (800752c <netbuf_data+0x88>)
 80074d6:	f00c ff79 	bl	80143cc <iprintf>
 80074da:	f06f 030f 	mvn.w	r3, #15
 80074de:	e01d      	b.n	800751c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <netbuf_data+0x54>
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <netbuf_data+0x80>)
 80074e8:	22c4      	movs	r2, #196	; 0xc4
 80074ea:	4912      	ldr	r1, [pc, #72]	; (8007534 <netbuf_data+0x90>)
 80074ec:	480f      	ldr	r0, [pc, #60]	; (800752c <netbuf_data+0x88>)
 80074ee:	f00c ff6d 	bl	80143cc <iprintf>
 80074f2:	f06f 030f 	mvn.w	r3, #15
 80074f6:	e011      	b.n	800751c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <netbuf_data+0x62>
    return ERR_BUF;
 8007500:	f06f 0301 	mvn.w	r3, #1
 8007504:	e00a      	b.n	800751c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	895a      	ldrh	r2, [r3, #10]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	08015a0c 	.word	0x08015a0c
 8007528:	08015b14 	.word	0x08015b14
 800752c:	08015a5c 	.word	0x08015a5c
 8007530:	08015b30 	.word	0x08015b30
 8007534:	08015b50 	.word	0x08015b50

08007538 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <netbuf_next+0x20>
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <netbuf_next+0x54>)
 8007548:	22dc      	movs	r2, #220	; 0xdc
 800754a:	4911      	ldr	r1, [pc, #68]	; (8007590 <netbuf_next+0x58>)
 800754c:	4811      	ldr	r0, [pc, #68]	; (8007594 <netbuf_next+0x5c>)
 800754e:	f00c ff3d 	bl	80143cc <iprintf>
 8007552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007556:	e014      	b.n	8007582 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <netbuf_next+0x30>
    return -1;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007566:	e00c      	b.n	8007582 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <netbuf_next+0x48>
    return 1;
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <netbuf_next+0x4a>
  }
  return 0;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	08015a0c 	.word	0x08015a0c
 8007590:	08015b6c 	.word	0x08015b6c
 8007594:	08015a5c 	.word	0x08015a5c

08007598 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80075a0:	4b29      	ldr	r3, [pc, #164]	; (8007648 <tcpip_thread+0xb0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 80075a8:	4b27      	ldr	r3, [pc, #156]	; (8007648 <tcpip_thread+0xb0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a27      	ldr	r2, [pc, #156]	; (800764c <tcpip_thread+0xb4>)
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 80075b4:	4826      	ldr	r0, [pc, #152]	; (8007650 <tcpip_thread+0xb8>)
 80075b6:	f00b ff47 	bl	8013448 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80075ba:	4825      	ldr	r0, [pc, #148]	; (8007650 <tcpip_thread+0xb8>)
 80075bc:	f00b ff53 	bl	8013466 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80075c0:	f107 030c 	add.w	r3, r7, #12
 80075c4:	4619      	mov	r1, r3
 80075c6:	4823      	ldr	r0, [pc, #140]	; (8007654 <tcpip_thread+0xbc>)
 80075c8:	f00b f916 	bl	80127f8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 80075cc:	4820      	ldr	r0, [pc, #128]	; (8007650 <tcpip_thread+0xb8>)
 80075ce:	f00b ff3b 	bl	8013448 <sys_mutex_lock>
    if (msg == NULL) {
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80075d8:	4b1f      	ldr	r3, [pc, #124]	; (8007658 <tcpip_thread+0xc0>)
 80075da:	2269      	movs	r2, #105	; 0x69
 80075dc:	491f      	ldr	r1, [pc, #124]	; (800765c <tcpip_thread+0xc4>)
 80075de:	4820      	ldr	r0, [pc, #128]	; (8007660 <tcpip_thread+0xc8>)
 80075e0:	f00c fef4 	bl	80143cc <iprintf>
      continue;
 80075e4:	e02f      	b.n	8007646 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d011      	beq.n	8007612 <tcpip_thread+0x7a>
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d01b      	beq.n	800762a <tcpip_thread+0x92>
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d120      	bne.n	8007638 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	6850      	ldr	r0, [r2, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	6892      	ldr	r2, [r2, #8]
 8007602:	4611      	mov	r1, r2
 8007604:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4619      	mov	r1, r3
 800760a:	2009      	movs	r0, #9
 800760c:	f004 fd7c 	bl	800c108 <memp_free>
      break;
 8007610:	e019      	b.n	8007646 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	6892      	ldr	r2, [r2, #8]
 800761a:	4610      	mov	r0, r2
 800761c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4619      	mov	r1, r3
 8007622:	2008      	movs	r0, #8
 8007624:	f004 fd70 	bl	800c108 <memp_free>
      break;
 8007628:	e00d      	b.n	8007646 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	6892      	ldr	r2, [r2, #8]
 8007632:	4610      	mov	r0, r2
 8007634:	4798      	blx	r3
      break;
 8007636:	e006      	b.n	8007646 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007638:	4b07      	ldr	r3, [pc, #28]	; (8007658 <tcpip_thread+0xc0>)
 800763a:	229b      	movs	r2, #155	; 0x9b
 800763c:	4907      	ldr	r1, [pc, #28]	; (800765c <tcpip_thread+0xc4>)
 800763e:	4808      	ldr	r0, [pc, #32]	; (8007660 <tcpip_thread+0xc8>)
 8007640:	f00c fec4 	bl	80143cc <iprintf>
      break;
 8007644:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8007646:	e7b8      	b.n	80075ba <tcpip_thread+0x22>
 8007648:	20003de8 	.word	0x20003de8
 800764c:	20003dec 	.word	0x20003dec
 8007650:	20003fdc 	.word	0x20003fdc
 8007654:	20003df0 	.word	0x20003df0
 8007658:	08015ba4 	.word	0x08015ba4
 800765c:	08015bd4 	.word	0x08015bd4
 8007660:	08015bf4 	.word	0x08015bf4

08007664 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8007670:	481a      	ldr	r0, [pc, #104]	; (80076dc <tcpip_inpkt+0x78>)
 8007672:	f00b fe13 	bl	801329c <sys_mbox_valid>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <tcpip_inpkt+0x24>
 800767c:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <tcpip_inpkt+0x7c>)
 800767e:	22b5      	movs	r2, #181	; 0xb5
 8007680:	4918      	ldr	r1, [pc, #96]	; (80076e4 <tcpip_inpkt+0x80>)
 8007682:	4819      	ldr	r0, [pc, #100]	; (80076e8 <tcpip_inpkt+0x84>)
 8007684:	f00c fea2 	bl	80143cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007688:	2009      	movs	r0, #9
 800768a:	f004 fceb 	bl	800c064 <memp_malloc>
 800768e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800769a:	e01a      	b.n	80076d2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2202      	movs	r2, #2
 80076a0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80076b4:	6979      	ldr	r1, [r7, #20]
 80076b6:	4809      	ldr	r0, [pc, #36]	; (80076dc <tcpip_inpkt+0x78>)
 80076b8:	f00b fd7b 	bl	80131b2 <sys_mbox_trypost>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d006      	beq.n	80076d0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	2009      	movs	r0, #9
 80076c6:	f004 fd1f 	bl	800c108 <memp_free>
    return ERR_MEM;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ce:	e000      	b.n	80076d2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80076d0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20003df0 	.word	0x20003df0
 80076e0:	08015ba4 	.word	0x08015ba4
 80076e4:	08015c1c 	.word	0x08015c1c
 80076e8:	08015bf4 	.word	0x08015bf4

080076ec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076fc:	f003 0318 	and.w	r3, r3, #24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007704:	4a08      	ldr	r2, [pc, #32]	; (8007728 <tcpip_input+0x3c>)
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff ffab 	bl	8007664 <tcpip_inpkt>
 800770e:	4603      	mov	r3, r0
 8007710:	e005      	b.n	800771e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8007712:	4a06      	ldr	r2, [pc, #24]	; (800772c <tcpip_input+0x40>)
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff ffa4 	bl	8007664 <tcpip_inpkt>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	08012f75 	.word	0x08012f75
 800772c:	0800a899 	.word	0x0800a899

08007730 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800773e:	481d      	ldr	r0, [pc, #116]	; (80077b4 <tcpip_callback_with_block+0x84>)
 8007740:	f00b fdac 	bl	801329c <sys_mbox_valid>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d105      	bne.n	8007756 <tcpip_callback_with_block+0x26>
 800774a:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <tcpip_callback_with_block+0x88>)
 800774c:	22ee      	movs	r2, #238	; 0xee
 800774e:	491b      	ldr	r1, [pc, #108]	; (80077bc <tcpip_callback_with_block+0x8c>)
 8007750:	481b      	ldr	r0, [pc, #108]	; (80077c0 <tcpip_callback_with_block+0x90>)
 8007752:	f00c fe3b 	bl	80143cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007756:	2008      	movs	r0, #8
 8007758:	f004 fc84 	bl	800c064 <memp_malloc>
 800775c:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d102      	bne.n	800776a <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8007764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007768:	e01f      	b.n	80077aa <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2203      	movs	r2, #3
 800776e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	609a      	str	r2, [r3, #8]
  if (block) {
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d004      	beq.n	800778c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8007782:	6979      	ldr	r1, [r7, #20]
 8007784:	480b      	ldr	r0, [pc, #44]	; (80077b4 <tcpip_callback_with_block+0x84>)
 8007786:	f00b fcff 	bl	8013188 <sys_mbox_post>
 800778a:	e00d      	b.n	80077a8 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800778c:	6979      	ldr	r1, [r7, #20]
 800778e:	4809      	ldr	r0, [pc, #36]	; (80077b4 <tcpip_callback_with_block+0x84>)
 8007790:	f00b fd0f 	bl	80131b2 <sys_mbox_trypost>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d006      	beq.n	80077a8 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	2008      	movs	r0, #8
 800779e:	f004 fcb3 	bl	800c108 <memp_free>
      return ERR_MEM;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077a6:	e000      	b.n	80077aa <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20003df0 	.word	0x20003df0
 80077b8:	08015ba4 	.word	0x08015ba4
 80077bc:	08015c1c 	.word	0x08015c1c
 80077c0:	08015bf4 	.word	0x08015bf4

080077c4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80077d0:	4806      	ldr	r0, [pc, #24]	; (80077ec <tcpip_send_msg_wait_sem+0x28>)
 80077d2:	f00b fe39 	bl	8013448 <sys_mutex_lock>
  fn(apimsg);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68b8      	ldr	r0, [r7, #8]
 80077da:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80077dc:	4803      	ldr	r0, [pc, #12]	; (80077ec <tcpip_send_msg_wait_sem+0x28>)
 80077de:	f00b fe42 	bl	8013466 <sys_mutex_unlock>
  return ERR_OK;
 80077e2:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20003fdc 	.word	0x20003fdc

080077f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80077fa:	f000 f86a 	bl	80078d2 <lwip_init>

  tcpip_init_done = initfunc;
 80077fe:	4a17      	ldr	r2, [pc, #92]	; (800785c <tcpip_init+0x6c>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007804:	4a16      	ldr	r2, [pc, #88]	; (8007860 <tcpip_init+0x70>)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800780a:	2106      	movs	r1, #6
 800780c:	4815      	ldr	r0, [pc, #84]	; (8007864 <tcpip_init+0x74>)
 800780e:	f00b fc8b 	bl	8013128 <sys_mbox_new>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d006      	beq.n	8007826 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <tcpip_init+0x78>)
 800781a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800781e:	4913      	ldr	r1, [pc, #76]	; (800786c <tcpip_init+0x7c>)
 8007820:	4813      	ldr	r0, [pc, #76]	; (8007870 <tcpip_init+0x80>)
 8007822:	f00c fdd3 	bl	80143cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007826:	4813      	ldr	r0, [pc, #76]	; (8007874 <tcpip_init+0x84>)
 8007828:	f00b fdf4 	bl	8013414 <sys_mutex_new>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007832:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <tcpip_init+0x78>)
 8007834:	f240 12d9 	movw	r2, #473	; 0x1d9
 8007838:	490f      	ldr	r1, [pc, #60]	; (8007878 <tcpip_init+0x88>)
 800783a:	480d      	ldr	r0, [pc, #52]	; (8007870 <tcpip_init+0x80>)
 800783c:	f00c fdc6 	bl	80143cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007840:	2303      	movs	r3, #3
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007848:	2200      	movs	r2, #0
 800784a:	490c      	ldr	r1, [pc, #48]	; (800787c <tcpip_init+0x8c>)
 800784c:	480c      	ldr	r0, [pc, #48]	; (8007880 <tcpip_init+0x90>)
 800784e:	f00b fe17 	bl	8013480 <sys_thread_new>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20003de8 	.word	0x20003de8
 8007860:	20003dec 	.word	0x20003dec
 8007864:	20003df0 	.word	0x20003df0
 8007868:	08015ba4 	.word	0x08015ba4
 800786c:	08015c2c 	.word	0x08015c2c
 8007870:	08015bf4 	.word	0x08015bf4
 8007874:	20003fdc 	.word	0x20003fdc
 8007878:	08015c50 	.word	0x08015c50
 800787c:	08007599 	.word	0x08007599
 8007880:	08015c74 	.word	0x08015c74

08007884 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	ba5b      	rev16	r3, r3
 8007892:	b29b      	uxth	r3, r3
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	061a      	lsls	r2, r3, #24
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0a1b      	lsrs	r3, r3, #8
 80078ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	0e1b      	lsrs	r3, r3, #24
 80078c4:	4313      	orrs	r3, r2
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80078dc:	f00b fd8c 	bl	80133f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80078e0:	f004 f8a8 	bl	800ba34 <mem_init>
  memp_init();
 80078e4:	f004 fb72 	bl	800bfcc <memp_init>
  pbuf_init();
  netif_init();
 80078e8:	f004 fc38 	bl	800c15c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80078ec:	f00a ffaa 	bl	8012844 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80078f0:	f005 fbf2 	bl	800d0d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80078f4:	f00a fe3c 	bl	8012570 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8007904:	4b20      	ldr	r3, [pc, #128]	; (8007988 <dhcp_inc_pcb_refcount+0x88>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d133      	bne.n	8007974 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800790c:	4b1f      	ldr	r3, [pc, #124]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <dhcp_inc_pcb_refcount+0x20>
 8007914:	4b1e      	ldr	r3, [pc, #120]	; (8007990 <dhcp_inc_pcb_refcount+0x90>)
 8007916:	22d9      	movs	r2, #217	; 0xd9
 8007918:	491e      	ldr	r1, [pc, #120]	; (8007994 <dhcp_inc_pcb_refcount+0x94>)
 800791a:	481f      	ldr	r0, [pc, #124]	; (8007998 <dhcp_inc_pcb_refcount+0x98>)
 800791c:	f00c fd56 	bl	80143cc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8007920:	f00b fad4 	bl	8012ecc <udp_new>
 8007924:	4602      	mov	r2, r0
 8007926:	4b19      	ldr	r3, [pc, #100]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 8007928:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800792a:	4b18      	ldr	r3, [pc, #96]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007936:	e024      	b.n	8007982 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007938:	4b14      	ldr	r3, [pc, #80]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a13      	ldr	r2, [pc, #76]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	7a12      	ldrb	r2, [r2, #8]
 8007942:	f042 0220 	orr.w	r2, r2, #32
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2244      	movs	r2, #68	; 0x44
 8007950:	4912      	ldr	r1, [pc, #72]	; (800799c <dhcp_inc_pcb_refcount+0x9c>)
 8007952:	4618      	mov	r0, r3
 8007954:	f00b f9b0 	bl	8012cb8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8007958:	4b0c      	ldr	r3, [pc, #48]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2243      	movs	r2, #67	; 0x43
 800795e:	490f      	ldr	r1, [pc, #60]	; (800799c <dhcp_inc_pcb_refcount+0x9c>)
 8007960:	4618      	mov	r0, r3
 8007962:	f00b fa19 	bl	8012d98 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <dhcp_inc_pcb_refcount+0x8c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	490c      	ldr	r1, [pc, #48]	; (80079a0 <dhcp_inc_pcb_refcount+0xa0>)
 800796e:	4618      	mov	r0, r3
 8007970:	f00b fa68 	bl	8012e44 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <dhcp_inc_pcb_refcount+0x88>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <dhcp_inc_pcb_refcount+0x88>)
 800797e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20003df8 	.word	0x20003df8
 800798c:	20003df4 	.word	0x20003df4
 8007990:	08015c84 	.word	0x08015c84
 8007994:	08015cbc 	.word	0x08015cbc
 8007998:	08015ce4 	.word	0x08015ce4
 800799c:	08017ec0 	.word	0x08017ec0
 80079a0:	0800906d 	.word	0x0800906d

080079a4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <dhcp_dec_pcb_refcount+0x40>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <dhcp_dec_pcb_refcount+0x18>
 80079b0:	4b0d      	ldr	r3, [pc, #52]	; (80079e8 <dhcp_dec_pcb_refcount+0x44>)
 80079b2:	22f3      	movs	r2, #243	; 0xf3
 80079b4:	490d      	ldr	r1, [pc, #52]	; (80079ec <dhcp_dec_pcb_refcount+0x48>)
 80079b6:	480e      	ldr	r0, [pc, #56]	; (80079f0 <dhcp_dec_pcb_refcount+0x4c>)
 80079b8:	f00c fd08 	bl	80143cc <iprintf>
  dhcp_pcb_refcount--;
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <dhcp_dec_pcb_refcount+0x40>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <dhcp_dec_pcb_refcount+0x40>)
 80079c6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <dhcp_dec_pcb_refcount+0x40>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d107      	bne.n	80079e0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80079d0:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <dhcp_dec_pcb_refcount+0x50>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f00b fa47 	bl	8012e68 <udp_remove>
    dhcp_pcb = NULL;
 80079da:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <dhcp_dec_pcb_refcount+0x50>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
  }
}
 80079e0:	bf00      	nop
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20003df8 	.word	0x20003df8
 80079e8:	08015c84 	.word	0x08015c84
 80079ec:	08015d0c 	.word	0x08015d0c
 80079f0:	08015ce4 	.word	0x08015ce4
 80079f4:	20003df4 	.word	0x20003df4

080079f8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007a06:	210c      	movs	r1, #12
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 ff85 	bl	8008918 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <dhcp_handle_nak+0x30>)
 8007a10:	4a05      	ldr	r2, [pc, #20]	; (8007a28 <dhcp_handle_nak+0x30>)
 8007a12:	4905      	ldr	r1, [pc, #20]	; (8007a28 <dhcp_handle_nak+0x30>)
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f004 fc05 	bl	800c224 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fbb6 	bl	800818c <dhcp_discover>
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	08017ec0 	.word	0x08017ec0

08007a2c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8007a3a:	2108      	movs	r1, #8
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 ff6b 	bl	8008918 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3328      	adds	r3, #40	; 0x28
 8007a46:	2200      	movs	r2, #0
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f002 fb24 	bl	800a098 <etharp_query>
 8007a50:	4603      	mov	r3, r0
 8007a52:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	7a9b      	ldrb	r3, [r3, #10]
 8007a58:	2bff      	cmp	r3, #255	; 0xff
 8007a5a:	d005      	beq.n	8007a68 <dhcp_check+0x3c>
    dhcp->tries++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	7a9b      	ldrb	r3, [r3, #10]
 8007a60:	3301      	adds	r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8007a68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007a6c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8007a6e:	893b      	ldrh	r3, [r7, #8]
 8007a70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007a74:	4a06      	ldr	r2, [pc, #24]	; (8007a90 <dhcp_check+0x64>)
 8007a76:	fb82 1203 	smull	r1, r2, r2, r3
 8007a7a:	1152      	asrs	r2, r2, #5
 8007a7c:	17db      	asrs	r3, r3, #31
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	10624dd3 	.word	0x10624dd3

08007a94 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <dhcp_handle_offer+0x40>)
 8007aa4:	789b      	ldrb	r3, [r3, #2]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00f      	beq.n	8007aca <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <dhcp_handle_offer+0x44>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fef6 	bl	80078a0 <lwip_htonl>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f809 	bl	8007adc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20003ff8 	.word	0x20003ff8
 8007ad8:	20004000 	.word	0x20004000

08007adc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8007aea:	2101      	movs	r1, #1
 8007aec:	6938      	ldr	r0, [r7, #16]
 8007aee:	f000 ff13 	bl	8008918 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8007af2:	2203      	movs	r2, #3
 8007af4:	6939      	ldr	r1, [r7, #16]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fb9a 	bl	8009230 <dhcp_create_msg>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8007b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d159      	bne.n	8007bbc <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007b08:	2202      	movs	r2, #2
 8007b0a:	2139      	movs	r1, #57	; 0x39
 8007b0c:	6938      	ldr	r0, [r7, #16]
 8007b0e:	f000 ff1d 	bl	800894c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b16:	4619      	mov	r1, r3
 8007b18:	6938      	ldr	r0, [r7, #16]
 8007b1a:	f000 ff79 	bl	8008a10 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8007b1e:	2204      	movs	r2, #4
 8007b20:	2132      	movs	r1, #50	; 0x32
 8007b22:	6938      	ldr	r0, [r7, #16]
 8007b24:	f000 ff12 	bl	800894c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff feb7 	bl	80078a0 <lwip_htonl>
 8007b32:	4603      	mov	r3, r0
 8007b34:	4619      	mov	r1, r3
 8007b36:	6938      	ldr	r0, [r7, #16]
 8007b38:	f000 ffa6 	bl	8008a88 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	2136      	movs	r1, #54	; 0x36
 8007b40:	6938      	ldr	r0, [r7, #16]
 8007b42:	f000 ff03 	bl	800894c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fea8 	bl	80078a0 <lwip_htonl>
 8007b50:	4603      	mov	r3, r0
 8007b52:	4619      	mov	r1, r3
 8007b54:	6938      	ldr	r0, [r7, #16]
 8007b56:	f000 ff97 	bl	8008a88 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	2137      	movs	r1, #55	; 0x37
 8007b5e:	6938      	ldr	r0, [r7, #16]
 8007b60:	f000 fef4 	bl	800894c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]
 8007b68:	e009      	b.n	8007b7e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	4a29      	ldr	r2, [pc, #164]	; (8007c14 <dhcp_select+0x138>)
 8007b6e:	5cd3      	ldrb	r3, [r2, r3]
 8007b70:	4619      	mov	r1, r3
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f000 ff24 	bl	80089c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d9f2      	bls.n	8007b6a <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8007b84:	6938      	ldr	r0, [r7, #16]
 8007b86:	f001 fcf7 	bl	8009578 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	8a9b      	ldrh	r3, [r3, #20]
 8007b92:	33f0      	adds	r3, #240	; 0xf0
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f004 fea3 	bl	800c8e4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <dhcp_select+0x13c>)
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	68d9      	ldr	r1, [r3, #12]
 8007ba6:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <dhcp_select+0x140>)
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2343      	movs	r3, #67	; 0x43
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <dhcp_select+0x144>)
 8007bb2:	f00a ffe7 	bl	8012b84 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8007bb6:	6938      	ldr	r0, [r7, #16]
 8007bb8:	f001 fc9c 	bl	80094f4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	7a9b      	ldrb	r3, [r3, #10]
 8007bc0:	2bff      	cmp	r3, #255	; 0xff
 8007bc2:	d005      	beq.n	8007bd0 <dhcp_select+0xf4>
    dhcp->tries++;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	7a9b      	ldrb	r3, [r3, #10]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	7a9b      	ldrb	r3, [r3, #10]
 8007bd4:	2b05      	cmp	r3, #5
 8007bd6:	d807      	bhi.n	8007be8 <dhcp_select+0x10c>
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	7a9b      	ldrb	r3, [r3, #10]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007be2:	4093      	lsls	r3, r2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	e001      	b.n	8007bec <dhcp_select+0x110>
 8007be8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007bec:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8007bee:	89bb      	ldrh	r3, [r7, #12]
 8007bf0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007bf4:	4a0b      	ldr	r2, [pc, #44]	; (8007c24 <dhcp_select+0x148>)
 8007bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8007bfa:	1152      	asrs	r2, r2, #5
 8007bfc:	17db      	asrs	r3, r3, #31
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8007c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000008 	.word	0x20000008
 8007c18:	20003df4 	.word	0x20003df4
 8007c1c:	08017ec0 	.word	0x08017ec0
 8007c20:	08017ec4 	.word	0x08017ec4
 8007c24:	10624dd3 	.word	0x10624dd3

08007c28 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8007c2e:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <dhcp_coarse_tmr+0xa4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8007c34:	e042      	b.n	8007cbc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d039      	beq.n	8007cb6 <dhcp_coarse_tmr+0x8e>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	7a5b      	ldrb	r3, [r3, #9]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d035      	beq.n	8007cb6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d012      	beq.n	8007c78 <dhcp_coarse_tmr+0x50>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	8c1b      	ldrh	r3, [r3, #32]
 8007c56:	3301      	adds	r3, #1
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	841a      	strh	r2, [r3, #32]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	8c1a      	ldrh	r2, [r3, #32]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d106      	bne.n	8007c78 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fd94 	bl	8008798 <dhcp_release>
        dhcp_discover(netif);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fa8b 	bl	800818c <dhcp_discover>
 8007c76:	e01e      	b.n	8007cb6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	8bdb      	ldrh	r3, [r3, #30]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <dhcp_coarse_tmr+0x70>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	8bdb      	ldrh	r3, [r3, #30]
 8007c84:	1e5a      	subs	r2, r3, #1
 8007c86:	b291      	uxth	r1, r2
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	83d1      	strh	r1, [r2, #30]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d103      	bne.n	8007c98 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f8c6 	bl	8007e22 <dhcp_t2_timeout>
 8007c96:	e00e      	b.n	8007cb6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	8b9b      	ldrh	r3, [r3, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <dhcp_coarse_tmr+0x8e>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	8b9b      	ldrh	r3, [r3, #28]
 8007ca4:	1e5a      	subs	r2, r3, #1
 8007ca6:	b291      	uxth	r1, r2
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	8391      	strh	r1, [r2, #28]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d102      	bne.n	8007cb6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f888 	bl	8007dc6 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1b9      	bne.n	8007c36 <dhcp_coarse_tmr+0xe>
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20007728 	.word	0x20007728

08007cd0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8007cd6:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <dhcp_fine_tmr+0x60>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8007cdc:	e020      	b.n	8007d20 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	8adb      	ldrh	r3, [r3, #22]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d906      	bls.n	8007d00 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	8adb      	ldrh	r3, [r3, #22]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	82da      	strh	r2, [r3, #22]
 8007cfe:	e00c      	b.n	8007d1a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	8adb      	ldrh	r3, [r3, #22]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d108      	bne.n	8007d1a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	8adb      	ldrh	r3, [r3, #22]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f80d 	bl	8007d34 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1db      	bne.n	8007cde <dhcp_fine_tmr+0xe>
  }
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20007728 	.word	0x20007728

08007d34 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	7a5b      	ldrb	r3, [r3, #9]
 8007d46:	2b0c      	cmp	r3, #12
 8007d48:	d003      	beq.n	8007d52 <dhcp_timeout+0x1e>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	7a5b      	ldrb	r3, [r3, #9]
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d103      	bne.n	8007d5a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa1a 	bl	800818c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8007d58:	e031      	b.n	8007dbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	7a5b      	ldrb	r3, [r3, #9]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10e      	bne.n	8007d80 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	7a9b      	ldrb	r3, [r3, #10]
 8007d66:	2b05      	cmp	r3, #5
 8007d68:	d803      	bhi.n	8007d72 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff feb6 	bl	8007adc <dhcp_select>
}
 8007d70:	e025      	b.n	8007dbe <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fd10 	bl	8008798 <dhcp_release>
      dhcp_discover(netif);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa07 	bl	800818c <dhcp_discover>
}
 8007d7e:	e01e      	b.n	8007dbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	7a5b      	ldrb	r3, [r3, #9]
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d10b      	bne.n	8007da0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	7a9b      	ldrb	r3, [r3, #10]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d803      	bhi.n	8007d98 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fe4b 	bl	8007a2c <dhcp_check>
}
 8007d96:	e012      	b.n	8007dbe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa83 	bl	80082a4 <dhcp_bind>
}
 8007d9e:	e00e      	b.n	8007dbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	7a5b      	ldrb	r3, [r3, #9]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d10a      	bne.n	8007dbe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	7a9b      	ldrb	r3, [r3, #10]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d803      	bhi.n	8007db8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fc5d 	bl	8008670 <dhcp_reboot>
}
 8007db6:	e002      	b.n	8007dbe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f9e7 	bl	800818c <dhcp_discover>
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	7a5b      	ldrb	r3, [r3, #9]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d007      	beq.n	8007dec <dhcp_t1_timeout+0x26>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	7a5b      	ldrb	r3, [r3, #9]
 8007de0:	2b0a      	cmp	r3, #10
 8007de2:	d003      	beq.n	8007dec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	d116      	bne.n	8007e1a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fb33 	bl	8008458 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8b5b      	ldrh	r3, [r3, #26]
 8007df6:	461a      	mov	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8c1b      	ldrh	r3, [r3, #32]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	dd0b      	ble.n	8007e1a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8b5b      	ldrh	r3, [r3, #26]
 8007e06:	461a      	mov	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8c1b      	ldrh	r3, [r3, #32]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	0fda      	lsrs	r2, r3, #31
 8007e10:	4413      	add	r3, r2
 8007e12:	105b      	asrs	r3, r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	7a5b      	ldrb	r3, [r3, #9]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d00b      	beq.n	8007e50 <dhcp_t2_timeout+0x2e>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	7a5b      	ldrb	r3, [r3, #9]
 8007e3c:	2b0a      	cmp	r3, #10
 8007e3e:	d007      	beq.n	8007e50 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d003      	beq.n	8007e50 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	7a5b      	ldrb	r3, [r3, #9]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d116      	bne.n	8007e7e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fb87 	bl	8008564 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8c1b      	ldrh	r3, [r3, #32]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	dd0b      	ble.n	8007e7e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8c1b      	ldrh	r3, [r3, #32]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	0fda      	lsrs	r2, r3, #31
 8007e74:	4413      	add	r3, r2
 8007e76:	105b      	asrs	r3, r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8007ea2:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <dhcp_handle_ack+0xb8>)
 8007ea4:	78db      	ldrb	r3, [r3, #3]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8007eaa:	4b26      	ldr	r3, [pc, #152]	; (8007f44 <dhcp_handle_ack+0xbc>)
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8007eb2:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <dhcp_handle_ack+0xb8>)
 8007eb4:	791b      	ldrb	r3, [r3, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8007eba:	4b22      	ldr	r3, [pc, #136]	; (8007f44 <dhcp_handle_ack+0xbc>)
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ec2:	e004      	b.n	8007ece <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec8:	085a      	lsrs	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8007ece:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <dhcp_handle_ack+0xb8>)
 8007ed0:	795b      	ldrb	r3, [r3, #5]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8007ed6:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <dhcp_handle_ack+0xbc>)
 8007ed8:	695a      	ldr	r2, [r3, #20]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ede:	e007      	b.n	8007ef0 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	08da      	lsrs	r2, r3, #3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8007efa:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <dhcp_handle_ack+0xb8>)
 8007efc:	799b      	ldrb	r3, [r3, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007f02:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <dhcp_handle_ack+0xbc>)
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fcca 	bl	80078a0 <lwip_htonl>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	72da      	strb	r2, [r3, #11]
 8007f18:	e002      	b.n	8007f20 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <dhcp_handle_ack+0xb8>)
 8007f22:	79db      	ldrb	r3, [r3, #7]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <dhcp_handle_ack+0xbc>)
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fcb7 	bl	80078a0 <lwip_htonl>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20003ff8 	.word	0x20003ff8
 8007f44:	20004000 	.word	0x20004000

08007f48 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <dhcp_start+0x22>
 8007f56:	4b3c      	ldr	r3, [pc, #240]	; (8008048 <dhcp_start+0x100>)
 8007f58:	f240 22d6 	movw	r2, #726	; 0x2d6
 8007f5c:	493b      	ldr	r1, [pc, #236]	; (800804c <dhcp_start+0x104>)
 8007f5e:	483c      	ldr	r0, [pc, #240]	; (8008050 <dhcp_start+0x108>)
 8007f60:	f00c fa34 	bl	80143cc <iprintf>
 8007f64:	f06f 030f 	mvn.w	r3, #15
 8007f68:	e069      	b.n	800803e <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <dhcp_start+0x44>
 8007f78:	4b33      	ldr	r3, [pc, #204]	; (8008048 <dhcp_start+0x100>)
 8007f7a:	f240 22d7 	movw	r2, #727	; 0x2d7
 8007f7e:	4935      	ldr	r1, [pc, #212]	; (8008054 <dhcp_start+0x10c>)
 8007f80:	4833      	ldr	r0, [pc, #204]	; (8008050 <dhcp_start+0x108>)
 8007f82:	f00c fa23 	bl	80143cc <iprintf>
 8007f86:	f06f 030f 	mvn.w	r3, #15
 8007f8a:	e058      	b.n	800803e <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f96:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007f9a:	d202      	bcs.n	8007fa2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa0:	e04d      	b.n	800803e <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10d      	bne.n	8007fc4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8007fa8:	2040      	movs	r0, #64	; 0x40
 8007faa:	f003 feeb 	bl	800bd84 <mem_malloc>
 8007fae:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fba:	e040      	b.n	800803e <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]
 8007fc2:	e01b      	b.n	8007ffc <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d006      	beq.n	8007fda <dhcp_start+0x92>
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <dhcp_start+0x100>)
 8007fce:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8007fd2:	4921      	ldr	r1, [pc, #132]	; (8008058 <dhcp_start+0x110>)
 8007fd4:	481e      	ldr	r0, [pc, #120]	; (8008050 <dhcp_start+0x108>)
 8007fd6:	f00c f9f9 	bl	80143cc <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <dhcp_start+0xa8>
 8007fe2:	4b19      	ldr	r3, [pc, #100]	; (8008048 <dhcp_start+0x100>)
 8007fe4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007fe8:	491c      	ldr	r1, [pc, #112]	; (800805c <dhcp_start+0x114>)
 8007fea:	4819      	ldr	r0, [pc, #100]	; (8008050 <dhcp_start+0x108>)
 8007fec:	f00c f9ee 	bl	80143cc <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	7a1b      	ldrb	r3, [r3, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8007ff8:	f7ff fcd4 	bl	80079a4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8007ffc:	2240      	movs	r2, #64	; 0x40
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f00c f9db 	bl	80143bc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008006:	f7ff fc7b 	bl	8007900 <dhcp_inc_pcb_refcount>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <dhcp_start+0xce>
    return ERR_MEM;
 8008010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008014:	e013      	b.n	800803e <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f8b5 	bl	800818c <dhcp_discover>
 8008022:	4603      	mov	r3, r0
 8008024:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8008026:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fc3a 	bl	80088a8 <dhcp_stop>
    return ERR_MEM;
 8008034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008038:	e001      	b.n	800803e <dhcp_start+0xf6>
  }
  return result;
 800803a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	08015c84 	.word	0x08015c84
 800804c:	08015d30 	.word	0x08015d30
 8008050:	08015ce4 	.word	0x08015ce4
 8008054:	08015d74 	.word	0x08015d74
 8008058:	08015d98 	.word	0x08015d98
 800805c:	08015db0 	.word	0x08015db0

08008060 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <dhcp_arp_reply+0x20>
 8008070:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <dhcp_arp_reply+0x4c>)
 8008072:	f240 327b 	movw	r2, #891	; 0x37b
 8008076:	490e      	ldr	r1, [pc, #56]	; (80080b0 <dhcp_arp_reply+0x50>)
 8008078:	480e      	ldr	r0, [pc, #56]	; (80080b4 <dhcp_arp_reply+0x54>)
 800807a:	f00c f9a7 	bl	80143cc <iprintf>
 800807e:	e012      	b.n	80080a6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <dhcp_arp_reply+0x46>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	7a5b      	ldrb	r3, [r3, #9]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d108      	bne.n	80080a6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	429a      	cmp	r2, r3
 800809e:	d102      	bne.n	80080a6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f809 	bl	80080b8 <dhcp_decline>
    }
  }
}
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	08015c84 	.word	0x08015c84
 80080b0:	08015d30 	.word	0x08015d30
 80080b4:	08015ce4 	.word	0x08015ce4

080080b8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af02      	add	r7, sp, #8
 80080be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80080ca:	210c      	movs	r1, #12
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 fc23 	bl	8008918 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 80080d2:	2204      	movs	r2, #4
 80080d4:	68f9      	ldr	r1, [r7, #12]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 f8aa 	bl	8009230 <dhcp_create_msg>
 80080dc:	4603      	mov	r3, r0
 80080de:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 80080e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d12a      	bne.n	800813e <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80080e8:	2204      	movs	r2, #4
 80080ea:	2132      	movs	r1, #50	; 0x32
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fc2d 	bl	800894c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fbd2 	bl	80078a0 <lwip_htonl>
 80080fc:	4603      	mov	r3, r0
 80080fe:	4619      	mov	r1, r3
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fcc1 	bl	8008a88 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f001 fa36 	bl	8009578 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8a9b      	ldrh	r3, [r3, #20]
 8008114:	33f0      	adds	r3, #240	; 0xf0
 8008116:	b29b      	uxth	r3, r3
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f004 fbe2 	bl	800c8e4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8008120:	4b16      	ldr	r3, [pc, #88]	; (800817c <dhcp_decline+0xc4>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68d9      	ldr	r1, [r3, #12]
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <dhcp_decline+0xc8>)
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2343      	movs	r3, #67	; 0x43
 8008132:	4a14      	ldr	r2, [pc, #80]	; (8008184 <dhcp_decline+0xcc>)
 8008134:	f00a fd26 	bl	8012b84 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f001 f9db 	bl	80094f4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	7a9b      	ldrb	r3, [r3, #10]
 8008142:	2bff      	cmp	r3, #255	; 0xff
 8008144:	d005      	beq.n	8008152 <dhcp_decline+0x9a>
    dhcp->tries++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	7a9b      	ldrb	r3, [r3, #10]
 800814a:	3301      	adds	r3, #1
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8008152:	f242 7310 	movw	r3, #10000	; 0x2710
 8008156:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008158:	893b      	ldrh	r3, [r7, #8]
 800815a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800815e:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <dhcp_decline+0xd0>)
 8008160:	fb82 1203 	smull	r1, r2, r2, r3
 8008164:	1152      	asrs	r2, r2, #5
 8008166:	17db      	asrs	r3, r3, #31
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008170:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20003df4 	.word	0x20003df4
 8008180:	08017ec0 	.word	0x08017ec0
 8008184:	08017ec4 	.word	0x08017ec4
 8008188:	10624dd3 	.word	0x10624dd3

0800818c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2200      	movs	r2, #0
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80081a4:	2106      	movs	r1, #6
 80081a6:	6938      	ldr	r0, [r7, #16]
 80081a8:	f000 fbb6 	bl	8008918 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80081ac:	2201      	movs	r2, #1
 80081ae:	6939      	ldr	r1, [r7, #16]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f83d 	bl	8009230 <dhcp_create_msg>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80081ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d13b      	bne.n	800823a <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80081c2:	2202      	movs	r2, #2
 80081c4:	2139      	movs	r1, #57	; 0x39
 80081c6:	6938      	ldr	r0, [r7, #16]
 80081c8:	f000 fbc0 	bl	800894c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081d0:	4619      	mov	r1, r3
 80081d2:	6938      	ldr	r0, [r7, #16]
 80081d4:	f000 fc1c 	bl	8008a10 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80081d8:	2203      	movs	r2, #3
 80081da:	2137      	movs	r1, #55	; 0x37
 80081dc:	6938      	ldr	r0, [r7, #16]
 80081de:	f000 fbb5 	bl	800894c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]
 80081e6:	e009      	b.n	80081fc <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	4a29      	ldr	r2, [pc, #164]	; (8008290 <dhcp_discover+0x104>)
 80081ec:	5cd3      	ldrb	r3, [r2, r3]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6938      	ldr	r0, [r7, #16]
 80081f2:	f000 fbe5 	bl	80089c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	3301      	adds	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d9f2      	bls.n	80081e8 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8008202:	6938      	ldr	r0, [r7, #16]
 8008204:	f001 f9b8 	bl	8009578 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	8a9b      	ldrh	r3, [r3, #20]
 8008210:	33f0      	adds	r3, #240	; 0xf0
 8008212:	b29b      	uxth	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f004 fb64 	bl	800c8e4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <dhcp_discover+0x108>)
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	68d9      	ldr	r1, [r3, #12]
 8008224:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <dhcp_discover+0x10c>)
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2343      	movs	r3, #67	; 0x43
 800822e:	4a1b      	ldr	r2, [pc, #108]	; (800829c <dhcp_discover+0x110>)
 8008230:	f00a fca8 	bl	8012b84 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8008234:	6938      	ldr	r0, [r7, #16]
 8008236:	f001 f95d 	bl	80094f4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	7a9b      	ldrb	r3, [r3, #10]
 800823e:	2bff      	cmp	r3, #255	; 0xff
 8008240:	d005      	beq.n	800824e <dhcp_discover+0xc2>
    dhcp->tries++;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	7a9b      	ldrb	r3, [r3, #10]
 8008246:	3301      	adds	r3, #1
 8008248:	b2da      	uxtb	r2, r3
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	7a9b      	ldrb	r3, [r3, #10]
 8008252:	2b05      	cmp	r3, #5
 8008254:	d807      	bhi.n	8008266 <dhcp_discover+0xda>
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	7a9b      	ldrb	r3, [r3, #10]
 800825a:	461a      	mov	r2, r3
 800825c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008260:	4093      	lsls	r3, r2
 8008262:	b29b      	uxth	r3, r3
 8008264:	e001      	b.n	800826a <dhcp_discover+0xde>
 8008266:	f64e 2360 	movw	r3, #60000	; 0xea60
 800826a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800826c:	89bb      	ldrh	r3, [r7, #12]
 800826e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008272:	4a0b      	ldr	r2, [pc, #44]	; (80082a0 <dhcp_discover+0x114>)
 8008274:	fb82 1203 	smull	r1, r2, r2, r3
 8008278:	1152      	asrs	r2, r2, #5
 800827a:	17db      	asrs	r3, r3, #31
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	b29a      	uxth	r2, r3
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000008 	.word	0x20000008
 8008294:	20003df4 	.word	0x20003df4
 8008298:	08017ec0 	.word	0x08017ec0
 800829c:	08017ec4 	.word	0x08017ec4
 80082a0:	10624dd3 	.word	0x10624dd3

080082a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d107      	bne.n	80082c2 <dhcp_bind+0x1e>
 80082b2:	4b64      	ldr	r3, [pc, #400]	; (8008444 <dhcp_bind+0x1a0>)
 80082b4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80082b8:	4963      	ldr	r1, [pc, #396]	; (8008448 <dhcp_bind+0x1a4>)
 80082ba:	4864      	ldr	r0, [pc, #400]	; (800844c <dhcp_bind+0x1a8>)
 80082bc:	f00c f886 	bl	80143cc <iprintf>
 80082c0:	e0bc      	b.n	800843c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d107      	bne.n	80082de <dhcp_bind+0x3a>
 80082ce:	4b5d      	ldr	r3, [pc, #372]	; (8008444 <dhcp_bind+0x1a0>)
 80082d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082d4:	495e      	ldr	r1, [pc, #376]	; (8008450 <dhcp_bind+0x1ac>)
 80082d6:	485d      	ldr	r0, [pc, #372]	; (800844c <dhcp_bind+0x1a8>)
 80082d8:	f00c f878 	bl	80143cc <iprintf>
 80082dc:	e0ae      	b.n	800843c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	2200      	movs	r2, #0
 80082e2:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ec:	d019      	beq.n	8008322 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	331e      	adds	r3, #30
 80082f4:	4a57      	ldr	r2, [pc, #348]	; (8008454 <dhcp_bind+0x1b0>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008304:	d302      	bcc.n	800830c <dhcp_bind+0x68>
       timeout = 0xffff;
 8008306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800830a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	b29a      	uxth	r2, r3
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2201      	movs	r2, #1
 8008320:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800832a:	d01d      	beq.n	8008368 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	331e      	adds	r3, #30
 8008332:	4a48      	ldr	r2, [pc, #288]	; (8008454 <dhcp_bind+0x1b0>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	095b      	lsrs	r3, r3, #5
 800833a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008342:	d302      	bcc.n	800834a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8008344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008348:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	b29a      	uxth	r2, r3
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	8b1b      	ldrh	r3, [r3, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2201      	movs	r2, #1
 800835e:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	8b1a      	ldrh	r2, [r3, #24]
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008370:	d01d      	beq.n	80083ae <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	331e      	adds	r3, #30
 8008378:	4a36      	ldr	r2, [pc, #216]	; (8008454 <dhcp_bind+0x1b0>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008388:	d302      	bcc.n	8008390 <dhcp_bind+0xec>
      timeout = 0xffff;
 800838a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800838e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	b29a      	uxth	r2, r3
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	8b5b      	ldrh	r3, [r3, #26]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2201      	movs	r2, #1
 80083a4:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	8b5a      	ldrh	r2, [r3, #26]
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	8b1a      	ldrh	r2, [r3, #24]
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	8b5b      	ldrh	r3, [r3, #26]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d306      	bcc.n	80083c8 <dhcp_bind+0x124>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	8b5b      	ldrh	r3, [r3, #26]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2200      	movs	r2, #0
 80083c6:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	7adb      	ldrb	r3, [r3, #11]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	e014      	b.n	8008402 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	3328      	adds	r3, #40	; 0x28
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80083e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db02      	blt.n	80083ee <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80083e8:	23ff      	movs	r3, #255	; 0xff
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	e009      	b.n	8008402 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	2bbf      	cmp	r3, #191	; 0xbf
 80083f2:	d903      	bls.n	80083fc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80083f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80083f8:	613b      	str	r3, [r7, #16]
 80083fa:	e002      	b.n	8008402 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80083fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008400:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4013      	ands	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800841e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8008420:	210a      	movs	r1, #10
 8008422:	69b8      	ldr	r0, [r7, #24]
 8008424:	f000 fa78 	bl	8008918 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800842e:	f107 030c 	add.w	r3, r7, #12
 8008432:	f107 0210 	add.w	r2, r7, #16
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f003 fef4 	bl	800c224 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	08015c84 	.word	0x08015c84
 8008448:	08015dc4 	.word	0x08015dc4
 800844c:	08015ce4 	.word	0x08015ce4
 8008450:	08015de0 	.word	0x08015de0
 8008454:	88888889 	.word	0x88888889

08008458 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af02      	add	r7, sp, #8
 800845e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8008466:	2105      	movs	r1, #5
 8008468:	6938      	ldr	r0, [r7, #16]
 800846a:	f000 fa55 	bl	8008918 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800846e:	2203      	movs	r2, #3
 8008470:	6939      	ldr	r1, [r7, #16]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fedc 	bl	8009230 <dhcp_create_msg>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800847c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d13b      	bne.n	80084fc <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008484:	2202      	movs	r2, #2
 8008486:	2139      	movs	r1, #57	; 0x39
 8008488:	6938      	ldr	r0, [r7, #16]
 800848a:	f000 fa5f 	bl	800894c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008492:	4619      	mov	r1, r3
 8008494:	6938      	ldr	r0, [r7, #16]
 8008496:	f000 fabb 	bl	8008a10 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800849a:	2203      	movs	r2, #3
 800849c:	2137      	movs	r1, #55	; 0x37
 800849e:	6938      	ldr	r0, [r7, #16]
 80084a0:	f000 fa54 	bl	800894c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80084a4:	2300      	movs	r3, #0
 80084a6:	75fb      	strb	r3, [r7, #23]
 80084a8:	e009      	b.n	80084be <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	4a2a      	ldr	r2, [pc, #168]	; (8008558 <dhcp_renew+0x100>)
 80084ae:	5cd3      	ldrb	r3, [r2, r3]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6938      	ldr	r0, [r7, #16]
 80084b4:	f000 fa84 	bl	80089c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	3301      	adds	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d9f2      	bls.n	80084aa <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 80084c4:	6938      	ldr	r0, [r7, #16]
 80084c6:	f001 f857 	bl	8009578 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	8a9b      	ldrh	r3, [r3, #20]
 80084d2:	33f0      	adds	r3, #240	; 0xf0
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f004 fa03 	bl	800c8e4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80084de:	4b1f      	ldr	r3, [pc, #124]	; (800855c <dhcp_renew+0x104>)
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	68d9      	ldr	r1, [r3, #12]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2343      	movs	r3, #67	; 0x43
 80084f2:	f00a fb09 	bl	8012b08 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80084f6:	6938      	ldr	r0, [r7, #16]
 80084f8:	f000 fffc 	bl	80094f4 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	7a9b      	ldrb	r3, [r3, #10]
 8008500:	2bff      	cmp	r3, #255	; 0xff
 8008502:	d005      	beq.n	8008510 <dhcp_renew+0xb8>
    dhcp->tries++;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	7a9b      	ldrb	r3, [r3, #10]
 8008508:	3301      	adds	r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	7a9b      	ldrb	r3, [r3, #10]
 8008514:	2b09      	cmp	r3, #9
 8008516:	d80a      	bhi.n	800852e <dhcp_renew+0xd6>
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	7a9b      	ldrb	r3, [r3, #10]
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	0152      	lsls	r2, r2, #5
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	0092      	lsls	r2, r2, #2
 8008526:	4413      	add	r3, r2
 8008528:	011b      	lsls	r3, r3, #4
 800852a:	b29b      	uxth	r3, r3
 800852c:	e001      	b.n	8008532 <dhcp_renew+0xda>
 800852e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008532:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008534:	89bb      	ldrh	r3, [r7, #12]
 8008536:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800853a:	4a09      	ldr	r2, [pc, #36]	; (8008560 <dhcp_renew+0x108>)
 800853c:	fb82 1203 	smull	r1, r2, r2, r3
 8008540:	1152      	asrs	r2, r2, #5
 8008542:	17db      	asrs	r3, r3, #31
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	b29a      	uxth	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800854c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20000008 	.word	0x20000008
 800855c:	20003df4 	.word	0x20003df4
 8008560:	10624dd3 	.word	0x10624dd3

08008564 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8
 800856a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8008572:	2104      	movs	r1, #4
 8008574:	6938      	ldr	r0, [r7, #16]
 8008576:	f000 f9cf 	bl	8008918 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800857a:	2203      	movs	r2, #3
 800857c:	6939      	ldr	r1, [r7, #16]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fe56 	bl	8009230 <dhcp_create_msg>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8008588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d139      	bne.n	8008604 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008590:	2202      	movs	r2, #2
 8008592:	2139      	movs	r1, #57	; 0x39
 8008594:	6938      	ldr	r0, [r7, #16]
 8008596:	f000 f9d9 	bl	800894c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800859e:	4619      	mov	r1, r3
 80085a0:	6938      	ldr	r0, [r7, #16]
 80085a2:	f000 fa35 	bl	8008a10 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80085a6:	2203      	movs	r2, #3
 80085a8:	2137      	movs	r1, #55	; 0x37
 80085aa:	6938      	ldr	r0, [r7, #16]
 80085ac:	f000 f9ce 	bl	800894c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80085b0:	2300      	movs	r3, #0
 80085b2:	75fb      	strb	r3, [r7, #23]
 80085b4:	e009      	b.n	80085ca <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	4a29      	ldr	r2, [pc, #164]	; (8008660 <dhcp_rebind+0xfc>)
 80085ba:	5cd3      	ldrb	r3, [r2, r3]
 80085bc:	4619      	mov	r1, r3
 80085be:	6938      	ldr	r0, [r7, #16]
 80085c0:	f000 f9fe 	bl	80089c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	3301      	adds	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d9f2      	bls.n	80085b6 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80085d0:	6938      	ldr	r0, [r7, #16]
 80085d2:	f000 ffd1 	bl	8009578 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	8a9b      	ldrh	r3, [r3, #20]
 80085de:	33f0      	adds	r3, #240	; 0xf0
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f004 f97d 	bl	800c8e4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80085ea:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <dhcp_rebind+0x100>)
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	68d9      	ldr	r1, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	2343      	movs	r3, #67	; 0x43
 80085f8:	4a1b      	ldr	r2, [pc, #108]	; (8008668 <dhcp_rebind+0x104>)
 80085fa:	f00a fa85 	bl	8012b08 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80085fe:	6938      	ldr	r0, [r7, #16]
 8008600:	f000 ff78 	bl	80094f4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	7a9b      	ldrb	r3, [r3, #10]
 8008608:	2bff      	cmp	r3, #255	; 0xff
 800860a:	d005      	beq.n	8008618 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	7a9b      	ldrb	r3, [r3, #10]
 8008610:	3301      	adds	r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	7a9b      	ldrb	r3, [r3, #10]
 800861c:	2b09      	cmp	r3, #9
 800861e:	d80a      	bhi.n	8008636 <dhcp_rebind+0xd2>
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	7a9b      	ldrb	r3, [r3, #10]
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	0152      	lsls	r2, r2, #5
 800862a:	1ad2      	subs	r2, r2, r3
 800862c:	0092      	lsls	r2, r2, #2
 800862e:	4413      	add	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	b29b      	uxth	r3, r3
 8008634:	e001      	b.n	800863a <dhcp_rebind+0xd6>
 8008636:	f242 7310 	movw	r3, #10000	; 0x2710
 800863a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800863c:	89bb      	ldrh	r3, [r7, #12]
 800863e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008642:	4a0a      	ldr	r2, [pc, #40]	; (800866c <dhcp_rebind+0x108>)
 8008644:	fb82 1203 	smull	r1, r2, r2, r3
 8008648:	1152      	asrs	r2, r2, #5
 800864a:	17db      	asrs	r3, r3, #31
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	b29a      	uxth	r2, r3
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008654:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000008 	.word	0x20000008
 8008664:	20003df4 	.word	0x20003df4
 8008668:	08017ec4 	.word	0x08017ec4
 800866c:	10624dd3 	.word	0x10624dd3

08008670 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8
 8008676:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800867e:	2103      	movs	r1, #3
 8008680:	6938      	ldr	r0, [r7, #16]
 8008682:	f000 f949 	bl	8008918 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8008686:	2203      	movs	r2, #3
 8008688:	6939      	ldr	r1, [r7, #16]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fdd0 	bl	8009230 <dhcp_create_msg>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8008694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d147      	bne.n	800872c <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800869c:	2202      	movs	r2, #2
 800869e:	2139      	movs	r1, #57	; 0x39
 80086a0:	6938      	ldr	r0, [r7, #16]
 80086a2:	f000 f953 	bl	800894c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80086a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086aa:	6938      	ldr	r0, [r7, #16]
 80086ac:	f000 f9b0 	bl	8008a10 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80086b0:	2204      	movs	r2, #4
 80086b2:	2132      	movs	r1, #50	; 0x32
 80086b4:	6938      	ldr	r0, [r7, #16]
 80086b6:	f000 f949 	bl	800894c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff f8ee 	bl	80078a0 <lwip_htonl>
 80086c4:	4603      	mov	r3, r0
 80086c6:	4619      	mov	r1, r3
 80086c8:	6938      	ldr	r0, [r7, #16]
 80086ca:	f000 f9dd 	bl	8008a88 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80086ce:	2203      	movs	r2, #3
 80086d0:	2137      	movs	r1, #55	; 0x37
 80086d2:	6938      	ldr	r0, [r7, #16]
 80086d4:	f000 f93a 	bl	800894c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80086d8:	2300      	movs	r3, #0
 80086da:	75fb      	strb	r3, [r7, #23]
 80086dc:	e009      	b.n	80086f2 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	4a29      	ldr	r2, [pc, #164]	; (8008788 <dhcp_reboot+0x118>)
 80086e2:	5cd3      	ldrb	r3, [r2, r3]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6938      	ldr	r0, [r7, #16]
 80086e8:	f000 f96a 	bl	80089c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	3301      	adds	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d9f2      	bls.n	80086de <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 80086f8:	6938      	ldr	r0, [r7, #16]
 80086fa:	f000 ff3d 	bl	8009578 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	8a9b      	ldrh	r3, [r3, #20]
 8008706:	33f0      	adds	r3, #240	; 0xf0
 8008708:	b29b      	uxth	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f004 f8e9 	bl	800c8e4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8008712:	4b1e      	ldr	r3, [pc, #120]	; (800878c <dhcp_reboot+0x11c>)
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	68d9      	ldr	r1, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2343      	movs	r3, #67	; 0x43
 8008720:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <dhcp_reboot+0x120>)
 8008722:	f00a f9f1 	bl	8012b08 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8008726:	6938      	ldr	r0, [r7, #16]
 8008728:	f000 fee4 	bl	80094f4 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	7a9b      	ldrb	r3, [r3, #10]
 8008730:	2bff      	cmp	r3, #255	; 0xff
 8008732:	d005      	beq.n	8008740 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	7a9b      	ldrb	r3, [r3, #10]
 8008738:	3301      	adds	r3, #1
 800873a:	b2da      	uxtb	r2, r3
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	7a9b      	ldrb	r3, [r3, #10]
 8008744:	2b09      	cmp	r3, #9
 8008746:	d80a      	bhi.n	800875e <dhcp_reboot+0xee>
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	7a9b      	ldrb	r3, [r3, #10]
 800874c:	b29b      	uxth	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	0152      	lsls	r2, r2, #5
 8008752:	1ad2      	subs	r2, r2, r3
 8008754:	0092      	lsls	r2, r2, #2
 8008756:	4413      	add	r3, r2
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	b29b      	uxth	r3, r3
 800875c:	e001      	b.n	8008762 <dhcp_reboot+0xf2>
 800875e:	f242 7310 	movw	r3, #10000	; 0x2710
 8008762:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008764:	89bb      	ldrh	r3, [r7, #12]
 8008766:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800876a:	4a0a      	ldr	r2, [pc, #40]	; (8008794 <dhcp_reboot+0x124>)
 800876c:	fb82 1203 	smull	r1, r2, r2, r3
 8008770:	1152      	asrs	r2, r2, #5
 8008772:	17db      	asrs	r3, r3, #31
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	b29a      	uxth	r2, r3
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800877c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000008 	.word	0x20000008
 800878c:	20003df4 	.word	0x20003df4
 8008790:	08017ec4 	.word	0x08017ec4
 8008794:	10624dd3 	.word	0x10624dd3

08008798 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af02      	add	r7, sp, #8
 800879e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <dhcp_release+0x1a>
    return ERR_ARG;
 80087ac:	f06f 030f 	mvn.w	r3, #15
 80087b0:	e072      	b.n	8008898 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 ff37 	bl	800962c <dhcp_supplied_address>
 80087be:	4603      	mov	r3, r0
 80087c0:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80087c2:	2100      	movs	r1, #0
 80087c4:	6978      	ldr	r0, [r7, #20]
 80087c6:	f000 f8a7 	bl	8008918 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2200      	movs	r2, #0
 80087d4:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2200      	movs	r2, #0
 80087da:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2200      	movs	r2, #0
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	845a      	strh	r2, [r3, #34]	; 0x22
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	841a      	strh	r2, [r3, #32]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	8c1a      	ldrh	r2, [r3, #32]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	83da      	strh	r2, [r3, #30]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	8bda      	ldrh	r2, [r3, #30]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8008816:	7cfb      	ldrb	r3, [r7, #19]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	e03b      	b.n	8008898 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8008820:	2207      	movs	r2, #7
 8008822:	6979      	ldr	r1, [r7, #20]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fd03 	bl	8009230 <dhcp_create_msg>
 800882a:	4603      	mov	r3, r0
 800882c:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800882e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d128      	bne.n	8008888 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8008836:	2204      	movs	r2, #4
 8008838:	2136      	movs	r1, #54	; 0x36
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f000 f886 	bl	800894c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff f82c 	bl	80078a0 <lwip_htonl>
 8008848:	4603      	mov	r3, r0
 800884a:	4619      	mov	r1, r3
 800884c:	6978      	ldr	r0, [r7, #20]
 800884e:	f000 f91b 	bl	8008a88 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8008852:	6978      	ldr	r0, [r7, #20]
 8008854:	f000 fe90 	bl	8009578 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	8a9b      	ldrh	r3, [r3, #20]
 8008860:	33f0      	adds	r3, #240	; 0xf0
 8008862:	b29b      	uxth	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f004 f83c 	bl	800c8e4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <dhcp_release+0x108>)
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	68d9      	ldr	r1, [r3, #12]
 8008874:	f107 020c 	add.w	r2, r7, #12
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	2343      	movs	r3, #67	; 0x43
 800887e:	f00a f943 	bl	8012b08 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8008882:	6978      	ldr	r0, [r7, #20]
 8008884:	f000 fe36 	bl	80094f4 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008888:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <dhcp_release+0x10c>)
 800888a:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <dhcp_release+0x10c>)
 800888c:	4905      	ldr	r1, [pc, #20]	; (80088a4 <dhcp_release+0x10c>)
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f003 fcc8 	bl	800c224 <netif_set_addr>

  return result;
 8008894:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20003df4 	.word	0x20003df4
 80088a4:	08017ec0 	.word	0x08017ec0

080088a8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d107      	bne.n	80088c6 <dhcp_stop+0x1e>
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <dhcp_stop+0x60>)
 80088b8:	f240 5242 	movw	r2, #1346	; 0x542
 80088bc:	4913      	ldr	r1, [pc, #76]	; (800890c <dhcp_stop+0x64>)
 80088be:	4814      	ldr	r0, [pc, #80]	; (8008910 <dhcp_stop+0x68>)
 80088c0:	f00b fd84 	bl	80143cc <iprintf>
 80088c4:	e01d      	b.n	8008902 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d017      	beq.n	8008902 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d006      	beq.n	80088e8 <dhcp_stop+0x40>
 80088da:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <dhcp_stop+0x60>)
 80088dc:	f240 524f 	movw	r2, #1359	; 0x54f
 80088e0:	490c      	ldr	r1, [pc, #48]	; (8008914 <dhcp_stop+0x6c>)
 80088e2:	480b      	ldr	r0, [pc, #44]	; (8008910 <dhcp_stop+0x68>)
 80088e4:	f00b fd72 	bl	80143cc <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80088e8:	2100      	movs	r1, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f814 	bl	8008918 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	7a1b      	ldrb	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80088f8:	f7ff f854 	bl	80079a4 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	08015c84 	.word	0x08015c84
 800890c:	08015df8 	.word	0x08015df8
 8008910:	08015ce4 	.word	0x08015ce4
 8008914:	08015db0 	.word	0x08015db0

08008918 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7a5b      	ldrb	r3, [r3, #9]
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	429a      	cmp	r2, r3
 800892c:	d008      	beq.n	8008940 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	82da      	strh	r2, [r3, #22]
  }
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
 8008958:	4613      	mov	r3, r2
 800895a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	8a9b      	ldrh	r3, [r3, #20]
 8008960:	461a      	mov	r2, r3
 8008962:	78bb      	ldrb	r3, [r7, #2]
 8008964:	4413      	add	r3, r2
 8008966:	3302      	adds	r3, #2
 8008968:	2b44      	cmp	r3, #68	; 0x44
 800896a:	d906      	bls.n	800897a <dhcp_option+0x2e>
 800896c:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <dhcp_option+0x68>)
 800896e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8008972:	4911      	ldr	r1, [pc, #68]	; (80089b8 <dhcp_option+0x6c>)
 8008974:	4811      	ldr	r0, [pc, #68]	; (80089bc <dhcp_option+0x70>)
 8008976:	f00b fd29 	bl	80143cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8a9b      	ldrh	r3, [r3, #20]
 8008982:	1c59      	adds	r1, r3, #1
 8008984:	b288      	uxth	r0, r1
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	8288      	strh	r0, [r1, #20]
 800898a:	4413      	add	r3, r2
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8a9b      	ldrh	r3, [r3, #20]
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	b288      	uxth	r0, r1
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	8288      	strh	r0, [r1, #20]
 80089a2:	4413      	add	r3, r2
 80089a4:	78ba      	ldrb	r2, [r7, #2]
 80089a6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	08015c84 	.word	0x08015c84
 80089b8:	08015e14 	.word	0x08015e14
 80089bc:	08015ce4 	.word	0x08015ce4

080089c0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8a9b      	ldrh	r3, [r3, #20]
 80089d0:	2b43      	cmp	r3, #67	; 0x43
 80089d2:	d906      	bls.n	80089e2 <dhcp_option_byte+0x22>
 80089d4:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <dhcp_option_byte+0x44>)
 80089d6:	f240 527b 	movw	r2, #1403	; 0x57b
 80089da:	490b      	ldr	r1, [pc, #44]	; (8008a08 <dhcp_option_byte+0x48>)
 80089dc:	480b      	ldr	r0, [pc, #44]	; (8008a0c <dhcp_option_byte+0x4c>)
 80089de:	f00b fcf5 	bl	80143cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8a9b      	ldrh	r3, [r3, #20]
 80089ea:	1c59      	adds	r1, r3, #1
 80089ec:	b288      	uxth	r0, r1
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	8288      	strh	r0, [r1, #20]
 80089f2:	4413      	add	r3, r2
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	08015c84 	.word	0x08015c84
 8008a08:	08015e5c 	.word	0x08015e5c
 8008a0c:	08015ce4 	.word	0x08015ce4

08008a10 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8a9b      	ldrh	r3, [r3, #20]
 8008a20:	3302      	adds	r3, #2
 8008a22:	2b44      	cmp	r3, #68	; 0x44
 8008a24:	d906      	bls.n	8008a34 <dhcp_option_short+0x24>
 8008a26:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <dhcp_option_short+0x6c>)
 8008a28:	f240 5282 	movw	r2, #1410	; 0x582
 8008a2c:	4914      	ldr	r1, [pc, #80]	; (8008a80 <dhcp_option_short+0x70>)
 8008a2e:	4815      	ldr	r0, [pc, #84]	; (8008a84 <dhcp_option_short+0x74>)
 8008a30:	f00b fccc 	bl	80143cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8a9b      	ldrh	r3, [r3, #20]
 8008a3c:	1c59      	adds	r1, r3, #1
 8008a3e:	b288      	uxth	r0, r1
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	8288      	strh	r0, [r1, #20]
 8008a44:	4618      	mov	r0, r3
 8008a46:	887b      	ldrh	r3, [r7, #2]
 8008a48:	0a1b      	lsrs	r3, r3, #8
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	b2d9      	uxtb	r1, r3
 8008a4e:	1813      	adds	r3, r2, r0
 8008a50:	460a      	mov	r2, r1
 8008a52:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	8a9b      	ldrh	r3, [r3, #20]
 8008a5e:	1c59      	adds	r1, r3, #1
 8008a60:	b288      	uxth	r0, r1
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	8288      	strh	r0, [r1, #20]
 8008a66:	8879      	ldrh	r1, [r7, #2]
 8008a68:	b2c9      	uxtb	r1, r1
 8008a6a:	4413      	add	r3, r2
 8008a6c:	460a      	mov	r2, r1
 8008a6e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08015c84 	.word	0x08015c84
 8008a80:	08015e98 	.word	0x08015e98
 8008a84:	08015ce4 	.word	0x08015ce4

08008a88 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	8a9b      	ldrh	r3, [r3, #20]
 8008a96:	3304      	adds	r3, #4
 8008a98:	2b44      	cmp	r3, #68	; 0x44
 8008a9a:	d906      	bls.n	8008aaa <dhcp_option_long+0x22>
 8008a9c:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <dhcp_option_long+0xa8>)
 8008a9e:	f240 528a 	movw	r2, #1418	; 0x58a
 8008aa2:	4924      	ldr	r1, [pc, #144]	; (8008b34 <dhcp_option_long+0xac>)
 8008aa4:	4824      	ldr	r0, [pc, #144]	; (8008b38 <dhcp_option_long+0xb0>)
 8008aa6:	f00b fc91 	bl	80143cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	8a9b      	ldrh	r3, [r3, #20]
 8008ab2:	1c59      	adds	r1, r3, #1
 8008ab4:	b288      	uxth	r0, r1
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	8288      	strh	r0, [r1, #20]
 8008aba:	4618      	mov	r0, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	0e1b      	lsrs	r3, r3, #24
 8008ac0:	b2d9      	uxtb	r1, r3
 8008ac2:	1813      	adds	r3, r2, r0
 8008ac4:	460a      	mov	r2, r1
 8008ac6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8a9b      	ldrh	r3, [r3, #20]
 8008ad2:	1c59      	adds	r1, r3, #1
 8008ad4:	b288      	uxth	r0, r1
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	8288      	strh	r0, [r1, #20]
 8008ada:	4618      	mov	r0, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	b2d9      	uxtb	r1, r3
 8008ae2:	1813      	adds	r3, r2, r0
 8008ae4:	460a      	mov	r2, r1
 8008ae6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691a      	ldr	r2, [r3, #16]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	8a9b      	ldrh	r3, [r3, #20]
 8008af2:	1c59      	adds	r1, r3, #1
 8008af4:	b288      	uxth	r0, r1
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	8288      	strh	r0, [r1, #20]
 8008afa:	4618      	mov	r0, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	0a1b      	lsrs	r3, r3, #8
 8008b00:	b2d9      	uxtb	r1, r3
 8008b02:	1813      	adds	r3, r2, r0
 8008b04:	460a      	mov	r2, r1
 8008b06:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8a9b      	ldrh	r3, [r3, #20]
 8008b12:	1c59      	adds	r1, r3, #1
 8008b14:	b288      	uxth	r0, r1
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	8288      	strh	r0, [r1, #20]
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	b2c9      	uxtb	r1, r1
 8008b1e:	4413      	add	r3, r2
 8008b20:	460a      	mov	r2, r1
 8008b22:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	08015c84 	.word	0x08015c84
 8008b34:	08015edc 	.word	0x08015edc
 8008b38:	08015ce4 	.word	0x08015ce4

08008b3c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8008b4e:	2208      	movs	r2, #8
 8008b50:	2100      	movs	r1, #0
 8008b52:	48b3      	ldr	r0, [pc, #716]	; (8008e20 <dhcp_parse_reply+0x2e4>)
 8008b54:	f00b fc32 	bl	80143bc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	895b      	ldrh	r3, [r3, #10]
 8008b5c:	2b2b      	cmp	r3, #43	; 0x2b
 8008b5e:	d802      	bhi.n	8008b66 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8008b60:	f06f 0301 	mvn.w	r3, #1
 8008b64:	e26c      	b.n	8009040 <dhcp_parse_reply+0x504>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8008b6e:	23f0      	movs	r3, #240	; 0xf0
 8008b70:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	891b      	ldrh	r3, [r3, #8]
 8008b76:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8008b7c:	e00c      	b.n	8008b98 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	895b      	ldrh	r3, [r3, #10]
 8008b82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	895b      	ldrh	r3, [r3, #10]
 8008b8c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <dhcp_parse_reply+0x6c>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	895b      	ldrh	r3, [r3, #10]
 8008ba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d2ea      	bcs.n	8008b7e <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8008bae:	f06f 0301 	mvn.w	r3, #1
 8008bb2:	e245      	b.n	8009040 <dhcp_parse_reply+0x504>
  }
  offset = options_idx;
 8008bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bb6:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 8008bb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008bba:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8008bc2:	e1fd      	b.n	8008fc0 <dhcp_parse_reply+0x484>
    u8_t op = options[offset];
 8008bc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc8:	4413      	add	r3, r2
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd6:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8008bd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008bda:	3302      	adds	r3, #2
 8008bdc:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8008bde:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008be0:	3301      	adds	r3, #1
 8008be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be4:	8952      	ldrh	r2, [r2, #10]
 8008be6:	4293      	cmp	r3, r2
 8008be8:	da06      	bge.n	8008bf8 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 8008bea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008bec:	3301      	adds	r3, #1
 8008bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf0:	4413      	add	r3, r2
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	77fb      	strb	r3, [r7, #31]
 8008bf6:	e00a      	b.n	8008c0e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <dhcp_parse_reply+0xce>
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	e000      	b.n	8008c0c <dhcp_parse_reply+0xd0>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8008c0e:	7ffb      	ldrb	r3, [r7, #31]
 8008c10:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8008c12:	7d7b      	ldrb	r3, [r7, #21]
 8008c14:	2b3b      	cmp	r3, #59	; 0x3b
 8008c16:	f200 8121 	bhi.w	8008e5c <dhcp_parse_reply+0x320>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <dhcp_parse_reply+0xe4>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008d11 	.word	0x08008d11
 8008c24:	08008d21 	.word	0x08008d21
 8008c28:	08008e5d 	.word	0x08008e5d
 8008c2c:	08008d41 	.word	0x08008d41
 8008c30:	08008e5d 	.word	0x08008e5d
 8008c34:	08008e5d 	.word	0x08008e5d
 8008c38:	08008e5d 	.word	0x08008e5d
 8008c3c:	08008e5d 	.word	0x08008e5d
 8008c40:	08008e5d 	.word	0x08008e5d
 8008c44:	08008e5d 	.word	0x08008e5d
 8008c48:	08008e5d 	.word	0x08008e5d
 8008c4c:	08008e5d 	.word	0x08008e5d
 8008c50:	08008e5d 	.word	0x08008e5d
 8008c54:	08008e5d 	.word	0x08008e5d
 8008c58:	08008e5d 	.word	0x08008e5d
 8008c5c:	08008e5d 	.word	0x08008e5d
 8008c60:	08008e5d 	.word	0x08008e5d
 8008c64:	08008e5d 	.word	0x08008e5d
 8008c68:	08008e5d 	.word	0x08008e5d
 8008c6c:	08008e5d 	.word	0x08008e5d
 8008c70:	08008e5d 	.word	0x08008e5d
 8008c74:	08008e5d 	.word	0x08008e5d
 8008c78:	08008e5d 	.word	0x08008e5d
 8008c7c:	08008e5d 	.word	0x08008e5d
 8008c80:	08008e5d 	.word	0x08008e5d
 8008c84:	08008e5d 	.word	0x08008e5d
 8008c88:	08008e5d 	.word	0x08008e5d
 8008c8c:	08008e5d 	.word	0x08008e5d
 8008c90:	08008e5d 	.word	0x08008e5d
 8008c94:	08008e5d 	.word	0x08008e5d
 8008c98:	08008e5d 	.word	0x08008e5d
 8008c9c:	08008e5d 	.word	0x08008e5d
 8008ca0:	08008e5d 	.word	0x08008e5d
 8008ca4:	08008e5d 	.word	0x08008e5d
 8008ca8:	08008e5d 	.word	0x08008e5d
 8008cac:	08008e5d 	.word	0x08008e5d
 8008cb0:	08008e5d 	.word	0x08008e5d
 8008cb4:	08008e5d 	.word	0x08008e5d
 8008cb8:	08008e5d 	.word	0x08008e5d
 8008cbc:	08008e5d 	.word	0x08008e5d
 8008cc0:	08008e5d 	.word	0x08008e5d
 8008cc4:	08008e5d 	.word	0x08008e5d
 8008cc8:	08008e5d 	.word	0x08008e5d
 8008ccc:	08008e5d 	.word	0x08008e5d
 8008cd0:	08008e5d 	.word	0x08008e5d
 8008cd4:	08008e5d 	.word	0x08008e5d
 8008cd8:	08008e5d 	.word	0x08008e5d
 8008cdc:	08008e5d 	.word	0x08008e5d
 8008ce0:	08008e5d 	.word	0x08008e5d
 8008ce4:	08008e5d 	.word	0x08008e5d
 8008ce8:	08008e5d 	.word	0x08008e5d
 8008cec:	08008d67 	.word	0x08008d67
 8008cf0:	08008d87 	.word	0x08008d87
 8008cf4:	08008dc1 	.word	0x08008dc1
 8008cf8:	08008de1 	.word	0x08008de1
 8008cfc:	08008e5d 	.word	0x08008e5d
 8008d00:	08008e5d 	.word	0x08008e5d
 8008d04:	08008e5d 	.word	0x08008e5d
 8008d08:	08008e01 	.word	0x08008e01
 8008d0c:	08008e3d 	.word	0x08008e3d
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	77fb      	strb	r3, [r7, #31]
 8008d14:	7ffb      	ldrb	r3, [r7, #31]
 8008d16:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8008d18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8008d1e:	e0a0      	b.n	8008e62 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008d20:	7ffb      	ldrb	r3, [r7, #31]
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d009      	beq.n	8008d3a <dhcp_parse_reply+0x1fe>
 8008d26:	4b3f      	ldr	r3, [pc, #252]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008d28:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8008d2c:	493e      	ldr	r1, [pc, #248]	; (8008e28 <dhcp_parse_reply+0x2ec>)
 8008d2e:	483f      	ldr	r0, [pc, #252]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008d30:	f00b fb4c 	bl	80143cc <iprintf>
 8008d34:	f06f 0305 	mvn.w	r3, #5
 8008d38:	e182      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	61bb      	str	r3, [r7, #24]
        break;
 8008d3e:	e090      	b.n	8008e62 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8008d40:	2304      	movs	r3, #4
 8008d42:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8008d44:	7ffa      	ldrb	r2, [r7, #31]
 8008d46:	7fbb      	ldrb	r3, [r7, #30]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d209      	bcs.n	8008d60 <dhcp_parse_reply+0x224>
 8008d4c:	4b35      	ldr	r3, [pc, #212]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008d4e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8008d52:	4937      	ldr	r1, [pc, #220]	; (8008e30 <dhcp_parse_reply+0x2f4>)
 8008d54:	4835      	ldr	r0, [pc, #212]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008d56:	f00b fb39 	bl	80143cc <iprintf>
 8008d5a:	f06f 0305 	mvn.w	r3, #5
 8008d5e:	e16f      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8008d60:	2307      	movs	r3, #7
 8008d62:	61bb      	str	r3, [r7, #24]
        break;
 8008d64:	e07d      	b.n	8008e62 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008d66:	7ffb      	ldrb	r3, [r7, #31]
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d009      	beq.n	8008d80 <dhcp_parse_reply+0x244>
 8008d6c:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008d6e:	f240 6209 	movw	r2, #1545	; 0x609
 8008d72:	492d      	ldr	r1, [pc, #180]	; (8008e28 <dhcp_parse_reply+0x2ec>)
 8008d74:	482d      	ldr	r0, [pc, #180]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008d76:	f00b fb29 	bl	80143cc <iprintf>
 8008d7a:	f06f 0305 	mvn.w	r3, #5
 8008d7e:	e15f      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8008d80:	2303      	movs	r3, #3
 8008d82:	61bb      	str	r3, [r7, #24]
        break;
 8008d84:	e06d      	b.n	8008e62 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8008d86:	7ffb      	ldrb	r3, [r7, #31]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d009      	beq.n	8008da0 <dhcp_parse_reply+0x264>
 8008d8c:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008d8e:	f240 6217 	movw	r2, #1559	; 0x617
 8008d92:	4928      	ldr	r1, [pc, #160]	; (8008e34 <dhcp_parse_reply+0x2f8>)
 8008d94:	4825      	ldr	r0, [pc, #148]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008d96:	f00b fb19 	bl	80143cc <iprintf>
 8008d9a:	f06f 0305 	mvn.w	r3, #5
 8008d9e:	e14f      	b.n	8009040 <dhcp_parse_reply+0x504>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8008da0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008da2:	2bf0      	cmp	r3, #240	; 0xf0
 8008da4:	d009      	beq.n	8008dba <dhcp_parse_reply+0x27e>
 8008da6:	4b1f      	ldr	r3, [pc, #124]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008da8:	f240 6219 	movw	r2, #1561	; 0x619
 8008dac:	4922      	ldr	r1, [pc, #136]	; (8008e38 <dhcp_parse_reply+0x2fc>)
 8008dae:	481f      	ldr	r0, [pc, #124]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008db0:	f00b fb0c 	bl	80143cc <iprintf>
 8008db4:	f06f 0305 	mvn.w	r3, #5
 8008db8:	e142      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
        break;
 8008dbe:	e050      	b.n	8008e62 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8008dc0:	7ffb      	ldrb	r3, [r7, #31]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d009      	beq.n	8008dda <dhcp_parse_reply+0x29e>
 8008dc6:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008dc8:	f240 621d 	movw	r2, #1565	; 0x61d
 8008dcc:	4919      	ldr	r1, [pc, #100]	; (8008e34 <dhcp_parse_reply+0x2f8>)
 8008dce:	4817      	ldr	r0, [pc, #92]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008dd0:	f00b fafc 	bl	80143cc <iprintf>
 8008dd4:	f06f 0305 	mvn.w	r3, #5
 8008dd8:	e132      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	61bb      	str	r3, [r7, #24]
        break;
 8008dde:	e040      	b.n	8008e62 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008de0:	7ffb      	ldrb	r3, [r7, #31]
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d009      	beq.n	8008dfa <dhcp_parse_reply+0x2be>
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008de8:	f240 6221 	movw	r2, #1569	; 0x621
 8008dec:	490e      	ldr	r1, [pc, #56]	; (8008e28 <dhcp_parse_reply+0x2ec>)
 8008dee:	480f      	ldr	r0, [pc, #60]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008df0:	f00b faec 	bl	80143cc <iprintf>
 8008df4:	f06f 0305 	mvn.w	r3, #5
 8008df8:	e122      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	61bb      	str	r3, [r7, #24]
        break;
 8008dfe:	e030      	b.n	8008e62 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008e00:	7ffb      	ldrb	r3, [r7, #31]
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d009      	beq.n	8008e1a <dhcp_parse_reply+0x2de>
 8008e06:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <dhcp_parse_reply+0x2e8>)
 8008e08:	f240 6225 	movw	r2, #1573	; 0x625
 8008e0c:	4906      	ldr	r1, [pc, #24]	; (8008e28 <dhcp_parse_reply+0x2ec>)
 8008e0e:	4807      	ldr	r0, [pc, #28]	; (8008e2c <dhcp_parse_reply+0x2f0>)
 8008e10:	f00b fadc 	bl	80143cc <iprintf>
 8008e14:	f06f 0305 	mvn.w	r3, #5
 8008e18:	e112      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_T1;
 8008e1a:	2304      	movs	r3, #4
 8008e1c:	61bb      	str	r3, [r7, #24]
        break;
 8008e1e:	e020      	b.n	8008e62 <dhcp_parse_reply+0x326>
 8008e20:	20003ff8 	.word	0x20003ff8
 8008e24:	08015c84 	.word	0x08015c84
 8008e28:	08015f1c 	.word	0x08015f1c
 8008e2c:	08015ce4 	.word	0x08015ce4
 8008e30:	08015f28 	.word	0x08015f28
 8008e34:	08015f3c 	.word	0x08015f3c
 8008e38:	08015f48 	.word	0x08015f48
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008e3c:	7ffb      	ldrb	r3, [r7, #31]
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d009      	beq.n	8008e56 <dhcp_parse_reply+0x31a>
 8008e42:	4b81      	ldr	r3, [pc, #516]	; (8009048 <dhcp_parse_reply+0x50c>)
 8008e44:	f240 6229 	movw	r2, #1577	; 0x629
 8008e48:	4980      	ldr	r1, [pc, #512]	; (800904c <dhcp_parse_reply+0x510>)
 8008e4a:	4881      	ldr	r0, [pc, #516]	; (8009050 <dhcp_parse_reply+0x514>)
 8008e4c:	f00b fabe 	bl	80143cc <iprintf>
 8008e50:	f06f 0305 	mvn.w	r3, #5
 8008e54:	e0f4      	b.n	8009040 <dhcp_parse_reply+0x504>
        decode_idx = DHCP_OPTION_IDX_T2;
 8008e56:	2305      	movs	r3, #5
 8008e58:	61bb      	str	r3, [r7, #24]
        break;
 8008e5a:	e002      	b.n	8008e62 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8008e60:	bf00      	nop
    }
    offset += len + 2;
 8008e62:	7ffb      	ldrb	r3, [r7, #31]
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e68:	4413      	add	r3, r2
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8008e70:	7fbb      	ldrb	r3, [r7, #30]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d07b      	beq.n	8008f6e <dhcp_parse_reply+0x432>
      u32_t value = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	db02      	blt.n	8008e86 <dhcp_parse_reply+0x34a>
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b07      	cmp	r3, #7
 8008e84:	dd06      	ble.n	8008e94 <dhcp_parse_reply+0x358>
 8008e86:	4b70      	ldr	r3, [pc, #448]	; (8009048 <dhcp_parse_reply+0x50c>)
 8008e88:	f240 6236 	movw	r2, #1590	; 0x636
 8008e8c:	4971      	ldr	r1, [pc, #452]	; (8009054 <dhcp_parse_reply+0x518>)
 8008e8e:	4870      	ldr	r0, [pc, #448]	; (8009050 <dhcp_parse_reply+0x514>)
 8008e90:	f00b fa9c 	bl	80143cc <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8008e94:	4a70      	ldr	r2, [pc, #448]	; (8009058 <dhcp_parse_reply+0x51c>)
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d166      	bne.n	8008f6e <dhcp_parse_reply+0x432>
        copy_len = LWIP_MIN(decode_len, 4);
 8008ea0:	7fbb      	ldrb	r3, [r7, #30]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d802      	bhi.n	8008eac <dhcp_parse_reply+0x370>
 8008ea6:	7fbb      	ldrb	r3, [r7, #30]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	e000      	b.n	8008eae <dhcp_parse_reply+0x372>
 8008eac:	2304      	movs	r3, #4
 8008eae:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8008eb0:	8afb      	ldrh	r3, [r7, #22]
 8008eb2:	8a7a      	ldrh	r2, [r7, #18]
 8008eb4:	f107 0108 	add.w	r1, r7, #8
 8008eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eba:	f004 f893 	bl	800cfe4 <pbuf_copy_partial>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	8a7b      	ldrh	r3, [r7, #18]
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d002      	beq.n	8008ece <dhcp_parse_reply+0x392>
          return ERR_BUF;
 8008ec8:	f06f 0301 	mvn.w	r3, #1
 8008ecc:	e0b8      	b.n	8009040 <dhcp_parse_reply+0x504>
        }
        if (decode_len > 4) {
 8008ece:	7fbb      	ldrb	r3, [r7, #30]
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d927      	bls.n	8008f24 <dhcp_parse_reply+0x3e8>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8008ed4:	7fbb      	ldrb	r3, [r7, #30]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <dhcp_parse_reply+0x3b8>
 8008ee0:	4b59      	ldr	r3, [pc, #356]	; (8009048 <dhcp_parse_reply+0x50c>)
 8008ee2:	f240 623e 	movw	r2, #1598	; 0x63e
 8008ee6:	495d      	ldr	r1, [pc, #372]	; (800905c <dhcp_parse_reply+0x520>)
 8008ee8:	4859      	ldr	r0, [pc, #356]	; (8009050 <dhcp_parse_reply+0x514>)
 8008eea:	f00b fa6f 	bl	80143cc <iprintf>
 8008eee:	f06f 0305 	mvn.w	r3, #5
 8008ef2:	e0a5      	b.n	8009040 <dhcp_parse_reply+0x504>
          dhcp_got_option(dhcp, decode_idx);
 8008ef4:	4a58      	ldr	r2, [pc, #352]	; (8009058 <dhcp_parse_reply+0x51c>)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	4413      	add	r3, r2
 8008efa:	2201      	movs	r2, #1
 8008efc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fccd 	bl	80078a0 <lwip_htonl>
 8008f06:	4601      	mov	r1, r0
 8008f08:	4a55      	ldr	r2, [pc, #340]	; (8009060 <dhcp_parse_reply+0x524>)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8008f10:	7fbb      	ldrb	r3, [r7, #30]
 8008f12:	3b04      	subs	r3, #4
 8008f14:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8008f16:	8afb      	ldrh	r3, [r7, #22]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8008f22:	e7aa      	b.n	8008e7a <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8008f24:	7fbb      	ldrb	r3, [r7, #30]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d106      	bne.n	8008f38 <dhcp_parse_reply+0x3fc>
          value = lwip_ntohl(value);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fcb7 	bl	80078a0 <lwip_htonl>
 8008f32:	4603      	mov	r3, r0
 8008f34:	60bb      	str	r3, [r7, #8]
 8008f36:	e010      	b.n	8008f5a <dhcp_parse_reply+0x41e>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8008f38:	7fbb      	ldrb	r3, [r7, #30]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d009      	beq.n	8008f52 <dhcp_parse_reply+0x416>
 8008f3e:	4b42      	ldr	r3, [pc, #264]	; (8009048 <dhcp_parse_reply+0x50c>)
 8008f40:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8008f44:	4947      	ldr	r1, [pc, #284]	; (8009064 <dhcp_parse_reply+0x528>)
 8008f46:	4842      	ldr	r0, [pc, #264]	; (8009050 <dhcp_parse_reply+0x514>)
 8008f48:	f00b fa40 	bl	80143cc <iprintf>
 8008f4c:	f06f 0305 	mvn.w	r3, #5
 8008f50:	e076      	b.n	8009040 <dhcp_parse_reply+0x504>
          value = ((u8_t*)&value)[0];
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 8008f5a:	4a3f      	ldr	r2, [pc, #252]	; (8009058 <dhcp_parse_reply+0x51c>)
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	4413      	add	r3, r2
 8008f60:	2201      	movs	r2, #1
 8008f62:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	493e      	ldr	r1, [pc, #248]	; (8009060 <dhcp_parse_reply+0x524>)
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	895b      	ldrh	r3, [r3, #10]
 8008f72:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d323      	bcc.n	8008fc0 <dhcp_parse_reply+0x484>
      offset -= q->len;
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	895b      	ldrh	r3, [r3, #10]
 8008f7c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	895b      	ldrh	r3, [r3, #10]
 8008f86:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8008f8c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d223      	bcs.n	8008fdc <dhcp_parse_reply+0x4a0>
 8008f94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d020      	beq.n	8008fdc <dhcp_parse_reply+0x4a0>
        q = q->next;
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <dhcp_parse_reply+0x47e>
 8008fa6:	4b28      	ldr	r3, [pc, #160]	; (8009048 <dhcp_parse_reply+0x50c>)
 8008fa8:	f240 6254 	movw	r2, #1620	; 0x654
 8008fac:	492e      	ldr	r1, [pc, #184]	; (8009068 <dhcp_parse_reply+0x52c>)
 8008fae:	4828      	ldr	r0, [pc, #160]	; (8009050 <dhcp_parse_reply+0x514>)
 8008fb0:	f00b fa0c 	bl	80143cc <iprintf>
 8008fb4:	f06f 0305 	mvn.w	r3, #5
 8008fb8:	e042      	b.n	8009040 <dhcp_parse_reply+0x504>
        options = (u8_t*)q->payload;
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <dhcp_parse_reply+0x4a0>
 8008fc6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008fc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d206      	bcs.n	8008fdc <dhcp_parse_reply+0x4a0>
 8008fce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd2:	4413      	add	r3, r2
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2bff      	cmp	r3, #255	; 0xff
 8008fd8:	f47f adf4 	bne.w	8008bc4 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8008fdc:	4b1e      	ldr	r3, [pc, #120]	; (8009058 <dhcp_parse_reply+0x51c>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d018      	beq.n	8009016 <dhcp_parse_reply+0x4da>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8008fe4:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <dhcp_parse_reply+0x524>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8008fea:	4b1b      	ldr	r3, [pc, #108]	; (8009058 <dhcp_parse_reply+0x51c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d102      	bne.n	8008ffc <dhcp_parse_reply+0x4c0>
      parse_file_as_options = 1;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8008ffa:	e00c      	b.n	8009016 <dhcp_parse_reply+0x4da>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d102      	bne.n	8009008 <dhcp_parse_reply+0x4cc>
      parse_sname_as_options = 1;
 8009002:	2301      	movs	r3, #1
 8009004:	623b      	str	r3, [r7, #32]
 8009006:	e006      	b.n	8009016 <dhcp_parse_reply+0x4da>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d103      	bne.n	8009016 <dhcp_parse_reply+0x4da>
      parse_sname_as_options = 1;
 800900e:	2301      	movs	r3, #1
 8009010:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8009012:	2301      	movs	r3, #1
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d006      	beq.n	800902a <dhcp_parse_reply+0x4ee>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8009020:	236c      	movs	r3, #108	; 0x6c
 8009022:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8009024:	23ec      	movs	r3, #236	; 0xec
 8009026:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8009028:	e5a6      	b.n	8008b78 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <dhcp_parse_reply+0x502>
    parse_sname_as_options = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8009034:	232c      	movs	r3, #44	; 0x2c
 8009036:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009038:	236c      	movs	r3, #108	; 0x6c
 800903a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800903c:	e59c      	b.n	8008b78 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3738      	adds	r7, #56	; 0x38
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	08015c84 	.word	0x08015c84
 800904c:	08015f1c 	.word	0x08015f1c
 8009050:	08015ce4 	.word	0x08015ce4
 8009054:	08015f60 	.word	0x08015f60
 8009058:	20003ff8 	.word	0x20003ff8
 800905c:	08015f74 	.word	0x08015f74
 8009060:	20004000 	.word	0x20004000
 8009064:	08015f8c 	.word	0x08015f8c
 8009068:	08015fa0 	.word	0x08015fa0

0800906c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	; 0x28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800907a:	4b67      	ldr	r3, [pc, #412]	; (8009218 <dhcp_recv+0x1ac>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80b4 	beq.w	80091fc <dhcp_recv+0x190>
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	7a1b      	ldrb	r3, [r3, #8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 80af 	beq.w	80091fc <dhcp_recv+0x190>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <dhcp_recv+0x48>
 80090a6:	4b5d      	ldr	r3, [pc, #372]	; (800921c <dhcp_recv+0x1b0>)
 80090a8:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 80090ac:	495c      	ldr	r1, [pc, #368]	; (8009220 <dhcp_recv+0x1b4>)
 80090ae:	485d      	ldr	r0, [pc, #372]	; (8009224 <dhcp_recv+0x1b8>)
 80090b0:	f00b f98c 	bl	80143cc <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	895b      	ldrh	r3, [r3, #10]
 80090b8:	2b2b      	cmp	r3, #43	; 0x2b
 80090ba:	f240 8094 	bls.w	80091e6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	f040 8091 	bne.w	80091ea <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090ce:	e012      	b.n	80090f6 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80090d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d4:	6a3a      	ldr	r2, [r7, #32]
 80090d6:	4413      	add	r3, r2
 80090d8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80090dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e0:	69b9      	ldr	r1, [r7, #24]
 80090e2:	440b      	add	r3, r1
 80090e4:	7f1b      	ldrb	r3, [r3, #28]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	f040 8081 	bne.w	80091ee <dhcp_recv+0x182>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80090ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090f0:	3301      	adds	r3, #1
 80090f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009100:	429a      	cmp	r2, r3
 8009102:	d207      	bcs.n	8009114 <dhcp_recv+0xa8>
 8009104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009108:	2b05      	cmp	r3, #5
 800910a:	d803      	bhi.n	8009114 <dhcp_recv+0xa8>
 800910c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009110:	2b0f      	cmp	r3, #15
 8009112:	d9dd      	bls.n	80090d0 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4618      	mov	r0, r3
 800911a:	f7fe fbc1 	bl	80078a0 <lwip_htonl>
 800911e:	4602      	mov	r2, r0
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d164      	bne.n	80091f2 <dhcp_recv+0x186>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	69f8      	ldr	r0, [r7, #28]
 800912c:	f7ff fd06 	bl	8008b3c <dhcp_parse_reply>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d15f      	bne.n	80091f6 <dhcp_recv+0x18a>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009136:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <dhcp_recv+0x1bc>)
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d05d      	beq.n	80091fa <dhcp_recv+0x18e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800913e:	4b3b      	ldr	r3, [pc, #236]	; (800922c <dhcp_recv+0x1c0>)
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b05      	cmp	r3, #5
 8009148:	d128      	bne.n	800919c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	7a5b      	ldrb	r3, [r3, #9]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d111      	bne.n	8009176 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8009152:	6a38      	ldr	r0, [r7, #32]
 8009154:	f7fe fe98 	bl	8007e88 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8009166:	6a38      	ldr	r0, [r7, #32]
 8009168:	f7fe fc60 	bl	8007a2c <dhcp_check>
 800916c:	e046      	b.n	80091fc <dhcp_recv+0x190>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800916e:	6a38      	ldr	r0, [r7, #32]
 8009170:	f7ff f898 	bl	80082a4 <dhcp_bind>
 8009174:	e042      	b.n	80091fc <dhcp_recv+0x190>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	7a5b      	ldrb	r3, [r3, #9]
 800917a:	2b03      	cmp	r3, #3
 800917c:	d007      	beq.n	800918e <dhcp_recv+0x122>
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	7a5b      	ldrb	r3, [r3, #9]
 8009182:	2b04      	cmp	r3, #4
 8009184:	d003      	beq.n	800918e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800918a:	2b05      	cmp	r3, #5
 800918c:	d136      	bne.n	80091fc <dhcp_recv+0x190>
      dhcp_handle_ack(netif);
 800918e:	6a38      	ldr	r0, [r7, #32]
 8009190:	f7fe fe7a 	bl	8007e88 <dhcp_handle_ack>
      dhcp_bind(netif);
 8009194:	6a38      	ldr	r0, [r7, #32]
 8009196:	f7ff f885 	bl	80082a4 <dhcp_bind>
 800919a:	e02f      	b.n	80091fc <dhcp_recv+0x190>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	2b06      	cmp	r3, #6
 80091a0:	d113      	bne.n	80091ca <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d00b      	beq.n	80091c2 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	7a5b      	ldrb	r3, [r3, #9]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d007      	beq.n	80091c2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d003      	beq.n	80091c2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	7a5b      	ldrb	r3, [r3, #9]
 80091be:	2b05      	cmp	r3, #5
 80091c0:	d103      	bne.n	80091ca <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80091c2:	6a38      	ldr	r0, [r7, #32]
 80091c4:	f7fe fc18 	bl	80079f8 <dhcp_handle_nak>
 80091c8:	e018      	b.n	80091fc <dhcp_recv+0x190>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d115      	bne.n	80091fc <dhcp_recv+0x190>
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	7a5b      	ldrb	r3, [r3, #9]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d111      	bne.n	80091fc <dhcp_recv+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2200      	movs	r2, #0
 80091dc:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 80091de:	6a38      	ldr	r0, [r7, #32]
 80091e0:	f7fe fc58 	bl	8007a94 <dhcp_handle_offer>
 80091e4:	e00a      	b.n	80091fc <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 80091e6:	bf00      	nop
 80091e8:	e008      	b.n	80091fc <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 80091ea:	bf00      	nop
 80091ec:	e006      	b.n	80091fc <dhcp_recv+0x190>
      goto free_pbuf_and_return;
 80091ee:	bf00      	nop
 80091f0:	e004      	b.n	80091fc <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 80091fa:	bf00      	nop
  }

free_pbuf_and_return:
  if (dhcp != NULL) {
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <dhcp_recv+0x19c>
    dhcp->msg_in = NULL;
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f003 fcdf 	bl	800cbcc <pbuf_free>
}
 800920e:	bf00      	nop
 8009210:	3728      	adds	r7, #40	; 0x28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20003fe0 	.word	0x20003fe0
 800921c:	08015c84 	.word	0x08015c84
 8009220:	08015db0 	.word	0x08015db0
 8009224:	08015ce4 	.word	0x08015ce4
 8009228:	20003ff8 	.word	0x20003ff8
 800922c:	20004000 	.word	0x20004000

08009230 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <dhcp_create_msg+0x28>
 8009244:	4ba3      	ldr	r3, [pc, #652]	; (80094d4 <dhcp_create_msg+0x2a4>)
 8009246:	f240 721d 	movw	r2, #1821	; 0x71d
 800924a:	49a3      	ldr	r1, [pc, #652]	; (80094d8 <dhcp_create_msg+0x2a8>)
 800924c:	48a3      	ldr	r0, [pc, #652]	; (80094dc <dhcp_create_msg+0x2ac>)
 800924e:	f00b f8bd 	bl	80143cc <iprintf>
 8009252:	f06f 030f 	mvn.w	r3, #15
 8009256:	e138      	b.n	80094ca <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <dhcp_create_msg+0x42>
 800925e:	4b9d      	ldr	r3, [pc, #628]	; (80094d4 <dhcp_create_msg+0x2a4>)
 8009260:	f240 721e 	movw	r2, #1822	; 0x71e
 8009264:	499e      	ldr	r1, [pc, #632]	; (80094e0 <dhcp_create_msg+0x2b0>)
 8009266:	489d      	ldr	r0, [pc, #628]	; (80094dc <dhcp_create_msg+0x2ac>)
 8009268:	f00b f8b0 	bl	80143cc <iprintf>
 800926c:	f06f 0305 	mvn.w	r3, #5
 8009270:	e12b      	b.n	80094ca <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d006      	beq.n	8009288 <dhcp_create_msg+0x58>
 800927a:	4b96      	ldr	r3, [pc, #600]	; (80094d4 <dhcp_create_msg+0x2a4>)
 800927c:	f240 721f 	movw	r2, #1823	; 0x71f
 8009280:	4998      	ldr	r1, [pc, #608]	; (80094e4 <dhcp_create_msg+0x2b4>)
 8009282:	4896      	ldr	r0, [pc, #600]	; (80094dc <dhcp_create_msg+0x2ac>)
 8009284:	f00b f8a2 	bl	80143cc <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d006      	beq.n	800929e <dhcp_create_msg+0x6e>
 8009290:	4b90      	ldr	r3, [pc, #576]	; (80094d4 <dhcp_create_msg+0x2a4>)
 8009292:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8009296:	4994      	ldr	r1, [pc, #592]	; (80094e8 <dhcp_create_msg+0x2b8>)
 8009298:	4890      	ldr	r0, [pc, #576]	; (80094dc <dhcp_create_msg+0x2ac>)
 800929a:	f00b f897 	bl	80143cc <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800929e:	2200      	movs	r2, #0
 80092a0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80092a4:	2000      	movs	r0, #0
 80092a6:	f003 f91f 	bl	800c4e8 <pbuf_alloc>
 80092aa:	4602      	mov	r2, r0
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d102      	bne.n	80092be <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 80092b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092bc:	e105      	b.n	80094ca <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	895b      	ldrh	r3, [r3, #10]
 80092c4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80092c8:	d206      	bcs.n	80092d8 <dhcp_create_msg+0xa8>
 80092ca:	4b82      	ldr	r3, [pc, #520]	; (80094d4 <dhcp_create_msg+0x2a4>)
 80092cc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80092d0:	4986      	ldr	r1, [pc, #536]	; (80094ec <dhcp_create_msg+0x2bc>)
 80092d2:	4882      	ldr	r0, [pc, #520]	; (80094dc <dhcp_create_msg+0x2ac>)
 80092d4:	f00b f87a 	bl	80143cc <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d103      	bne.n	80092e6 <dhcp_create_msg+0xb6>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	7a5b      	ldrb	r3, [r3, #9]
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d10d      	bne.n	8009302 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	7a9b      	ldrb	r3, [r3, #10]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80092ee:	f00b f885 	bl	80143fc <rand>
 80092f2:	4603      	mov	r3, r0
 80092f4:	461a      	mov	r2, r3
 80092f6:	4b7e      	ldr	r3, [pc, #504]	; (80094f0 <dhcp_create_msg+0x2c0>)
 80092f8:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80092fa:	4b7d      	ldr	r3, [pc, #500]	; (80094f0 <dhcp_create_msg+0x2c0>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	2201      	movs	r2, #1
 8009312:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2201      	movs	r2, #1
 800931a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8009326:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2200      	movs	r2, #0
 800932e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	691c      	ldr	r4, [r3, #16]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fab1 	bl	80078a0 <lwip_htonl>
 800933e:	4603      	mov	r3, r0
 8009340:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2200      	movs	r2, #0
 8009348:	721a      	strb	r2, [r3, #8]
 800934a:	2200      	movs	r2, #0
 800934c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	2200      	movs	r2, #0
 8009354:	729a      	strb	r2, [r3, #10]
 8009356:	2200      	movs	r2, #0
 8009358:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2200      	movs	r2, #0
 8009360:	731a      	strb	r2, [r3, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	735a      	strb	r2, [r3, #13]
 8009366:	2200      	movs	r2, #0
 8009368:	739a      	strb	r2, [r3, #14]
 800936a:	2200      	movs	r2, #0
 800936c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b08      	cmp	r3, #8
 8009372:	d010      	beq.n	8009396 <dhcp_create_msg+0x166>
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	2b04      	cmp	r3, #4
 8009378:	d00d      	beq.n	8009396 <dhcp_create_msg+0x166>
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b07      	cmp	r3, #7
 800937e:	d00a      	beq.n	8009396 <dhcp_create_msg+0x166>
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b03      	cmp	r3, #3
 8009384:	d10d      	bne.n	80093a2 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800938a:	2b05      	cmp	r3, #5
 800938c:	d003      	beq.n	8009396 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	7a5b      	ldrb	r3, [r3, #9]
 8009392:	2b04      	cmp	r3, #4
 8009394:	d105      	bne.n	80093a2 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	3204      	adds	r2, #4
 800939e:	6812      	ldr	r2, [r2, #0]
 80093a0:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2200      	movs	r2, #0
 80093a8:	741a      	strb	r2, [r3, #16]
 80093aa:	2200      	movs	r2, #0
 80093ac:	745a      	strb	r2, [r3, #17]
 80093ae:	2200      	movs	r2, #0
 80093b0:	749a      	strb	r2, [r3, #18]
 80093b2:	2200      	movs	r2, #0
 80093b4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2200      	movs	r2, #0
 80093bc:	751a      	strb	r2, [r3, #20]
 80093be:	2200      	movs	r2, #0
 80093c0:	755a      	strb	r2, [r3, #21]
 80093c2:	2200      	movs	r2, #0
 80093c4:	759a      	strb	r2, [r3, #22]
 80093c6:	2200      	movs	r2, #0
 80093c8:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2200      	movs	r2, #0
 80093d0:	761a      	strb	r2, [r3, #24]
 80093d2:	2200      	movs	r2, #0
 80093d4:	765a      	strb	r2, [r3, #25]
 80093d6:	2200      	movs	r2, #0
 80093d8:	769a      	strb	r2, [r3, #26]
 80093da:	2200      	movs	r2, #0
 80093dc:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80093de:	2300      	movs	r3, #0
 80093e0:	82fb      	strh	r3, [r7, #22]
 80093e2:	e019      	b.n	8009418 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	8afb      	ldrh	r3, [r7, #22]
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80093f0:	b289      	uxth	r1, r1
 80093f2:	8af8      	ldrh	r0, [r7, #22]
 80093f4:	4288      	cmp	r0, r1
 80093f6:	d208      	bcs.n	800940a <dhcp_create_msg+0x1da>
 80093f8:	8af9      	ldrh	r1, [r7, #22]
 80093fa:	2905      	cmp	r1, #5
 80093fc:	d805      	bhi.n	800940a <dhcp_create_msg+0x1da>
 80093fe:	8af9      	ldrh	r1, [r7, #22]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	4401      	add	r1, r0
 8009404:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8009408:	e000      	b.n	800940c <dhcp_create_msg+0x1dc>
 800940a:	2100      	movs	r1, #0
 800940c:	4413      	add	r3, r2
 800940e:	460a      	mov	r2, r1
 8009410:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009412:	8afb      	ldrh	r3, [r7, #22]
 8009414:	3301      	adds	r3, #1
 8009416:	82fb      	strh	r3, [r7, #22]
 8009418:	8afb      	ldrh	r3, [r7, #22]
 800941a:	2b0f      	cmp	r3, #15
 800941c:	d9e2      	bls.n	80093e4 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800941e:	2300      	movs	r3, #0
 8009420:	82fb      	strh	r3, [r7, #22]
 8009422:	e009      	b.n	8009438 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	8afb      	ldrh	r3, [r7, #22]
 800942a:	4413      	add	r3, r2
 800942c:	2200      	movs	r2, #0
 800942e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8009432:	8afb      	ldrh	r3, [r7, #22]
 8009434:	3301      	adds	r3, #1
 8009436:	82fb      	strh	r3, [r7, #22]
 8009438:	8afb      	ldrh	r3, [r7, #22]
 800943a:	2b3f      	cmp	r3, #63	; 0x3f
 800943c:	d9f2      	bls.n	8009424 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800943e:	2300      	movs	r3, #0
 8009440:	82fb      	strh	r3, [r7, #22]
 8009442:	e009      	b.n	8009458 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	8afb      	ldrh	r3, [r7, #22]
 800944a:	4413      	add	r3, r2
 800944c:	2200      	movs	r2, #0
 800944e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8009452:	8afb      	ldrh	r3, [r7, #22]
 8009454:	3301      	adds	r3, #1
 8009456:	82fb      	strh	r3, [r7, #22]
 8009458:	8afb      	ldrh	r3, [r7, #22]
 800945a:	2b7f      	cmp	r3, #127	; 0x7f
 800945c:	d9f2      	bls.n	8009444 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2200      	movs	r2, #0
 8009464:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009468:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800946c:	2200      	movs	r2, #0
 800946e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8009472:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8009476:	2200      	movs	r2, #0
 8009478:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800947c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009480:	2200      	movs	r2, #0
 8009482:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009486:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2200      	movs	r2, #0
 800948e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8009490:	2300      	movs	r3, #0
 8009492:	82fb      	strh	r3, [r7, #22]
 8009494:	e00b      	b.n	80094ae <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	691a      	ldr	r2, [r3, #16]
 800949a:	8afb      	ldrh	r3, [r7, #22]
 800949c:	8af9      	ldrh	r1, [r7, #22]
 800949e:	b2c9      	uxtb	r1, r1
 80094a0:	4413      	add	r3, r2
 80094a2:	460a      	mov	r2, r1
 80094a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80094a8:	8afb      	ldrh	r3, [r7, #22]
 80094aa:	3301      	adds	r3, #1
 80094ac:	82fb      	strh	r3, [r7, #22]
 80094ae:	8afb      	ldrh	r3, [r7, #22]
 80094b0:	2b43      	cmp	r3, #67	; 0x43
 80094b2:	d9f0      	bls.n	8009496 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80094b4:	2201      	movs	r2, #1
 80094b6:	2135      	movs	r1, #53	; 0x35
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f7ff fa47 	bl	800894c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	4619      	mov	r1, r3
 80094c2:	68b8      	ldr	r0, [r7, #8]
 80094c4:	f7ff fa7c 	bl	80089c0 <dhcp_option_byte>
  return ERR_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd90      	pop	{r4, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	08015c84 	.word	0x08015c84
 80094d8:	08015fb4 	.word	0x08015fb4
 80094dc:	08015ce4 	.word	0x08015ce4
 80094e0:	08015fd4 	.word	0x08015fd4
 80094e4:	08015ff4 	.word	0x08015ff4
 80094e8:	0801601c 	.word	0x0801601c
 80094ec:	08016044 	.word	0x08016044
 80094f0:	20003dfc 	.word	0x20003dfc

080094f4 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d107      	bne.n	8009512 <dhcp_delete_msg+0x1e>
 8009502:	4b18      	ldr	r3, [pc, #96]	; (8009564 <dhcp_delete_msg+0x70>)
 8009504:	f240 726d 	movw	r2, #1901	; 0x76d
 8009508:	4917      	ldr	r1, [pc, #92]	; (8009568 <dhcp_delete_msg+0x74>)
 800950a:	4818      	ldr	r0, [pc, #96]	; (800956c <dhcp_delete_msg+0x78>)
 800950c:	f00a ff5e 	bl	80143cc <iprintf>
 8009510:	e024      	b.n	800955c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <dhcp_delete_msg+0x34>
 800951a:	4b12      	ldr	r3, [pc, #72]	; (8009564 <dhcp_delete_msg+0x70>)
 800951c:	f240 726e 	movw	r2, #1902	; 0x76e
 8009520:	4913      	ldr	r1, [pc, #76]	; (8009570 <dhcp_delete_msg+0x7c>)
 8009522:	4812      	ldr	r0, [pc, #72]	; (800956c <dhcp_delete_msg+0x78>)
 8009524:	f00a ff52 	bl	80143cc <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <dhcp_delete_msg+0x4a>
 8009530:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <dhcp_delete_msg+0x70>)
 8009532:	f240 726f 	movw	r2, #1903	; 0x76f
 8009536:	490f      	ldr	r1, [pc, #60]	; (8009574 <dhcp_delete_msg+0x80>)
 8009538:	480c      	ldr	r0, [pc, #48]	; (800956c <dhcp_delete_msg+0x78>)
 800953a:	f00a ff47 	bl	80143cc <iprintf>
  if (dhcp->p_out != NULL) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d004      	beq.n	8009550 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	4618      	mov	r0, r3
 800954c:	f003 fb3e 	bl	800cbcc <pbuf_free>
  }
  dhcp->p_out = NULL;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	611a      	str	r2, [r3, #16]
}
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	08015c84 	.word	0x08015c84
 8009568:	08016084 	.word	0x08016084
 800956c:	08015ce4 	.word	0x08015ce4
 8009570:	080160a4 	.word	0x080160a4
 8009574:	080160cc 	.word	0x080160cc

08009578 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d107      	bne.n	8009596 <dhcp_option_trailer+0x1e>
 8009586:	4b24      	ldr	r3, [pc, #144]	; (8009618 <dhcp_option_trailer+0xa0>)
 8009588:	f240 7282 	movw	r2, #1922	; 0x782
 800958c:	4923      	ldr	r1, [pc, #140]	; (800961c <dhcp_option_trailer+0xa4>)
 800958e:	4824      	ldr	r0, [pc, #144]	; (8009620 <dhcp_option_trailer+0xa8>)
 8009590:	f00a ff1c 	bl	80143cc <iprintf>
 8009594:	e03c      	b.n	8009610 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <dhcp_option_trailer+0x34>
 800959e:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <dhcp_option_trailer+0xa0>)
 80095a0:	f240 7283 	movw	r2, #1923	; 0x783
 80095a4:	491f      	ldr	r1, [pc, #124]	; (8009624 <dhcp_option_trailer+0xac>)
 80095a6:	481e      	ldr	r0, [pc, #120]	; (8009620 <dhcp_option_trailer+0xa8>)
 80095a8:	f00a ff10 	bl	80143cc <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8a9b      	ldrh	r3, [r3, #20]
 80095b0:	2b43      	cmp	r3, #67	; 0x43
 80095b2:	d906      	bls.n	80095c2 <dhcp_option_trailer+0x4a>
 80095b4:	4b18      	ldr	r3, [pc, #96]	; (8009618 <dhcp_option_trailer+0xa0>)
 80095b6:	f240 7284 	movw	r2, #1924	; 0x784
 80095ba:	491b      	ldr	r1, [pc, #108]	; (8009628 <dhcp_option_trailer+0xb0>)
 80095bc:	4818      	ldr	r0, [pc, #96]	; (8009620 <dhcp_option_trailer+0xa8>)
 80095be:	f00a ff05 	bl	80143cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691a      	ldr	r2, [r3, #16]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	8a9b      	ldrh	r3, [r3, #20]
 80095ca:	1c59      	adds	r1, r3, #1
 80095cc:	b288      	uxth	r0, r1
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	8288      	strh	r0, [r1, #20]
 80095d2:	4413      	add	r3, r2
 80095d4:	22ff      	movs	r2, #255	; 0xff
 80095d6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80095da:	e00b      	b.n	80095f4 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	8a9b      	ldrh	r3, [r3, #20]
 80095e4:	1c59      	adds	r1, r3, #1
 80095e6:	b288      	uxth	r0, r1
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	8288      	strh	r0, [r1, #20]
 80095ec:	4413      	add	r3, r2
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	8a9b      	ldrh	r3, [r3, #20]
 80095f8:	2b43      	cmp	r3, #67	; 0x43
 80095fa:	d905      	bls.n	8009608 <dhcp_option_trailer+0x90>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8a9b      	ldrh	r3, [r3, #20]
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800960c:	2b43      	cmp	r3, #67	; 0x43
 800960e:	d9e5      	bls.n	80095dc <dhcp_option_trailer+0x64>
  }
}
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	08015c84 	.word	0x08015c84
 800961c:	080160f4 	.word	0x080160f4
 8009620:	08015ce4 	.word	0x08015ce4
 8009624:	08016118 	.word	0x08016118
 8009628:	08016144 	.word	0x08016144

0800962c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d017      	beq.n	800966a <dhcp_supplied_address+0x3e>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d013      	beq.n	800966a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	7a5b      	ldrb	r3, [r3, #9]
 800964c:	2b0a      	cmp	r3, #10
 800964e:	d007      	beq.n	8009660 <dhcp_supplied_address+0x34>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	7a5b      	ldrb	r3, [r3, #9]
 8009654:	2b05      	cmp	r3, #5
 8009656:	d003      	beq.n	8009660 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800965c:	2b04      	cmp	r3, #4
 800965e:	d101      	bne.n	8009664 <dhcp_supplied_address+0x38>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <dhcp_supplied_address+0x3a>
 8009664:	2300      	movs	r3, #0
 8009666:	b2db      	uxtb	r3, r3
 8009668:	e000      	b.n	800966c <dhcp_supplied_address+0x40>
  }
  return 0;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009680:	4915      	ldr	r1, [pc, #84]	; (80096d8 <etharp_free_entry+0x60>)
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4613      	mov	r3, r2
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	4413      	add	r3, r2
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	440b      	add	r3, r1
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d013      	beq.n	80096bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009694:	4910      	ldr	r1, [pc, #64]	; (80096d8 <etharp_free_entry+0x60>)
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	4613      	mov	r3, r2
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	4413      	add	r3, r2
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	440b      	add	r3, r1
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f003 fa91 	bl	800cbcc <pbuf_free>
    arp_table[i].q = NULL;
 80096aa:	490b      	ldr	r1, [pc, #44]	; (80096d8 <etharp_free_entry+0x60>)
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	4413      	add	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	440b      	add	r3, r1
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80096bc:	4906      	ldr	r1, [pc, #24]	; (80096d8 <etharp_free_entry+0x60>)
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	4413      	add	r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	440b      	add	r3, r1
 80096ca:	3314      	adds	r3, #20
 80096cc:	2200      	movs	r2, #0
 80096ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20003e00 	.word	0x20003e00

080096dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80096e2:	2300      	movs	r3, #0
 80096e4:	71fb      	strb	r3, [r7, #7]
 80096e6:	e096      	b.n	8009816 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80096e8:	79fa      	ldrb	r2, [r7, #7]
 80096ea:	494f      	ldr	r1, [pc, #316]	; (8009828 <etharp_tmr+0x14c>)
 80096ec:	4613      	mov	r3, r2
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	4413      	add	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	440b      	add	r3, r1
 80096f6:	3314      	adds	r3, #20
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80096fc:	79bb      	ldrb	r3, [r7, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8086 	beq.w	8009810 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8009704:	79fa      	ldrb	r2, [r7, #7]
 8009706:	4948      	ldr	r1, [pc, #288]	; (8009828 <etharp_tmr+0x14c>)
 8009708:	4613      	mov	r3, r2
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	4413      	add	r3, r2
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	440b      	add	r3, r1
 8009712:	3312      	adds	r3, #18
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	3301      	adds	r3, #1
 8009718:	b298      	uxth	r0, r3
 800971a:	4943      	ldr	r1, [pc, #268]	; (8009828 <etharp_tmr+0x14c>)
 800971c:	4613      	mov	r3, r2
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	4413      	add	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	440b      	add	r3, r1
 8009726:	3312      	adds	r3, #18
 8009728:	4602      	mov	r2, r0
 800972a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800972c:	79fa      	ldrb	r2, [r7, #7]
 800972e:	493e      	ldr	r1, [pc, #248]	; (8009828 <etharp_tmr+0x14c>)
 8009730:	4613      	mov	r3, r2
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	4413      	add	r3, r2
 8009736:	00db      	lsls	r3, r3, #3
 8009738:	440b      	add	r3, r1
 800973a:	3312      	adds	r3, #18
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009742:	d215      	bcs.n	8009770 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	4938      	ldr	r1, [pc, #224]	; (8009828 <etharp_tmr+0x14c>)
 8009748:	4613      	mov	r3, r2
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	4413      	add	r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	440b      	add	r3, r1
 8009752:	3314      	adds	r3, #20
 8009754:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009756:	2b01      	cmp	r3, #1
 8009758:	d10f      	bne.n	800977a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800975a:	79fa      	ldrb	r2, [r7, #7]
 800975c:	4932      	ldr	r1, [pc, #200]	; (8009828 <etharp_tmr+0x14c>)
 800975e:	4613      	mov	r3, r2
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	4413      	add	r3, r2
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	440b      	add	r3, r1
 8009768:	3312      	adds	r3, #18
 800976a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800976c:	2b04      	cmp	r3, #4
 800976e:	d904      	bls.n	800977a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff ff80 	bl	8009678 <etharp_free_entry>
 8009778:	e04a      	b.n	8009810 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800977a:	79fa      	ldrb	r2, [r7, #7]
 800977c:	492a      	ldr	r1, [pc, #168]	; (8009828 <etharp_tmr+0x14c>)
 800977e:	4613      	mov	r3, r2
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	4413      	add	r3, r2
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	440b      	add	r3, r1
 8009788:	3314      	adds	r3, #20
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b03      	cmp	r3, #3
 800978e:	d10a      	bne.n	80097a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009790:	79fa      	ldrb	r2, [r7, #7]
 8009792:	4925      	ldr	r1, [pc, #148]	; (8009828 <etharp_tmr+0x14c>)
 8009794:	4613      	mov	r3, r2
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	4413      	add	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	440b      	add	r3, r1
 800979e:	3314      	adds	r3, #20
 80097a0:	2204      	movs	r2, #4
 80097a2:	701a      	strb	r2, [r3, #0]
 80097a4:	e034      	b.n	8009810 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80097a6:	79fa      	ldrb	r2, [r7, #7]
 80097a8:	491f      	ldr	r1, [pc, #124]	; (8009828 <etharp_tmr+0x14c>)
 80097aa:	4613      	mov	r3, r2
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	4413      	add	r3, r2
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	440b      	add	r3, r1
 80097b4:	3314      	adds	r3, #20
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b04      	cmp	r3, #4
 80097ba:	d10a      	bne.n	80097d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80097bc:	79fa      	ldrb	r2, [r7, #7]
 80097be:	491a      	ldr	r1, [pc, #104]	; (8009828 <etharp_tmr+0x14c>)
 80097c0:	4613      	mov	r3, r2
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	4413      	add	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	440b      	add	r3, r1
 80097ca:	3314      	adds	r3, #20
 80097cc:	2202      	movs	r2, #2
 80097ce:	701a      	strb	r2, [r3, #0]
 80097d0:	e01e      	b.n	8009810 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80097d2:	79fa      	ldrb	r2, [r7, #7]
 80097d4:	4914      	ldr	r1, [pc, #80]	; (8009828 <etharp_tmr+0x14c>)
 80097d6:	4613      	mov	r3, r2
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	4413      	add	r3, r2
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	440b      	add	r3, r1
 80097e0:	3314      	adds	r3, #20
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d113      	bne.n	8009810 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80097e8:	79fa      	ldrb	r2, [r7, #7]
 80097ea:	490f      	ldr	r1, [pc, #60]	; (8009828 <etharp_tmr+0x14c>)
 80097ec:	4613      	mov	r3, r2
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	4413      	add	r3, r2
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	440b      	add	r3, r1
 80097f6:	3308      	adds	r3, #8
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	79fa      	ldrb	r2, [r7, #7]
 80097fc:	4613      	mov	r3, r2
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	4413      	add	r3, r2
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	4a08      	ldr	r2, [pc, #32]	; (8009828 <etharp_tmr+0x14c>)
 8009806:	4413      	add	r3, r2
 8009808:	3304      	adds	r3, #4
 800980a:	4619      	mov	r1, r3
 800980c:	f000 fe3c 	bl	800a488 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	3301      	adds	r3, #1
 8009814:	71fb      	strb	r3, [r7, #7]
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	2b09      	cmp	r3, #9
 800981a:	f67f af65 	bls.w	80096e8 <etharp_tmr+0xc>
      }
    }
  }
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20003e00 	.word	0x20003e00

0800982c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800983a:	230a      	movs	r3, #10
 800983c:	77fb      	strb	r3, [r7, #31]
 800983e:	230a      	movs	r3, #10
 8009840:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8009842:	230a      	movs	r3, #10
 8009844:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800984a:	230a      	movs	r3, #10
 800984c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	833b      	strh	r3, [r7, #24]
 8009852:	2300      	movs	r3, #0
 8009854:	82fb      	strh	r3, [r7, #22]
 8009856:	2300      	movs	r3, #0
 8009858:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800985a:	2300      	movs	r3, #0
 800985c:	773b      	strb	r3, [r7, #28]
 800985e:	e093      	b.n	8009988 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8009860:	7f3a      	ldrb	r2, [r7, #28]
 8009862:	4990      	ldr	r1, [pc, #576]	; (8009aa4 <etharp_find_entry+0x278>)
 8009864:	4613      	mov	r3, r2
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	4413      	add	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	440b      	add	r3, r1
 800986e:	3314      	adds	r3, #20
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009874:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009878:	2b0a      	cmp	r3, #10
 800987a:	d105      	bne.n	8009888 <etharp_find_entry+0x5c>
 800987c:	7cfb      	ldrb	r3, [r7, #19]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8009882:	7f3b      	ldrb	r3, [r7, #28]
 8009884:	777b      	strb	r3, [r7, #29]
 8009886:	e07c      	b.n	8009982 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009888:	7cfb      	ldrb	r3, [r7, #19]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d079      	beq.n	8009982 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800988e:	7cfb      	ldrb	r3, [r7, #19]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d009      	beq.n	80098a8 <etharp_find_entry+0x7c>
 8009894:	7cfb      	ldrb	r3, [r7, #19]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d806      	bhi.n	80098a8 <etharp_find_entry+0x7c>
 800989a:	4b83      	ldr	r3, [pc, #524]	; (8009aa8 <etharp_find_entry+0x27c>)
 800989c:	f44f 7293 	mov.w	r2, #294	; 0x126
 80098a0:	4982      	ldr	r1, [pc, #520]	; (8009aac <etharp_find_entry+0x280>)
 80098a2:	4883      	ldr	r0, [pc, #524]	; (8009ab0 <etharp_find_entry+0x284>)
 80098a4:	f00a fd92 	bl	80143cc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00f      	beq.n	80098ce <etharp_find_entry+0xa2>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6819      	ldr	r1, [r3, #0]
 80098b2:	7f3a      	ldrb	r2, [r7, #28]
 80098b4:	487b      	ldr	r0, [pc, #492]	; (8009aa4 <etharp_find_entry+0x278>)
 80098b6:	4613      	mov	r3, r2
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	4413      	add	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	4403      	add	r3, r0
 80098c0:	3304      	adds	r3, #4
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4299      	cmp	r1, r3
 80098c6:	d102      	bne.n	80098ce <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80098c8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80098cc:	e0e5      	b.n	8009a9a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80098ce:	7cfb      	ldrb	r3, [r7, #19]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d13b      	bne.n	800994c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80098d4:	7f3a      	ldrb	r2, [r7, #28]
 80098d6:	4973      	ldr	r1, [pc, #460]	; (8009aa4 <etharp_find_entry+0x278>)
 80098d8:	4613      	mov	r3, r2
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	4413      	add	r3, r2
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	440b      	add	r3, r1
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d018      	beq.n	800991a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80098e8:	7f3a      	ldrb	r2, [r7, #28]
 80098ea:	496e      	ldr	r1, [pc, #440]	; (8009aa4 <etharp_find_entry+0x278>)
 80098ec:	4613      	mov	r3, r2
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	4413      	add	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	440b      	add	r3, r1
 80098f6:	3312      	adds	r3, #18
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	8b3a      	ldrh	r2, [r7, #24]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d840      	bhi.n	8009982 <etharp_find_entry+0x156>
            old_queue = i;
 8009900:	7f3b      	ldrb	r3, [r7, #28]
 8009902:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8009904:	7f3a      	ldrb	r2, [r7, #28]
 8009906:	4967      	ldr	r1, [pc, #412]	; (8009aa4 <etharp_find_entry+0x278>)
 8009908:	4613      	mov	r3, r2
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4413      	add	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	440b      	add	r3, r1
 8009912:	3312      	adds	r3, #18
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	833b      	strh	r3, [r7, #24]
 8009918:	e033      	b.n	8009982 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800991a:	7f3a      	ldrb	r2, [r7, #28]
 800991c:	4961      	ldr	r1, [pc, #388]	; (8009aa4 <etharp_find_entry+0x278>)
 800991e:	4613      	mov	r3, r2
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	4413      	add	r3, r2
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	440b      	add	r3, r1
 8009928:	3312      	adds	r3, #18
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	8afa      	ldrh	r2, [r7, #22]
 800992e:	429a      	cmp	r2, r3
 8009930:	d827      	bhi.n	8009982 <etharp_find_entry+0x156>
            old_pending = i;
 8009932:	7f3b      	ldrb	r3, [r7, #28]
 8009934:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8009936:	7f3a      	ldrb	r2, [r7, #28]
 8009938:	495a      	ldr	r1, [pc, #360]	; (8009aa4 <etharp_find_entry+0x278>)
 800993a:	4613      	mov	r3, r2
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4413      	add	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	440b      	add	r3, r1
 8009944:	3312      	adds	r3, #18
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	82fb      	strh	r3, [r7, #22]
 800994a:	e01a      	b.n	8009982 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800994c:	7cfb      	ldrb	r3, [r7, #19]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d917      	bls.n	8009982 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009952:	7f3a      	ldrb	r2, [r7, #28]
 8009954:	4953      	ldr	r1, [pc, #332]	; (8009aa4 <etharp_find_entry+0x278>)
 8009956:	4613      	mov	r3, r2
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	4413      	add	r3, r2
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	440b      	add	r3, r1
 8009960:	3312      	adds	r3, #18
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	8aba      	ldrh	r2, [r7, #20]
 8009966:	429a      	cmp	r2, r3
 8009968:	d80b      	bhi.n	8009982 <etharp_find_entry+0x156>
            old_stable = i;
 800996a:	7f3b      	ldrb	r3, [r7, #28]
 800996c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800996e:	7f3a      	ldrb	r2, [r7, #28]
 8009970:	494c      	ldr	r1, [pc, #304]	; (8009aa4 <etharp_find_entry+0x278>)
 8009972:	4613      	mov	r3, r2
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	4413      	add	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	440b      	add	r3, r1
 800997c:	3312      	adds	r3, #18
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009982:	7f3b      	ldrb	r3, [r7, #28]
 8009984:	3301      	adds	r3, #1
 8009986:	773b      	strb	r3, [r7, #28]
 8009988:	7f3b      	ldrb	r3, [r7, #28]
 800998a:	2b09      	cmp	r3, #9
 800998c:	f67f af68 	bls.w	8009860 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d108      	bne.n	80099ac <etharp_find_entry+0x180>
 800999a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800999e:	2b0a      	cmp	r3, #10
 80099a0:	d107      	bne.n	80099b2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80099ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b0:	e073      	b.n	8009a9a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80099b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	dc02      	bgt.n	80099c0 <etharp_find_entry+0x194>
    i = empty;
 80099ba:	7f7b      	ldrb	r3, [r7, #29]
 80099bc:	773b      	strb	r3, [r7, #28]
 80099be:	e036      	b.n	8009a2e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80099c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	dc13      	bgt.n	80099f0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80099c8:	7fbb      	ldrb	r3, [r7, #30]
 80099ca:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80099cc:	7f3a      	ldrb	r2, [r7, #28]
 80099ce:	4935      	ldr	r1, [pc, #212]	; (8009aa4 <etharp_find_entry+0x278>)
 80099d0:	4613      	mov	r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	4413      	add	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	440b      	add	r3, r1
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d018      	beq.n	8009a12 <etharp_find_entry+0x1e6>
 80099e0:	4b31      	ldr	r3, [pc, #196]	; (8009aa8 <etharp_find_entry+0x27c>)
 80099e2:	f240 126f 	movw	r2, #367	; 0x16f
 80099e6:	4933      	ldr	r1, [pc, #204]	; (8009ab4 <etharp_find_entry+0x288>)
 80099e8:	4831      	ldr	r0, [pc, #196]	; (8009ab0 <etharp_find_entry+0x284>)
 80099ea:	f00a fcef 	bl	80143cc <iprintf>
 80099ee:	e010      	b.n	8009a12 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80099f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099f4:	2b09      	cmp	r3, #9
 80099f6:	dc02      	bgt.n	80099fe <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80099f8:	7ffb      	ldrb	r3, [r7, #31]
 80099fa:	773b      	strb	r3, [r7, #28]
 80099fc:	e009      	b.n	8009a12 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80099fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	dc02      	bgt.n	8009a0c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009a06:	7efb      	ldrb	r3, [r7, #27]
 8009a08:	773b      	strb	r3, [r7, #28]
 8009a0a:	e002      	b.n	8009a12 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a10:	e043      	b.n	8009a9a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009a12:	7f3b      	ldrb	r3, [r7, #28]
 8009a14:	2b09      	cmp	r3, #9
 8009a16:	d906      	bls.n	8009a26 <etharp_find_entry+0x1fa>
 8009a18:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <etharp_find_entry+0x27c>)
 8009a1a:	f240 1281 	movw	r2, #385	; 0x181
 8009a1e:	4926      	ldr	r1, [pc, #152]	; (8009ab8 <etharp_find_entry+0x28c>)
 8009a20:	4823      	ldr	r0, [pc, #140]	; (8009ab0 <etharp_find_entry+0x284>)
 8009a22:	f00a fcd3 	bl	80143cc <iprintf>
    etharp_free_entry(i);
 8009a26:	7f3b      	ldrb	r3, [r7, #28]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fe25 	bl	8009678 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009a2e:	7f3b      	ldrb	r3, [r7, #28]
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d906      	bls.n	8009a42 <etharp_find_entry+0x216>
 8009a34:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <etharp_find_entry+0x27c>)
 8009a36:	f240 1285 	movw	r2, #389	; 0x185
 8009a3a:	491f      	ldr	r1, [pc, #124]	; (8009ab8 <etharp_find_entry+0x28c>)
 8009a3c:	481c      	ldr	r0, [pc, #112]	; (8009ab0 <etharp_find_entry+0x284>)
 8009a3e:	f00a fcc5 	bl	80143cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009a42:	7f3a      	ldrb	r2, [r7, #28]
 8009a44:	4917      	ldr	r1, [pc, #92]	; (8009aa4 <etharp_find_entry+0x278>)
 8009a46:	4613      	mov	r3, r2
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	4413      	add	r3, r2
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	440b      	add	r3, r1
 8009a50:	3314      	adds	r3, #20
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <etharp_find_entry+0x23a>
 8009a58:	4b13      	ldr	r3, [pc, #76]	; (8009aa8 <etharp_find_entry+0x27c>)
 8009a5a:	f240 1287 	movw	r2, #391	; 0x187
 8009a5e:	4917      	ldr	r1, [pc, #92]	; (8009abc <etharp_find_entry+0x290>)
 8009a60:	4813      	ldr	r0, [pc, #76]	; (8009ab0 <etharp_find_entry+0x284>)
 8009a62:	f00a fcb3 	bl	80143cc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009a6c:	7f3a      	ldrb	r2, [r7, #28]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6819      	ldr	r1, [r3, #0]
 8009a72:	480c      	ldr	r0, [pc, #48]	; (8009aa4 <etharp_find_entry+0x278>)
 8009a74:	4613      	mov	r3, r2
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	4413      	add	r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	4403      	add	r3, r0
 8009a7e:	3304      	adds	r3, #4
 8009a80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009a82:	7f3a      	ldrb	r2, [r7, #28]
 8009a84:	4907      	ldr	r1, [pc, #28]	; (8009aa4 <etharp_find_entry+0x278>)
 8009a86:	4613      	mov	r3, r2
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	4413      	add	r3, r2
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	440b      	add	r3, r1
 8009a90:	3312      	adds	r3, #18
 8009a92:	2200      	movs	r2, #0
 8009a94:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8009a96:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20003e00 	.word	0x20003e00
 8009aa8:	08016184 	.word	0x08016184
 8009aac:	080161bc 	.word	0x080161bc
 8009ab0:	080161fc 	.word	0x080161fc
 8009ab4:	08016224 	.word	0x08016224
 8009ab8:	0801623c 	.word	0x0801623c
 8009abc:	08016250 	.word	0x08016250

08009ac0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad4:	2b06      	cmp	r3, #6
 8009ad6:	d006      	beq.n	8009ae6 <etharp_update_arp_entry+0x26>
 8009ad8:	4b48      	ldr	r3, [pc, #288]	; (8009bfc <etharp_update_arp_entry+0x13c>)
 8009ada:	f240 12ab 	movw	r2, #427	; 0x1ab
 8009ade:	4948      	ldr	r1, [pc, #288]	; (8009c00 <etharp_update_arp_entry+0x140>)
 8009ae0:	4848      	ldr	r0, [pc, #288]	; (8009c04 <etharp_update_arp_entry+0x144>)
 8009ae2:	f00a fc73 	bl	80143cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d012      	beq.n	8009b12 <etharp_update_arp_entry+0x52>
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00e      	beq.n	8009b12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 f8f8 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 8009b00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d105      	bne.n	8009b12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009b0e:	2be0      	cmp	r3, #224	; 0xe0
 8009b10:	d102      	bne.n	8009b18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009b12:	f06f 030f 	mvn.w	r3, #15
 8009b16:	e06c      	b.n	8009bf2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	68b8      	ldr	r0, [r7, #8]
 8009b20:	f7ff fe84 	bl	800982c <etharp_find_entry>
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da02      	bge.n	8009b36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b34:	e05d      	b.n	8009bf2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009b36:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009b3a:	4933      	ldr	r1, [pc, #204]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	4413      	add	r3, r2
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	440b      	add	r3, r1
 8009b46:	3314      	adds	r3, #20
 8009b48:	2202      	movs	r2, #2
 8009b4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009b4c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009b50:	492d      	ldr	r1, [pc, #180]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009b52:	4613      	mov	r3, r2
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	4413      	add	r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	440b      	add	r3, r1
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8009b62:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009b66:	4613      	mov	r3, r2
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	4413      	add	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	3308      	adds	r3, #8
 8009b70:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009b72:	4413      	add	r3, r2
 8009b74:	3304      	adds	r3, #4
 8009b76:	2206      	movs	r2, #6
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f00a fc13 	bl	80143a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009b80:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009b84:	4920      	ldr	r1, [pc, #128]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009b86:	4613      	mov	r3, r2
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	440b      	add	r3, r1
 8009b90:	3312      	adds	r3, #18
 8009b92:	2200      	movs	r2, #0
 8009b94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009b96:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009b9a:	491b      	ldr	r1, [pc, #108]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	4413      	add	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	440b      	add	r3, r1
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d021      	beq.n	8009bf0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009bac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009bb0:	4915      	ldr	r1, [pc, #84]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	4413      	add	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	440b      	add	r3, r1
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009bc0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009bc4:	4910      	ldr	r1, [pc, #64]	; (8009c08 <etharp_update_arp_entry+0x148>)
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	4413      	add	r3, r2
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	440b      	add	r3, r1
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8009bda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6939      	ldr	r1, [r7, #16]
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f009 fa57 	bl	8013098 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f002 ffee 	bl	800cbcc <pbuf_free>
  }
  return ERR_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	08016184 	.word	0x08016184
 8009c00:	0801627c 	.word	0x0801627c
 8009c04:	080161fc 	.word	0x080161fc
 8009c08:	20003e00 	.word	0x20003e00

08009c0c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
 8009c18:	e01f      	b.n	8009c5a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8009c1a:	7bfa      	ldrb	r2, [r7, #15]
 8009c1c:	4912      	ldr	r1, [pc, #72]	; (8009c68 <etharp_cleanup_netif+0x5c>)
 8009c1e:	4613      	mov	r3, r2
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	4413      	add	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	440b      	add	r3, r1
 8009c28:	3314      	adds	r3, #20
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00f      	beq.n	8009c54 <etharp_cleanup_netif+0x48>
 8009c34:	7bfa      	ldrb	r2, [r7, #15]
 8009c36:	490c      	ldr	r1, [pc, #48]	; (8009c68 <etharp_cleanup_netif+0x5c>)
 8009c38:	4613      	mov	r3, r2
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	4413      	add	r3, r2
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	440b      	add	r3, r1
 8009c42:	3308      	adds	r3, #8
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d103      	bne.n	8009c54 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fd12 	bl	8009678 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	3301      	adds	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	2b09      	cmp	r3, #9
 8009c5e:	d9dc      	bls.n	8009c1a <etharp_cleanup_netif+0xe>
    }
  }
}
 8009c60:	bf00      	nop
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20003e00 	.word	0x20003e00

08009c6c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009c6c:	b5b0      	push	{r4, r5, r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d107      	bne.n	8009c8c <etharp_input+0x20>
 8009c7c:	4b3f      	ldr	r3, [pc, #252]	; (8009d7c <etharp_input+0x110>)
 8009c7e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8009c82:	493f      	ldr	r1, [pc, #252]	; (8009d80 <etharp_input+0x114>)
 8009c84:	483f      	ldr	r0, [pc, #252]	; (8009d84 <etharp_input+0x118>)
 8009c86:	f00a fba1 	bl	80143cc <iprintf>
 8009c8a:	e074      	b.n	8009d76 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c9c:	d10c      	bne.n	8009cb8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8009ca2:	2b06      	cmp	r3, #6
 8009ca4:	d108      	bne.n	8009cb8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d104      	bne.n	8009cb8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	885b      	ldrh	r3, [r3, #2]
 8009cb2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d003      	beq.n	8009cc0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f002 ff87 	bl	800cbcc <pbuf_free>
    return;
 8009cbe:	e05a      	b.n	8009d76 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	330e      	adds	r3, #14
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3318      	adds	r3, #24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <etharp_input+0x74>
    for_us = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75fb      	strb	r3, [r7, #23]
 8009cde:	e009      	b.n	8009cf4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	bf0c      	ite	eq
 8009cec:	2301      	moveq	r3, #1
 8009cee:	2300      	movne	r3, #0
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f103 0208 	add.w	r2, r3, #8
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <etharp_input+0x98>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <etharp_input+0x9a>
 8009d04:	2302      	movs	r3, #2
 8009d06:	f107 010c 	add.w	r1, r7, #12
 8009d0a:	6838      	ldr	r0, [r7, #0]
 8009d0c:	f7ff fed8 	bl	8009ac0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	88db      	ldrh	r3, [r3, #6]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1a:	d003      	beq.n	8009d24 <etharp_input+0xb8>
 8009d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d20:	d01e      	beq.n	8009d60 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8009d22:	e025      	b.n	8009d70 <etharp_input+0x104>
    if (for_us) {
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d021      	beq.n	8009d6e <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	3208      	adds	r2, #8
      etharp_raw(netif,
 8009d44:	2102      	movs	r1, #2
 8009d46:	9103      	str	r1, [sp, #12]
 8009d48:	f107 010c 	add.w	r1, r7, #12
 8009d4c:	9102      	str	r1, [sp, #8]
 8009d4e:	9201      	str	r2, [sp, #4]
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	462b      	mov	r3, r5
 8009d54:	4622      	mov	r2, r4
 8009d56:	4601      	mov	r1, r0
 8009d58:	6838      	ldr	r0, [r7, #0]
 8009d5a:	f000 fae7 	bl	800a32c <etharp_raw>
    break;
 8009d5e:	e006      	b.n	8009d6e <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	4619      	mov	r1, r3
 8009d66:	6838      	ldr	r0, [r7, #0]
 8009d68:	f7fe f97a 	bl	8008060 <dhcp_arp_reply>
    break;
 8009d6c:	e000      	b.n	8009d70 <etharp_input+0x104>
    break;
 8009d6e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f002 ff2b 	bl	800cbcc <pbuf_free>
}
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7c:	08016184 	.word	0x08016184
 8009d80:	080162d4 	.word	0x080162d4
 8009d84:	080161fc 	.word	0x080161fc

08009d88 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009d96:	79fa      	ldrb	r2, [r7, #7]
 8009d98:	4944      	ldr	r1, [pc, #272]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	440b      	add	r3, r1
 8009da4:	3314      	adds	r3, #20
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d806      	bhi.n	8009dba <etharp_output_to_arp_index+0x32>
 8009dac:	4b40      	ldr	r3, [pc, #256]	; (8009eb0 <etharp_output_to_arp_index+0x128>)
 8009dae:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009db2:	4940      	ldr	r1, [pc, #256]	; (8009eb4 <etharp_output_to_arp_index+0x12c>)
 8009db4:	4840      	ldr	r0, [pc, #256]	; (8009eb8 <etharp_output_to_arp_index+0x130>)
 8009db6:	f00a fb09 	bl	80143cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009dba:	79fa      	ldrb	r2, [r7, #7]
 8009dbc:	493b      	ldr	r1, [pc, #236]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4413      	add	r3, r2
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	440b      	add	r3, r1
 8009dc8:	3314      	adds	r3, #20
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d153      	bne.n	8009e78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009dd0:	79fa      	ldrb	r2, [r7, #7]
 8009dd2:	4936      	ldr	r1, [pc, #216]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	440b      	add	r3, r1
 8009dde:	3312      	adds	r3, #18
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8009de6:	d919      	bls.n	8009e1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009de8:	79fa      	ldrb	r2, [r7, #7]
 8009dea:	4613      	mov	r3, r2
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4413      	add	r3, r2
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	4a2e      	ldr	r2, [pc, #184]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009df4:	4413      	add	r3, r2
 8009df6:	3304      	adds	r3, #4
 8009df8:	4619      	mov	r1, r3
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 fb44 	bl	800a488 <etharp_request>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d138      	bne.n	8009e78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009e06:	79fa      	ldrb	r2, [r7, #7]
 8009e08:	4928      	ldr	r1, [pc, #160]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	4413      	add	r3, r2
 8009e10:	00db      	lsls	r3, r3, #3
 8009e12:	440b      	add	r3, r1
 8009e14:	3314      	adds	r3, #20
 8009e16:	2203      	movs	r2, #3
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e02d      	b.n	8009e78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009e1c:	79fa      	ldrb	r2, [r7, #7]
 8009e1e:	4923      	ldr	r1, [pc, #140]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009e20:	4613      	mov	r3, r2
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	4413      	add	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	440b      	add	r3, r1
 8009e2a:	3312      	adds	r3, #18
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8009e32:	d321      	bcc.n	8009e78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009e34:	79fa      	ldrb	r2, [r7, #7]
 8009e36:	4613      	mov	r3, r2
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	4413      	add	r3, r2
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	4a1b      	ldr	r2, [pc, #108]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009e40:	4413      	add	r3, r2
 8009e42:	1d19      	adds	r1, r3, #4
 8009e44:	79fa      	ldrb	r2, [r7, #7]
 8009e46:	4613      	mov	r3, r2
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	4413      	add	r3, r2
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	3308      	adds	r3, #8
 8009e50:	4a16      	ldr	r2, [pc, #88]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009e52:	4413      	add	r3, r2
 8009e54:	3304      	adds	r3, #4
 8009e56:	461a      	mov	r2, r3
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 faf3 	bl	800a444 <etharp_request_dst>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009e64:	79fa      	ldrb	r2, [r7, #7]
 8009e66:	4911      	ldr	r1, [pc, #68]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009e68:	4613      	mov	r3, r2
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	440b      	add	r3, r1
 8009e72:	3314      	adds	r3, #20
 8009e74:	2203      	movs	r2, #3
 8009e76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8009e7e:	79fa      	ldrb	r2, [r7, #7]
 8009e80:	4613      	mov	r3, r2
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	4413      	add	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	3308      	adds	r3, #8
 8009e8a:	4a08      	ldr	r2, [pc, #32]	; (8009eac <etharp_output_to_arp_index+0x124>)
 8009e8c:	4413      	add	r3, r2
 8009e8e:	1d1a      	adds	r2, r3, #4
 8009e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4613      	mov	r3, r2
 8009e98:	460a      	mov	r2, r1
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f009 f8fb 	bl	8013098 <ethernet_output>
 8009ea2:	4603      	mov	r3, r0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20003e00 	.word	0x20003e00
 8009eb0:	08016184 	.word	0x08016184
 8009eb4:	080162f4 	.word	0x080162f4
 8009eb8:	080161fc 	.word	0x080161fc

08009ebc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	; 0x28
 8009ec0:	af02      	add	r7, sp, #8
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d106      	bne.n	8009ee0 <etharp_output+0x24>
 8009ed2:	4b69      	ldr	r3, [pc, #420]	; (800a078 <etharp_output+0x1bc>)
 8009ed4:	f240 321b 	movw	r2, #795	; 0x31b
 8009ed8:	4968      	ldr	r1, [pc, #416]	; (800a07c <etharp_output+0x1c0>)
 8009eda:	4869      	ldr	r0, [pc, #420]	; (800a080 <etharp_output+0x1c4>)
 8009edc:	f00a fa76 	bl	80143cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d106      	bne.n	8009ef4 <etharp_output+0x38>
 8009ee6:	4b64      	ldr	r3, [pc, #400]	; (800a078 <etharp_output+0x1bc>)
 8009ee8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009eec:	4965      	ldr	r1, [pc, #404]	; (800a084 <etharp_output+0x1c8>)
 8009eee:	4864      	ldr	r0, [pc, #400]	; (800a080 <etharp_output+0x1c4>)
 8009ef0:	f00a fa6c 	bl	80143cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d106      	bne.n	8009f08 <etharp_output+0x4c>
 8009efa:	4b5f      	ldr	r3, [pc, #380]	; (800a078 <etharp_output+0x1bc>)
 8009efc:	f240 321d 	movw	r2, #797	; 0x31d
 8009f00:	4961      	ldr	r1, [pc, #388]	; (800a088 <etharp_output+0x1cc>)
 8009f02:	485f      	ldr	r0, [pc, #380]	; (800a080 <etharp_output+0x1c4>)
 8009f04:	f00a fa62 	bl	80143cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68f9      	ldr	r1, [r7, #12]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 feee 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8009f1a:	4b5c      	ldr	r3, [pc, #368]	; (800a08c <etharp_output+0x1d0>)
 8009f1c:	61fb      	str	r3, [r7, #28]
 8009f1e:	e09b      	b.n	800a058 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f28:	2be0      	cmp	r3, #224	; 0xe0
 8009f2a:	d118      	bne.n	8009f5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009f30:	2300      	movs	r3, #0
 8009f32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009f34:	235e      	movs	r3, #94	; 0x5e
 8009f36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3302      	adds	r3, #2
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3303      	adds	r3, #3
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	e07c      	b.n	800a058 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3304      	adds	r3, #4
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	405a      	eors	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d012      	beq.n	8009f9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009f7c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	330c      	adds	r3, #12
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	330c      	adds	r3, #12
 8009f92:	61bb      	str	r3, [r7, #24]
 8009f94:	e002      	b.n	8009f9c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009f96:	f06f 0303 	mvn.w	r3, #3
 8009f9a:	e069      	b.n	800a070 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009f9c:	4b3c      	ldr	r3, [pc, #240]	; (800a090 <etharp_output+0x1d4>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4a3c      	ldr	r2, [pc, #240]	; (800a094 <etharp_output+0x1d8>)
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	440b      	add	r3, r1
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	4413      	add	r3, r2
 8009fae:	3314      	adds	r3, #20
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d917      	bls.n	8009fe6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4b35      	ldr	r3, [pc, #212]	; (800a090 <etharp_output+0x1d4>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	4934      	ldr	r1, [pc, #208]	; (800a094 <etharp_output+0x1d8>)
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	4403      	add	r3, r0
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	440b      	add	r3, r1
 8009fcc:	3304      	adds	r3, #4
 8009fce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d108      	bne.n	8009fe6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009fd4:	4b2e      	ldr	r3, [pc, #184]	; (800a090 <etharp_output+0x1d4>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff fed3 	bl	8009d88 <etharp_output_to_arp_index>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	e044      	b.n	800a070 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75fb      	strb	r3, [r7, #23]
 8009fea:	e02a      	b.n	800a042 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009fec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009ff0:	4928      	ldr	r1, [pc, #160]	; (800a094 <etharp_output+0x1d8>)
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	4413      	add	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	440b      	add	r3, r1
 8009ffc:	3314      	adds	r3, #20
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d918      	bls.n	800a036 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	6819      	ldr	r1, [r3, #0]
 800a008:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a00c:	4821      	ldr	r0, [pc, #132]	; (800a094 <etharp_output+0x1d8>)
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	4403      	add	r3, r0
 800a018:	3304      	adds	r3, #4
 800a01a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a01c:	4299      	cmp	r1, r3
 800a01e:	d10a      	bne.n	800a036 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800a020:	7dfa      	ldrb	r2, [r7, #23]
 800a022:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <etharp_output+0x1d4>)
 800a024:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	461a      	mov	r2, r3
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff feab 	bl	8009d88 <etharp_output_to_arp_index>
 800a032:	4603      	mov	r3, r0
 800a034:	e01c      	b.n	800a070 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	3301      	adds	r3, #1
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	75fb      	strb	r3, [r7, #23]
 800a042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a046:	2b09      	cmp	r3, #9
 800a048:	ddd0      	ble.n	8009fec <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	69b9      	ldr	r1, [r7, #24]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 f822 	bl	800a098 <etharp_query>
 800a054:	4603      	mov	r3, r0
 800a056:	e00b      	b.n	800a070 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800a05e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f009 f815 	bl	8013098 <ethernet_output>
 800a06e:	4603      	mov	r3, r0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	08016184 	.word	0x08016184
 800a07c:	080162d4 	.word	0x080162d4
 800a080:	080161fc 	.word	0x080161fc
 800a084:	08016324 	.word	0x08016324
 800a088:	080162c4 	.word	0x080162c4
 800a08c:	08017fe8 	.word	0x08017fe8
 800a090:	20003ef0 	.word	0x20003ef0
 800a094:	20003e00 	.word	0x20003e00

0800a098 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08c      	sub	sp, #48	; 0x30
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3329      	adds	r3, #41	; 0x29
 800a0a8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a0aa:	23ff      	movs	r3, #255	; 0xff
 800a0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68f9      	ldr	r1, [r7, #12]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fe18 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10c      	bne.n	800a0e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a0ce:	2be0      	cmp	r3, #224	; 0xe0
 800a0d0:	d006      	beq.n	800a0e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a0e0:	f06f 030f 	mvn.w	r3, #15
 800a0e4:	e10f      	b.n	800a306 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	68b8      	ldr	r0, [r7, #8]
 800a0ec:	f7ff fb9e 	bl	800982c <etharp_find_entry>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800a0f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	da02      	bge.n	800a102 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800a0fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a100:	e101      	b.n	800a306 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a102:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a106:	4982      	ldr	r1, [pc, #520]	; (800a310 <etharp_query+0x278>)
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	440b      	add	r3, r1
 800a112:	3314      	adds	r3, #20
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d117      	bne.n	800a14a <etharp_query+0xb2>
    is_new_entry = 1;
 800a11a:	2301      	movs	r3, #1
 800a11c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a11e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a122:	497b      	ldr	r1, [pc, #492]	; (800a310 <etharp_query+0x278>)
 800a124:	4613      	mov	r3, r2
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	4413      	add	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	440b      	add	r3, r1
 800a12e:	3314      	adds	r3, #20
 800a130:	2201      	movs	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a134:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a138:	4975      	ldr	r1, [pc, #468]	; (800a310 <etharp_query+0x278>)
 800a13a:	4613      	mov	r3, r2
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4413      	add	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	440b      	add	r3, r1
 800a144:	3308      	adds	r3, #8
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a14a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a14e:	4970      	ldr	r1, [pc, #448]	; (800a310 <etharp_query+0x278>)
 800a150:	4613      	mov	r3, r2
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	4413      	add	r3, r2
 800a156:	00db      	lsls	r3, r3, #3
 800a158:	440b      	add	r3, r1
 800a15a:	3314      	adds	r3, #20
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d012      	beq.n	800a188 <etharp_query+0xf0>
 800a162:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a166:	496a      	ldr	r1, [pc, #424]	; (800a310 <etharp_query+0x278>)
 800a168:	4613      	mov	r3, r2
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	4413      	add	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	440b      	add	r3, r1
 800a172:	3314      	adds	r3, #20
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d806      	bhi.n	800a188 <etharp_query+0xf0>
 800a17a:	4b66      	ldr	r3, [pc, #408]	; (800a314 <etharp_query+0x27c>)
 800a17c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a180:	4965      	ldr	r1, [pc, #404]	; (800a318 <etharp_query+0x280>)
 800a182:	4866      	ldr	r0, [pc, #408]	; (800a31c <etharp_query+0x284>)
 800a184:	f00a f922 	bl	80143cc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d102      	bne.n	800a194 <etharp_query+0xfc>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10c      	bne.n	800a1ae <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 f976 	bl	800a488 <etharp_request>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <etharp_query+0x116>
      return result;
 800a1a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ac:	e0ab      	b.n	800a306 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d106      	bne.n	800a1c2 <etharp_query+0x12a>
 800a1b4:	4b57      	ldr	r3, [pc, #348]	; (800a314 <etharp_query+0x27c>)
 800a1b6:	f240 32db 	movw	r2, #987	; 0x3db
 800a1ba:	4959      	ldr	r1, [pc, #356]	; (800a320 <etharp_query+0x288>)
 800a1bc:	4857      	ldr	r0, [pc, #348]	; (800a31c <etharp_query+0x284>)
 800a1be:	f00a f905 	bl	80143cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a1c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a1c6:	4952      	ldr	r1, [pc, #328]	; (800a310 <etharp_query+0x278>)
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	440b      	add	r3, r1
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d919      	bls.n	800a20e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800a1da:	7cfa      	ldrb	r2, [r7, #19]
 800a1dc:	4b51      	ldr	r3, [pc, #324]	; (800a324 <etharp_query+0x28c>)
 800a1de:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a1e0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	4413      	add	r3, r2
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	4a48      	ldr	r2, [pc, #288]	; (800a310 <etharp_query+0x278>)
 800a1f0:	4413      	add	r3, r2
 800a1f2:	1d1a      	adds	r2, r3, #4
 800a1f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f008 ff49 	bl	8013098 <ethernet_output>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a20c:	e079      	b.n	800a302 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a20e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a212:	493f      	ldr	r1, [pc, #252]	; (800a310 <etharp_query+0x278>)
 800a214:	4613      	mov	r3, r2
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	4413      	add	r3, r2
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	440b      	add	r3, r1
 800a21e:	3314      	adds	r3, #20
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d16d      	bne.n	800a302 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a22e:	e01a      	b.n	800a266 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	895a      	ldrh	r2, [r3, #10]
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	891b      	ldrh	r3, [r3, #8]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d10a      	bne.n	800a252 <etharp_query+0x1ba>
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <etharp_query+0x1ba>
 800a244:	4b33      	ldr	r3, [pc, #204]	; (800a314 <etharp_query+0x27c>)
 800a246:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a24a:	4937      	ldr	r1, [pc, #220]	; (800a328 <etharp_query+0x290>)
 800a24c:	4833      	ldr	r0, [pc, #204]	; (800a31c <etharp_query+0x284>)
 800a24e:	f00a f8bd 	bl	80143cc <iprintf>
      if (p->type != PBUF_ROM) {
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	7b1b      	ldrb	r3, [r3, #12]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d002      	beq.n	800a260 <etharp_query+0x1c8>
        copy_needed = 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	61bb      	str	r3, [r7, #24]
        break;
 800a25e:	e005      	b.n	800a26c <etharp_query+0x1d4>
      }
      p = p->next;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e1      	bne.n	800a230 <etharp_query+0x198>
    }
    if (copy_needed) {
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d017      	beq.n	800a2a2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	891b      	ldrh	r3, [r3, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	4619      	mov	r1, r3
 800a27a:	2002      	movs	r0, #2
 800a27c:	f002 f934 	bl	800c4e8 <pbuf_alloc>
 800a280:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d011      	beq.n	800a2ac <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	69f8      	ldr	r0, [r7, #28]
 800a28c:	f002 fdde 	bl	800ce4c <pbuf_copy>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <etharp_query+0x214>
          pbuf_free(p);
 800a296:	69f8      	ldr	r0, [r7, #28]
 800a298:	f002 fc98 	bl	800cbcc <pbuf_free>
          p = NULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	e004      	b.n	800a2ac <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800a2a6:	69f8      	ldr	r0, [r7, #28]
 800a2a8:	f002 fd42 	bl	800cd30 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d024      	beq.n	800a2fc <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800a2b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a2b6:	4916      	ldr	r1, [pc, #88]	; (800a310 <etharp_query+0x278>)
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	4413      	add	r3, r2
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	440b      	add	r3, r1
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800a2c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a2cc:	4910      	ldr	r1, [pc, #64]	; (800a310 <etharp_query+0x278>)
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	4413      	add	r3, r2
 800a2d4:	00db      	lsls	r3, r3, #3
 800a2d6:	440b      	add	r3, r1
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 fc76 	bl	800cbcc <pbuf_free>
      }
      arp_table[i].q = p;
 800a2e0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a2e4:	490a      	ldr	r1, [pc, #40]	; (800a310 <etharp_query+0x278>)
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	440b      	add	r3, r1
 800a2f0:	69fa      	ldr	r2, [r7, #28]
 800a2f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2fa:	e002      	b.n	800a302 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800a2fc:	23ff      	movs	r3, #255	; 0xff
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800a302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a306:	4618      	mov	r0, r3
 800a308:	3728      	adds	r7, #40	; 0x28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20003e00 	.word	0x20003e00
 800a314:	08016184 	.word	0x08016184
 800a318:	08016330 	.word	0x08016330
 800a31c:	080161fc 	.word	0x080161fc
 800a320:	08016324 	.word	0x08016324
 800a324:	20003ef0 	.word	0x20003ef0
 800a328:	08016358 	.word	0x08016358

0800a32c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	; 0x28
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d106      	bne.n	800a352 <etharp_raw+0x26>
 800a344:	4b3a      	ldr	r3, [pc, #232]	; (800a430 <etharp_raw+0x104>)
 800a346:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800a34a:	493a      	ldr	r1, [pc, #232]	; (800a434 <etharp_raw+0x108>)
 800a34c:	483a      	ldr	r0, [pc, #232]	; (800a438 <etharp_raw+0x10c>)
 800a34e:	f00a f83d 	bl	80143cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a352:	2200      	movs	r2, #0
 800a354:	211c      	movs	r1, #28
 800a356:	2002      	movs	r0, #2
 800a358:	f002 f8c6 	bl	800c4e8 <pbuf_alloc>
 800a35c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800a364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a368:	e05d      	b.n	800a426 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	895b      	ldrh	r3, [r3, #10]
 800a36e:	2b1b      	cmp	r3, #27
 800a370:	d806      	bhi.n	800a380 <etharp_raw+0x54>
 800a372:	4b2f      	ldr	r3, [pc, #188]	; (800a430 <etharp_raw+0x104>)
 800a374:	f240 4264 	movw	r2, #1124	; 0x464
 800a378:	4930      	ldr	r1, [pc, #192]	; (800a43c <etharp_raw+0x110>)
 800a37a:	482f      	ldr	r0, [pc, #188]	; (800a438 <etharp_raw+0x10c>)
 800a37c:	f00a f826 	bl	80143cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a386:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fd fa7b 	bl	8007884 <lwip_htons>
 800a38e:	4603      	mov	r3, r0
 800a390:	461a      	mov	r2, r3
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39c:	2b06      	cmp	r3, #6
 800a39e:	d006      	beq.n	800a3ae <etharp_raw+0x82>
 800a3a0:	4b23      	ldr	r3, [pc, #140]	; (800a430 <etharp_raw+0x104>)
 800a3a2:	f240 426b 	movw	r2, #1131	; 0x46b
 800a3a6:	4926      	ldr	r1, [pc, #152]	; (800a440 <etharp_raw+0x114>)
 800a3a8:	4823      	ldr	r0, [pc, #140]	; (800a438 <etharp_raw+0x10c>)
 800a3aa:	f00a f80f 	bl	80143cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	2206      	movs	r2, #6
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f009 fff5 	bl	80143a6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	3312      	adds	r3, #18
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f009 ffee 	bl	80143a6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	330e      	adds	r3, #14
 800a3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	3318      	adds	r3, #24
 800a3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3da:	6812      	ldr	r2, [r2, #0]
 800a3dc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f042 0201 	orr.w	r2, r2, #1
 800a3ea:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f042 0208 	orr.w	r2, r2, #8
 800a3f4:	709a      	strb	r2, [r3, #2]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2206      	movs	r2, #6
 800a3fe:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	2204      	movs	r2, #4
 800a404:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a406:	f640 0306 	movw	r3, #2054	; 0x806
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	69b9      	ldr	r1, [r7, #24]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f008 fe40 	bl	8013098 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a418:	69b8      	ldr	r0, [r7, #24]
 800a41a:	f002 fbd7 	bl	800cbcc <pbuf_free>
  p = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800a422:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3720      	adds	r7, #32
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	08016184 	.word	0x08016184
 800a434:	080162d4 	.word	0x080162d4
 800a438:	080161fc 	.word	0x080161fc
 800a43c:	08016374 	.word	0x08016374
 800a440:	080163a8 	.word	0x080163a8

0800a444 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af04      	add	r7, sp, #16
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a460:	2201      	movs	r2, #1
 800a462:	9203      	str	r2, [sp, #12]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	9202      	str	r2, [sp, #8]
 800a468:	4a06      	ldr	r2, [pc, #24]	; (800a484 <etharp_request_dst+0x40>)
 800a46a:	9201      	str	r2, [sp, #4]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	4603      	mov	r3, r0
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7ff ff5a 	bl	800a32c <etharp_raw>
 800a478:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	08017ff0 	.word	0x08017ff0

0800a488 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a492:	4a05      	ldr	r2, [pc, #20]	; (800a4a8 <etharp_request+0x20>)
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff ffd4 	bl	800a444 <etharp_request_dst>
 800a49c:	4603      	mov	r3, r0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	08017fe8 	.word	0x08017fe8

0800a4ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08e      	sub	sp, #56	; 0x38
 800a4b0:	af04      	add	r7, sp, #16
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a4b6:	4b7a      	ldr	r3, [pc, #488]	; (800a6a0 <icmp_input+0x1f4>)
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800a4cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4ce:	2b13      	cmp	r3, #19
 800a4d0:	f240 80d1 	bls.w	800a676 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	895b      	ldrh	r3, [r3, #10]
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	f240 80ce 	bls.w	800a67a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a4e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 80bb 	beq.w	800a668 <icmp_input+0x1bc>
 800a4f2:	2b08      	cmp	r3, #8
 800a4f4:	f040 80bb 	bne.w	800a66e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800a4f8:	4b6a      	ldr	r3, [pc, #424]	; (800a6a4 <icmp_input+0x1f8>)
 800a4fa:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a4fc:	4b68      	ldr	r3, [pc, #416]	; (800a6a0 <icmp_input+0x1f4>)
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a504:	2be0      	cmp	r3, #224	; 0xe0
 800a506:	f000 80bf 	beq.w	800a688 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a50a:	4b65      	ldr	r3, [pc, #404]	; (800a6a0 <icmp_input+0x1f4>)
 800a50c:	695a      	ldr	r2, [r3, #20]
 800a50e:	4b64      	ldr	r3, [pc, #400]	; (800a6a0 <icmp_input+0x1f4>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f000 fbeb 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 80b5 	bne.w	800a68c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	891b      	ldrh	r3, [r3, #8]
 800a526:	2b07      	cmp	r3, #7
 800a528:	f240 80a9 	bls.w	800a67e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a52c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a52e:	330e      	adds	r3, #14
 800a530:	b29b      	uxth	r3, r3
 800a532:	b21b      	sxth	r3, r3
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f002 fb24 	bl	800cb84 <pbuf_header>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d046      	beq.n	800a5d0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	891a      	ldrh	r2, [r3, #8]
 800a546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a548:	4413      	add	r3, r2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	2200      	movs	r2, #0
 800a54e:	4619      	mov	r1, r3
 800a550:	2002      	movs	r0, #2
 800a552:	f001 ffc9 	bl	800c4e8 <pbuf_alloc>
 800a556:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 8098 	beq.w	800a690 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	895b      	ldrh	r3, [r3, #10]
 800a564:	461a      	mov	r2, r3
 800a566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a568:	3308      	adds	r3, #8
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d203      	bcs.n	800a576 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800a56e:	69b8      	ldr	r0, [r7, #24]
 800a570:	f002 fb2c 	bl	800cbcc <pbuf_free>
        goto icmperr;
 800a574:	e08d      	b.n	800a692 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a57e:	4618      	mov	r0, r3
 800a580:	f009 ff11 	bl	80143a6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800a584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a586:	425b      	negs	r3, r3
 800a588:	b29b      	uxth	r3, r3
 800a58a:	b21b      	sxth	r3, r3
 800a58c:	4619      	mov	r1, r3
 800a58e:	69b8      	ldr	r0, [r7, #24]
 800a590:	f002 faf8 	bl	800cb84 <pbuf_header>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a59a:	4b43      	ldr	r3, [pc, #268]	; (800a6a8 <icmp_input+0x1fc>)
 800a59c:	22af      	movs	r2, #175	; 0xaf
 800a59e:	4943      	ldr	r1, [pc, #268]	; (800a6ac <icmp_input+0x200>)
 800a5a0:	4843      	ldr	r0, [pc, #268]	; (800a6b0 <icmp_input+0x204>)
 800a5a2:	f009 ff13 	bl	80143cc <iprintf>
        pbuf_free(r);
 800a5a6:	69b8      	ldr	r0, [r7, #24]
 800a5a8:	f002 fb10 	bl	800cbcc <pbuf_free>
        goto icmperr;
 800a5ac:	e071      	b.n	800a692 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	69b8      	ldr	r0, [r7, #24]
 800a5b2:	f002 fc4b 	bl	800ce4c <pbuf_copy>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800a5bc:	69b8      	ldr	r0, [r7, #24]
 800a5be:	f002 fb05 	bl	800cbcc <pbuf_free>
        goto icmperr;
 800a5c2:	e066      	b.n	800a692 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f002 fb01 	bl	800cbcc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	607b      	str	r3, [r7, #4]
 800a5ce:	e015      	b.n	800a5fc <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a5d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5d2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800a5d6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a5da:	33f2      	adds	r3, #242	; 0xf2
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	b21b      	sxth	r3, r3
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f002 face 	bl	800cb84 <pbuf_header>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d006      	beq.n	800a5fc <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a5ee:	4b2e      	ldr	r3, [pc, #184]	; (800a6a8 <icmp_input+0x1fc>)
 800a5f0:	22c0      	movs	r2, #192	; 0xc0
 800a5f2:	4930      	ldr	r1, [pc, #192]	; (800a6b4 <icmp_input+0x208>)
 800a5f4:	482e      	ldr	r0, [pc, #184]	; (800a6b0 <icmp_input+0x204>)
 800a5f6:	f009 fee9 	bl	80143cc <iprintf>
        goto icmperr;
 800a5fa:	e04a      	b.n	800a692 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800a602:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f002 fabb 	bl	800cb84 <pbuf_header>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d12b      	bne.n	800a66c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a622:	4b1f      	ldr	r3, [pc, #124]	; (800a6a0 <icmp_input+0x1f4>)
 800a624:	691a      	ldr	r2, [r3, #16]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	2200      	movs	r2, #0
 800a634:	709a      	strb	r2, [r3, #2]
 800a636:	2200      	movs	r2, #0
 800a638:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	22ff      	movs	r2, #255	; 0xff
 800a63e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	2200      	movs	r2, #0
 800a644:	729a      	strb	r2, [r3, #10]
 800a646:	2200      	movs	r2, #0
 800a648:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	9302      	str	r3, [sp, #8]
 800a64e:	2301      	movs	r3, #1
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	2300      	movs	r3, #0
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	23ff      	movs	r3, #255	; 0xff
 800a658:	2200      	movs	r2, #0
 800a65a:	69f9      	ldr	r1, [r7, #28]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fa75 	bl	800ab4c <ip4_output_if>
 800a662:	4603      	mov	r3, r0
 800a664:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800a666:	e001      	b.n	800a66c <icmp_input+0x1c0>
    break;
 800a668:	bf00      	nop
 800a66a:	e000      	b.n	800a66e <icmp_input+0x1c2>
    break;
 800a66c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f002 faac 	bl	800cbcc <pbuf_free>
  return;
 800a674:	e011      	b.n	800a69a <icmp_input+0x1ee>
    goto lenerr;
 800a676:	bf00      	nop
 800a678:	e002      	b.n	800a680 <icmp_input+0x1d4>
    goto lenerr;
 800a67a:	bf00      	nop
 800a67c:	e000      	b.n	800a680 <icmp_input+0x1d4>
      goto lenerr;
 800a67e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f002 faa3 	bl	800cbcc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a686:	e008      	b.n	800a69a <icmp_input+0x1ee>
      goto icmperr;
 800a688:	bf00      	nop
 800a68a:	e002      	b.n	800a692 <icmp_input+0x1e6>
      goto icmperr;
 800a68c:	bf00      	nop
 800a68e:	e000      	b.n	800a692 <icmp_input+0x1e6>
        goto icmperr;
 800a690:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f002 fa9a 	bl	800cbcc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a698:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a69a:	3728      	adds	r7, #40	; 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20003fe0 	.word	0x20003fe0
 800a6a4:	20003ff4 	.word	0x20003ff4
 800a6a8:	080163ec 	.word	0x080163ec
 800a6ac:	08016424 	.word	0x08016424
 800a6b0:	0801645c 	.word	0x0801645c
 800a6b4:	08016484 	.word	0x08016484

0800a6b8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	2103      	movs	r1, #3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f814 	bl	800a6f8 <icmp_send_response>
}
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a6e4:	78fb      	ldrb	r3, [r7, #3]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	210b      	movs	r1, #11
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f804 	bl	800a6f8 <icmp_send_response>
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08c      	sub	sp, #48	; 0x30
 800a6fc:	af04      	add	r7, sp, #16
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
 800a704:	4613      	mov	r3, r2
 800a706:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a708:	2200      	movs	r2, #0
 800a70a:	2124      	movs	r1, #36	; 0x24
 800a70c:	2001      	movs	r0, #1
 800a70e:	f001 feeb 	bl	800c4e8 <pbuf_alloc>
 800a712:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d04c      	beq.n	800a7b4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	895b      	ldrh	r3, [r3, #10]
 800a71e:	2b23      	cmp	r3, #35	; 0x23
 800a720:	d806      	bhi.n	800a730 <icmp_send_response+0x38>
 800a722:	4b26      	ldr	r3, [pc, #152]	; (800a7bc <icmp_send_response+0xc4>)
 800a724:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a728:	4925      	ldr	r1, [pc, #148]	; (800a7c0 <icmp_send_response+0xc8>)
 800a72a:	4826      	ldr	r0, [pc, #152]	; (800a7c4 <icmp_send_response+0xcc>)
 800a72c:	f009 fe4e 	bl	80143cc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	78fa      	ldrb	r2, [r7, #3]
 800a740:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	78ba      	ldrb	r2, [r7, #2]
 800a746:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2200      	movs	r2, #0
 800a74c:	711a      	strb	r2, [r3, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2200      	movs	r2, #0
 800a756:	719a      	strb	r2, [r3, #6]
 800a758:	2200      	movs	r2, #0
 800a75a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f103 0008 	add.w	r0, r3, #8
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	221c      	movs	r2, #28
 800a76a:	4619      	mov	r1, r3
 800a76c:	f009 fe1b 	bl	80143a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a776:	f107 030c 	add.w	r3, r7, #12
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 f824 	bl	800a7c8 <ip4_route>
 800a780:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d011      	beq.n	800a7ac <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2200      	movs	r2, #0
 800a78c:	709a      	strb	r2, [r3, #2]
 800a78e:	2200      	movs	r2, #0
 800a790:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a792:	f107 020c 	add.w	r2, r7, #12
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	9302      	str	r3, [sp, #8]
 800a79a:	2301      	movs	r3, #1
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	23ff      	movs	r3, #255	; 0xff
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	69f8      	ldr	r0, [r7, #28]
 800a7a8:	f000 f9d0 	bl	800ab4c <ip4_output_if>
  }
  pbuf_free(q);
 800a7ac:	69f8      	ldr	r0, [r7, #28]
 800a7ae:	f002 fa0d 	bl	800cbcc <pbuf_free>
 800a7b2:	e000      	b.n	800a7b6 <icmp_send_response+0xbe>
    return;
 800a7b4:	bf00      	nop
}
 800a7b6:	3720      	adds	r7, #32
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	080163ec 	.word	0x080163ec
 800a7c0:	080164b8 	.word	0x080164b8
 800a7c4:	0801645c 	.word	0x0801645c

0800a7c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a7d0:	4b2f      	ldr	r3, [pc, #188]	; (800a890 <ip4_route+0xc8>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e033      	b.n	800a840 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d029      	beq.n	800a83a <ip4_route+0x72>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d022      	beq.n	800a83a <ip4_route+0x72>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d01d      	beq.n	800a83a <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3304      	adds	r3, #4
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	405a      	eors	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3308      	adds	r3, #8
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4013      	ands	r3, r2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	e033      	b.n	800a882 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d108      	bne.n	800a83a <ip4_route+0x72>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	330c      	adds	r3, #12
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	429a      	cmp	r2, r3
 800a834:	d101      	bne.n	800a83a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	e023      	b.n	800a882 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1c8      	bne.n	800a7d8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a846:	4b13      	ldr	r3, [pc, #76]	; (800a894 <ip4_route+0xcc>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d015      	beq.n	800a87a <ip4_route+0xb2>
 800a84e:	4b11      	ldr	r3, [pc, #68]	; (800a894 <ip4_route+0xcc>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00d      	beq.n	800a87a <ip4_route+0xb2>
 800a85e:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <ip4_route+0xcc>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a866:	f003 0304 	and.w	r3, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <ip4_route+0xcc>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3304      	adds	r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	e001      	b.n	800a882 <ip4_route+0xba>
  }

  return netif_default;
 800a87e:	4b05      	ldr	r3, [pc, #20]	; (800a894 <ip4_route+0xcc>)
 800a880:	681b      	ldr	r3, [r3, #0]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	20007728 	.word	0x20007728
 800a894:	2000772c 	.word	0x2000772c

0800a898 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	091b      	lsrs	r3, r3, #4
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d004      	beq.n	800a8c2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f002 f987 	bl	800cbcc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e13c      	b.n	800ab3c <ip4_input+0x2a4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	f003 030f 	and.w	r3, r3, #15
 800a8cc:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a8ce:	89fb      	ldrh	r3, [r7, #14]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	885b      	ldrh	r3, [r3, #2]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fc ffd2 	bl	8007884 <lwip_htons>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	891b      	ldrh	r3, [r3, #8]
 800a8e8:	89ba      	ldrh	r2, [r7, #12]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d204      	bcs.n	800a8f8 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800a8ee:	89bb      	ldrh	r3, [r7, #12]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 fff6 	bl	800c8e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	895b      	ldrh	r3, [r3, #10]
 800a8fc:	89fa      	ldrh	r2, [r7, #14]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d807      	bhi.n	800a912 <ip4_input+0x7a>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	891b      	ldrh	r3, [r3, #8]
 800a906:	89ba      	ldrh	r2, [r7, #12]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d802      	bhi.n	800a912 <ip4_input+0x7a>
 800a90c:	89fb      	ldrh	r3, [r7, #14]
 800a90e:	2b13      	cmp	r3, #19
 800a910:	d804      	bhi.n	800a91c <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f002 f95a 	bl	800cbcc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	e10f      	b.n	800ab3c <ip4_input+0x2a4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	4a88      	ldr	r2, [pc, #544]	; (800ab44 <ip4_input+0x2ac>)
 800a922:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	4a86      	ldr	r2, [pc, #536]	; (800ab44 <ip4_input+0x2ac>)
 800a92a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a92c:	4b85      	ldr	r3, [pc, #532]	; (800ab44 <ip4_input+0x2ac>)
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a934:	2be0      	cmp	r3, #224	; 0xe0
 800a936:	d111      	bne.n	800a95c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <ip4_input+0xbe>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	3304      	adds	r3, #4
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <ip4_input+0xbe>
      netif = inp;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	61bb      	str	r3, [r7, #24]
 800a954:	e040      	b.n	800a9d8 <ip4_input+0x140>
    } else {
      netif = NULL;
 800a956:	2300      	movs	r3, #0
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	e03d      	b.n	800a9d8 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a95c:	2301      	movs	r3, #1
 800a95e:	613b      	str	r3, [r7, #16]
    netif = inp;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d014      	beq.n	800a99c <ip4_input+0x104>
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3304      	adds	r3, #4
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00f      	beq.n	800a99c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a97c:	4b71      	ldr	r3, [pc, #452]	; (800ab44 <ip4_input+0x2ac>)
 800a97e:	695a      	ldr	r2, [r3, #20]
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	3304      	adds	r3, #4
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d026      	beq.n	800a9d8 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a98a:	4b6e      	ldr	r3, [pc, #440]	; (800ab44 <ip4_input+0x2ac>)
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	69b9      	ldr	r1, [r7, #24]
 800a990:	4618      	mov	r0, r3
 800a992:	f000 f9ad 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 800a996:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d11d      	bne.n	800a9d8 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800a9a2:	4b68      	ldr	r3, [pc, #416]	; (800ab44 <ip4_input+0x2ac>)
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b7f      	cmp	r3, #127	; 0x7f
 800a9aa:	d102      	bne.n	800a9b2 <ip4_input+0x11a>
          netif = NULL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61bb      	str	r3, [r7, #24]
          break;
 800a9b0:	e012      	b.n	800a9d8 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800a9b6:	4b64      	ldr	r3, [pc, #400]	; (800ab48 <ip4_input+0x2b0>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	61bb      	str	r3, [r7, #24]
 800a9bc:	e002      	b.n	800a9c4 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d102      	bne.n	800a9d2 <ip4_input+0x13a>
        netif = netif->next;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1c5      	bne.n	800a964 <ip4_input+0xcc>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d111      	bne.n	800aa02 <ip4_input+0x16a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	7a5b      	ldrb	r3, [r3, #9]
 800a9e2:	2b11      	cmp	r3, #17
 800a9e4:	d10d      	bne.n	800aa02 <ip4_input+0x16a>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800a9e6:	89fb      	ldrh	r3, [r7, #14]
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	885b      	ldrh	r3, [r3, #2]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800a9f8:	d103      	bne.n	800aa02 <ip4_input+0x16a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d017      	beq.n	800aa38 <ip4_input+0x1a0>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800aa08:	4b4e      	ldr	r3, [pc, #312]	; (800ab44 <ip4_input+0x2ac>)
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d013      	beq.n	800aa38 <ip4_input+0x1a0>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800aa10:	4b4c      	ldr	r3, [pc, #304]	; (800ab44 <ip4_input+0x2ac>)
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f96a 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <ip4_input+0x196>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800aa22:	4b48      	ldr	r3, [pc, #288]	; (800ab44 <ip4_input+0x2ac>)
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800aa2a:	2be0      	cmp	r3, #224	; 0xe0
 800aa2c:	d104      	bne.n	800aa38 <ip4_input+0x1a0>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f002 f8cc 	bl	800cbcc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e081      	b.n	800ab3c <ip4_input+0x2a4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d104      	bne.n	800aa48 <ip4_input+0x1b0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f002 f8c4 	bl	800cbcc <pbuf_free>
    return ERR_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e079      	b.n	800ab3c <ip4_input+0x2a4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	88db      	ldrh	r3, [r3, #6]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800aa54:	4013      	ands	r3, r2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00b      	beq.n	800aa72 <ip4_input+0x1da>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fc8c 	bl	800b378 <ip4_reass>
 800aa60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <ip4_input+0x1d4>
      return ERR_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	e067      	b.n	800ab3c <ip4_input+0x2a4>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800aa72:	4a34      	ldr	r2, [pc, #208]	; (800ab44 <ip4_input+0x2ac>)
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800aa78:	4a32      	ldr	r2, [pc, #200]	; (800ab44 <ip4_input+0x2ac>)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800aa7e:	4a31      	ldr	r2, [pc, #196]	; (800ab44 <ip4_input+0x2ac>)
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b2b      	ldr	r3, [pc, #172]	; (800ab44 <ip4_input+0x2ac>)
 800aa96:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800aa98:	89fb      	ldrh	r3, [r7, #14]
 800aa9a:	425b      	negs	r3, r3
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	b21b      	sxth	r3, r3
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f002 f86e 	bl	800cb84 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	7a5b      	ldrb	r3, [r3, #9]
 800aaac:	2b06      	cmp	r3, #6
 800aaae:	d009      	beq.n	800aac4 <ip4_input+0x22c>
 800aab0:	2b11      	cmp	r3, #17
 800aab2:	d002      	beq.n	800aaba <ip4_input+0x222>
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d00a      	beq.n	800aace <ip4_input+0x236>
 800aab8:	e00e      	b.n	800aad8 <ip4_input+0x240>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f007 ff3d 	bl	801293c <udp_input>
      break;
 800aac2:	e028      	b.n	800ab16 <ip4_input+0x27e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f003 ff5c 	bl	800e984 <tcp_input>
      break;
 800aacc:	e023      	b.n	800ab16 <ip4_input+0x27e>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff fceb 	bl	800a4ac <icmp_input>
      break;
 800aad6:	e01e      	b.n	800ab16 <ip4_input+0x27e>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800aad8:	4b1a      	ldr	r3, [pc, #104]	; (800ab44 <ip4_input+0x2ac>)
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	69b9      	ldr	r1, [r7, #24]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 f906 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d112      	bne.n	800ab10 <ip4_input+0x278>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aaea:	4b16      	ldr	r3, [pc, #88]	; (800ab44 <ip4_input+0x2ac>)
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800aaf2:	2be0      	cmp	r3, #224	; 0xe0
 800aaf4:	d00c      	beq.n	800ab10 <ip4_input+0x278>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800aaf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f002 f853 	bl	800cba8 <pbuf_header_force>
        p->payload = iphdr;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ab08:	2102      	movs	r1, #2
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff fdd4 	bl	800a6b8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f002 f85b 	bl	800cbcc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <ip4_input+0x2ac>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <ip4_input+0x2ac>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ab22:	4b08      	ldr	r3, [pc, #32]	; (800ab44 <ip4_input+0x2ac>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ab28:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <ip4_input+0x2ac>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ab2e:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <ip4_input+0x2ac>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ab34:	4b03      	ldr	r3, [pc, #12]	; (800ab44 <ip4_input+0x2ac>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20003fe0 	.word	0x20003fe0
 800ab48:	20007728 	.word	0x20007728

0800ab4c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08a      	sub	sp, #40	; 0x28
 800ab50:	af04      	add	r7, sp, #16
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <ip4_output_if+0x26>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	3304      	adds	r3, #4
 800ab76:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ab78:	78fa      	ldrb	r2, [r7, #3]
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	9302      	str	r3, [sp, #8]
 800ab7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6979      	ldr	r1, [r7, #20]
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 f805 	bl	800aba0 <ip4_output_if_src>
 800ab96:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	89db      	ldrh	r3, [r3, #14]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d006      	beq.n	800abc4 <ip4_output_if_src+0x24>
 800abb6:	4b48      	ldr	r3, [pc, #288]	; (800acd8 <ip4_output_if_src+0x138>)
 800abb8:	f240 3233 	movw	r2, #819	; 0x333
 800abbc:	4947      	ldr	r1, [pc, #284]	; (800acdc <ip4_output_if_src+0x13c>)
 800abbe:	4848      	ldr	r0, [pc, #288]	; (800ace0 <ip4_output_if_src+0x140>)
 800abc0:	f009 fc04 	bl	80143cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d060      	beq.n	800ac8c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800abca:	2314      	movs	r3, #20
 800abcc:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800abce:	2114      	movs	r1, #20
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f001 ffd7 	bl	800cb84 <pbuf_header>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800abdc:	f06f 0301 	mvn.w	r3, #1
 800abe0:	e075      	b.n	800acce <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	895b      	ldrh	r3, [r3, #10]
 800abec:	2b13      	cmp	r3, #19
 800abee:	d806      	bhi.n	800abfe <ip4_output_if_src+0x5e>
 800abf0:	4b39      	ldr	r3, [pc, #228]	; (800acd8 <ip4_output_if_src+0x138>)
 800abf2:	f240 3261 	movw	r2, #865	; 0x361
 800abf6:	493b      	ldr	r1, [pc, #236]	; (800ace4 <ip4_output_if_src+0x144>)
 800abf8:	4839      	ldr	r0, [pc, #228]	; (800ace0 <ip4_output_if_src+0x140>)
 800abfa:	f009 fbe7 	bl	80143cc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	78fa      	ldrb	r2, [r7, #3]
 800ac02:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ac0a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ac14:	8bfb      	ldrh	r3, [r7, #30]
 800ac16:	089b      	lsrs	r3, r3, #2
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ac2c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	891b      	ldrh	r3, [r3, #8]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fc fe26 	bl	8007884 <lwip_htons>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	2200      	movs	r2, #0
 800ac44:	719a      	strb	r2, [r3, #6]
 800ac46:	2200      	movs	r2, #0
 800ac48:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ac4a:	4b27      	ldr	r3, [pc, #156]	; (800ace8 <ip4_output_if_src+0x148>)
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fc fe18 	bl	8007884 <lwip_htons>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ac5c:	4b22      	ldr	r3, [pc, #136]	; (800ace8 <ip4_output_if_src+0x148>)
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	4b20      	ldr	r3, [pc, #128]	; (800ace8 <ip4_output_if_src+0x148>)
 800ac66:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d104      	bne.n	800ac78 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	; (800acec <ip4_output_if_src+0x14c>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	60da      	str	r2, [r3, #12]
 800ac76:	e003      	b.n	800ac80 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	2200      	movs	r2, #0
 800ac84:	729a      	strb	r2, [r3, #10]
 800ac86:	2200      	movs	r2, #0
 800ac88:	72da      	strb	r2, [r3, #11]
 800ac8a:	e008      	b.n	800ac9e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ac98:	f107 0314 	add.w	r3, r7, #20
 800ac9c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00c      	beq.n	800acc0 <ip4_output_if_src+0x120>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	891a      	ldrh	r2, [r3, #8]
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acae:	429a      	cmp	r2, r3
 800acb0:	d906      	bls.n	800acc0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 fd06 	bl	800b6c8 <ip4_frag>
 800acbc:	4603      	mov	r3, r0
 800acbe:	e006      	b.n	800acce <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acca:	4798      	blx	r3
 800accc:	4603      	mov	r3, r0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	080164e4 	.word	0x080164e4
 800acdc:	08016518 	.word	0x08016518
 800ace0:	08016524 	.word	0x08016524
 800ace4:	0801654c 	.word	0x0801654c
 800ace8:	20003ef2 	.word	0x20003ef2
 800acec:	08017ec0 	.word	0x08017ec0

0800acf0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad04:	d002      	beq.n	800ad0c <ip4_addr_isbroadcast_u32+0x1c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e02a      	b.n	800ad66 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e021      	b.n	800ad66 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d101      	bne.n	800ad32 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e019      	b.n	800ad66 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	3304      	adds	r3, #4
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	405a      	eors	r2, r3
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4013      	ands	r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10d      	bne.n	800ad64 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	43da      	mvns	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d101      	bne.n	800ad64 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e000      	b.n	800ad66 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ad64:	2300      	movs	r3, #0
  }
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
	...

0800ad74 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ad7e:	4b12      	ldr	r3, [pc, #72]	; (800adc8 <ip_reass_tmr+0x54>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ad84:	e018      	b.n	800adb8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	7fdb      	ldrb	r3, [r3, #31]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00b      	beq.n	800ada6 <ip_reass_tmr+0x32>
      r->timer--;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	7fdb      	ldrb	r3, [r3, #31]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e008      	b.n	800adb8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f80a 	bl	800adcc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e3      	bne.n	800ad86 <ip_reass_tmr+0x12>
     }
   }
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20003ef4 	.word	0x20003ef4

0800adcc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d105      	bne.n	800adee <ip_reass_free_complete_datagram+0x22>
 800ade2:	4b45      	ldr	r3, [pc, #276]	; (800aef8 <ip_reass_free_complete_datagram+0x12c>)
 800ade4:	22ab      	movs	r2, #171	; 0xab
 800ade6:	4945      	ldr	r1, [pc, #276]	; (800aefc <ip_reass_free_complete_datagram+0x130>)
 800ade8:	4845      	ldr	r0, [pc, #276]	; (800af00 <ip_reass_free_complete_datagram+0x134>)
 800adea:	f009 faef 	bl	80143cc <iprintf>
  if (prev != NULL) {
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d005      	beq.n	800ae0a <ip_reass_free_complete_datagram+0x3e>
 800adfe:	4b3e      	ldr	r3, [pc, #248]	; (800aef8 <ip_reass_free_complete_datagram+0x12c>)
 800ae00:	22ad      	movs	r2, #173	; 0xad
 800ae02:	4940      	ldr	r1, [pc, #256]	; (800af04 <ip_reass_free_complete_datagram+0x138>)
 800ae04:	483e      	ldr	r0, [pc, #248]	; (800af00 <ip_reass_free_complete_datagram+0x134>)
 800ae06:	f009 fae1 	bl	80143cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	889b      	ldrh	r3, [r3, #4]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d12a      	bne.n	800ae72 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	6858      	ldr	r0, [r3, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3308      	adds	r3, #8
 800ae32:	2214      	movs	r2, #20
 800ae34:	4619      	mov	r1, r3
 800ae36:	f009 fab6 	bl	80143a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	69b8      	ldr	r0, [r7, #24]
 800ae3e:	f7ff fc4b 	bl	800a6d8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ae42:	69b8      	ldr	r0, [r7, #24]
 800ae44:	f001 ff5c 	bl	800cd00 <pbuf_clen>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ae4c:	8bfa      	ldrh	r2, [r7, #30]
 800ae4e:	8a7b      	ldrh	r3, [r7, #18]
 800ae50:	4413      	add	r3, r2
 800ae52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae56:	db05      	blt.n	800ae64 <ip_reass_free_complete_datagram+0x98>
 800ae58:	4b27      	ldr	r3, [pc, #156]	; (800aef8 <ip_reass_free_complete_datagram+0x12c>)
 800ae5a:	22bc      	movs	r2, #188	; 0xbc
 800ae5c:	492a      	ldr	r1, [pc, #168]	; (800af08 <ip_reass_free_complete_datagram+0x13c>)
 800ae5e:	4828      	ldr	r0, [pc, #160]	; (800af00 <ip_reass_free_complete_datagram+0x134>)
 800ae60:	f009 fab4 	bl	80143cc <iprintf>
    pbufs_freed += clen;
 800ae64:	8bfa      	ldrh	r2, [r7, #30]
 800ae66:	8a7b      	ldrh	r3, [r7, #18]
 800ae68:	4413      	add	r3, r2
 800ae6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ae6c:	69b8      	ldr	r0, [r7, #24]
 800ae6e:	f001 fead 	bl	800cbcc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ae78:	e01f      	b.n	800aeba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f001 ff38 	bl	800cd00 <pbuf_clen>
 800ae90:	4603      	mov	r3, r0
 800ae92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ae94:	8bfa      	ldrh	r2, [r7, #30]
 800ae96:	8a7b      	ldrh	r3, [r7, #18]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae9e:	db05      	blt.n	800aeac <ip_reass_free_complete_datagram+0xe0>
 800aea0:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <ip_reass_free_complete_datagram+0x12c>)
 800aea2:	22cc      	movs	r2, #204	; 0xcc
 800aea4:	4918      	ldr	r1, [pc, #96]	; (800af08 <ip_reass_free_complete_datagram+0x13c>)
 800aea6:	4816      	ldr	r0, [pc, #88]	; (800af00 <ip_reass_free_complete_datagram+0x134>)
 800aea8:	f009 fa90 	bl	80143cc <iprintf>
    pbufs_freed += clen;
 800aeac:	8bfa      	ldrh	r2, [r7, #30]
 800aeae:	8a7b      	ldrh	r3, [r7, #18]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f001 fe89 	bl	800cbcc <pbuf_free>
  while (p != NULL) {
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1dc      	bne.n	800ae7a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f8c2 	bl	800b04c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800aec8:	4b10      	ldr	r3, [pc, #64]	; (800af0c <ip_reass_free_complete_datagram+0x140>)
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	8bfa      	ldrh	r2, [r7, #30]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d905      	bls.n	800aede <ip_reass_free_complete_datagram+0x112>
 800aed2:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <ip_reass_free_complete_datagram+0x12c>)
 800aed4:	22d2      	movs	r2, #210	; 0xd2
 800aed6:	490e      	ldr	r1, [pc, #56]	; (800af10 <ip_reass_free_complete_datagram+0x144>)
 800aed8:	4809      	ldr	r0, [pc, #36]	; (800af00 <ip_reass_free_complete_datagram+0x134>)
 800aeda:	f009 fa77 	bl	80143cc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800aede:	4b0b      	ldr	r3, [pc, #44]	; (800af0c <ip_reass_free_complete_datagram+0x140>)
 800aee0:	881a      	ldrh	r2, [r3, #0]
 800aee2:	8bfb      	ldrh	r3, [r7, #30]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	4b08      	ldr	r3, [pc, #32]	; (800af0c <ip_reass_free_complete_datagram+0x140>)
 800aeea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800aeec:	8bfb      	ldrh	r3, [r7, #30]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3720      	adds	r7, #32
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	0801657c 	.word	0x0801657c
 800aefc:	080165b8 	.word	0x080165b8
 800af00:	080165c4 	.word	0x080165c4
 800af04:	080165ec 	.word	0x080165ec
 800af08:	08016600 	.word	0x08016600
 800af0c:	20003ef8 	.word	0x20003ef8
 800af10:	08016620 	.word	0x08016620

0800af14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800af32:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <ip_reass_remove_oldest_datagram+0xc0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800af38:	e030      	b.n	800af9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	429a      	cmp	r2, r3
 800af44:	d10c      	bne.n	800af60 <ip_reass_remove_oldest_datagram+0x4c>
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d106      	bne.n	800af60 <ip_reass_remove_oldest_datagram+0x4c>
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	899a      	ldrh	r2, [r3, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	889b      	ldrh	r3, [r3, #4]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d014      	beq.n	800af8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	3301      	adds	r3, #1
 800af64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	61bb      	str	r3, [r7, #24]
 800af74:	e009      	b.n	800af8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	7fda      	ldrb	r2, [r3, #31]
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	7fdb      	ldrb	r3, [r3, #31]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d803      	bhi.n	800af8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1cb      	bne.n	800af3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d008      	beq.n	800afba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800afa8:	69b9      	ldr	r1, [r7, #24]
 800afaa:	6a38      	ldr	r0, [r7, #32]
 800afac:	f7ff ff0e 	bl	800adcc <ip_reass_free_complete_datagram>
 800afb0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4413      	add	r3, r2
 800afb8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	da02      	bge.n	800afc8 <ip_reass_remove_oldest_datagram+0xb4>
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	dcac      	bgt.n	800af22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800afc8:	697b      	ldr	r3, [r7, #20]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3728      	adds	r7, #40	; 0x28
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20003ef4 	.word	0x20003ef4

0800afd8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800afe2:	2004      	movs	r0, #4
 800afe4:	f001 f83e 	bl	800c064 <memp_malloc>
 800afe8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d110      	bne.n	800b012 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff ff8e 	bl	800af14 <ip_reass_remove_oldest_datagram>
 800aff8:	4602      	mov	r2, r0
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	db03      	blt.n	800b008 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b000:	2004      	movs	r0, #4
 800b002:	f001 f82f 	bl	800c064 <memp_malloc>
 800b006:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	e016      	b.n	800b040 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b012:	2220      	movs	r2, #32
 800b014:	2100      	movs	r1, #0
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f009 f9d0 	bl	80143bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2203      	movs	r2, #3
 800b020:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b022:	4b09      	ldr	r3, [pc, #36]	; (800b048 <ip_reass_enqueue_new_datagram+0x70>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b02a:	4a07      	ldr	r2, [pc, #28]	; (800b048 <ip_reass_enqueue_new_datagram+0x70>)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3308      	adds	r3, #8
 800b034:	2214      	movs	r2, #20
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f009 f9b4 	bl	80143a6 <memcpy>
  return ipr;
 800b03e:	68fb      	ldr	r3, [r7, #12]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20003ef4 	.word	0x20003ef4

0800b04c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b056:	4b10      	ldr	r3, [pc, #64]	; (800b098 <ip_reass_dequeue_datagram+0x4c>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d104      	bne.n	800b06a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a0c      	ldr	r2, [pc, #48]	; (800b098 <ip_reass_dequeue_datagram+0x4c>)
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	e00d      	b.n	800b086 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d106      	bne.n	800b07e <ip_reass_dequeue_datagram+0x32>
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <ip_reass_dequeue_datagram+0x50>)
 800b072:	f240 1245 	movw	r2, #325	; 0x145
 800b076:	490a      	ldr	r1, [pc, #40]	; (800b0a0 <ip_reass_dequeue_datagram+0x54>)
 800b078:	480a      	ldr	r0, [pc, #40]	; (800b0a4 <ip_reass_dequeue_datagram+0x58>)
 800b07a:	f009 f9a7 	bl	80143cc <iprintf>
    prev->next = ipr->next;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	2004      	movs	r0, #4
 800b08a:	f001 f83d 	bl	800c108 <memp_free>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20003ef4 	.word	0x20003ef4
 800b09c:	0801657c 	.word	0x0801657c
 800b0a0:	0801663c 	.word	0x0801663c
 800b0a4:	080165c4 	.word	0x080165c4

0800b0a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08c      	sub	sp, #48	; 0x30
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fc fbdb 	bl	8007884 <lwip_htons>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	88db      	ldrh	r3, [r3, #6]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fc fbc9 	bl	8007884 <lwip_htons>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	2200      	movs	r2, #0
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	2200      	movs	r2, #0
 800b10c:	705a      	strb	r2, [r3, #1]
 800b10e:	2200      	movs	r2, #0
 800b110:	709a      	strb	r2, [r3, #2]
 800b112:	2200      	movs	r2, #0
 800b114:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	8b3a      	ldrh	r2, [r7, #24]
 800b11a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800b11c:	8b3a      	ldrh	r2, [r7, #24]
 800b11e:	8b7b      	ldrh	r3, [r7, #26]
 800b120:	4413      	add	r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
 800b12e:	e061      	b.n	800b1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b138:	889b      	ldrh	r3, [r3, #4]
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	889b      	ldrh	r3, [r3, #4]
 800b140:	b29b      	uxth	r3, r3
 800b142:	429a      	cmp	r2, r3
 800b144:	d232      	bcs.n	800b1ac <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d01f      	beq.n	800b192 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	889b      	ldrh	r3, [r3, #4]
 800b156:	b29a      	uxth	r2, r3
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	88db      	ldrh	r3, [r3, #6]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	429a      	cmp	r2, r3
 800b160:	f0c0 80e8 	bcc.w	800b334 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800b164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b166:	88db      	ldrh	r3, [r3, #6]
 800b168:	b29a      	uxth	r2, r3
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	889b      	ldrh	r3, [r3, #4]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	429a      	cmp	r2, r3
 800b172:	f200 80df 	bhi.w	800b334 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	88db      	ldrh	r3, [r3, #6]
 800b180:	b29a      	uxth	r2, r3
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	889b      	ldrh	r3, [r3, #4]
 800b186:	b29b      	uxth	r3, r3
 800b188:	429a      	cmp	r2, r3
 800b18a:	d037      	beq.n	800b1fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b190:	e034      	b.n	800b1fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	88db      	ldrh	r3, [r3, #6]
 800b196:	b29a      	uxth	r2, r3
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	889b      	ldrh	r3, [r3, #4]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	f200 80c3 	bhi.w	800b32a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	605a      	str	r2, [r3, #4]
      break;
 800b1aa:	e027      	b.n	800b1fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	889b      	ldrh	r3, [r3, #4]
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	889b      	ldrh	r3, [r3, #4]
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	f000 80b8 	beq.w	800b32e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c0:	889b      	ldrh	r3, [r3, #4]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	88db      	ldrh	r3, [r3, #6]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	f0c0 80b1 	bcc.w	800b332 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d009      	beq.n	800b1ea <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	88db      	ldrh	r3, [r3, #6]
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	889b      	ldrh	r3, [r3, #4]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d001      	beq.n	800b1ea <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d19a      	bne.n	800b130 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800b1fa:	e000      	b.n	800b1fe <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800b1fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	2b00      	cmp	r3, #0
 800b202:	d12d      	bne.n	800b260 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01c      	beq.n	800b244 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20c:	88db      	ldrh	r3, [r3, #6]
 800b20e:	b29a      	uxth	r2, r3
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	889b      	ldrh	r3, [r3, #4]
 800b214:	b29b      	uxth	r3, r3
 800b216:	429a      	cmp	r2, r3
 800b218:	d906      	bls.n	800b228 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800b21a:	4b50      	ldr	r3, [pc, #320]	; (800b35c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b21c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b220:	494f      	ldr	r1, [pc, #316]	; (800b360 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b222:	4850      	ldr	r0, [pc, #320]	; (800b364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b224:	f009 f8d2 	bl	80143cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	88db      	ldrh	r3, [r3, #6]
 800b232:	b29a      	uxth	r2, r3
 800b234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b236:	889b      	ldrh	r3, [r3, #4]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d010      	beq.n	800b260 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	623b      	str	r3, [r7, #32]
 800b242:	e00d      	b.n	800b260 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800b24c:	4b43      	ldr	r3, [pc, #268]	; (800b35c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b24e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800b252:	4945      	ldr	r1, [pc, #276]	; (800b368 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b254:	4843      	ldr	r0, [pc, #268]	; (800b364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b256:	f009 f8b9 	bl	80143cc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d105      	bne.n	800b272 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	7f9b      	ldrb	r3, [r3, #30]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d059      	beq.n	800b326 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d04f      	beq.n	800b318 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	889b      	ldrh	r3, [r3, #4]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	623b      	str	r3, [r7, #32]
 800b292:	e041      	b.n	800b318 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b29e:	e012      	b.n	800b2c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	88db      	ldrh	r3, [r3, #6]
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	889b      	ldrh	r3, [r3, #4]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d002      	beq.n	800b2bc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	623b      	str	r3, [r7, #32]
            break;
 800b2ba:	e007      	b.n	800b2cc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e9      	bne.n	800b2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d022      	beq.n	800b318 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800b2da:	4b20      	ldr	r3, [pc, #128]	; (800b35c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b2dc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800b2e0:	4922      	ldr	r1, [pc, #136]	; (800b36c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b2e2:	4820      	ldr	r0, [pc, #128]	; (800b364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b2e4:	f009 f872 	bl	80143cc <iprintf>
          LWIP_ASSERT("sanity check",
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d106      	bne.n	800b302 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800b2f4:	4b19      	ldr	r3, [pc, #100]	; (800b35c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b2f6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b2fa:	491c      	ldr	r1, [pc, #112]	; (800b36c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b2fc:	4819      	ldr	r0, [pc, #100]	; (800b364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b2fe:	f009 f865 	bl	80143cc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d006      	beq.n	800b318 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800b30a:	4b14      	ldr	r3, [pc, #80]	; (800b35c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b30c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b310:	4917      	ldr	r1, [pc, #92]	; (800b370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b312:	4814      	ldr	r0, [pc, #80]	; (800b364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b314:	f009 f85a 	bl	80143cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b318:	6a3b      	ldr	r3, [r7, #32]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bf14      	ite	ne
 800b31e:	2301      	movne	r3, #1
 800b320:	2300      	moveq	r3, #0
 800b322:	b2db      	uxtb	r3, r3
 800b324:	e016      	b.n	800b354 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b326:	2300      	movs	r3, #0
 800b328:	e014      	b.n	800b354 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800b32a:	bf00      	nop
 800b32c:	e002      	b.n	800b334 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b32e:	bf00      	nop
 800b330:	e000      	b.n	800b334 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b332:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b334:	68b8      	ldr	r0, [r7, #8]
 800b336:	f001 fce3 	bl	800cd00 <pbuf_clen>
 800b33a:	4603      	mov	r3, r0
 800b33c:	461a      	mov	r2, r3
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	1a9b      	subs	r3, r3, r2
 800b344:	b29a      	uxth	r2, r3
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b348:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800b34a:	68b8      	ldr	r0, [r7, #8]
 800b34c:	f001 fc3e 	bl	800cbcc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800b354:	4618      	mov	r0, r3
 800b356:	3730      	adds	r7, #48	; 0x30
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	0801657c 	.word	0x0801657c
 800b360:	08016658 	.word	0x08016658
 800b364:	080165c4 	.word	0x080165c4
 800b368:	08016678 	.word	0x08016678
 800b36c:	080166b0 	.word	0x080166b0
 800b370:	080166c0 	.word	0x080166c0
 800b374:	20003ef8 	.word	0x20003ef8

0800b378 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08e      	sub	sp, #56	; 0x38
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	2b14      	cmp	r3, #20
 800b392:	f040 8131 	bne.w	800b5f8 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	88db      	ldrh	r3, [r3, #6]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7fc fa71 	bl	8007884 <lwip_htons>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	885b      	ldrh	r3, [r3, #2]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fc fa65 	bl	8007884 <lwip_htons>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f003 030f 	and.w	r3, r3, #15
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fc94 	bl	800cd00 <pbuf_clen>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b3dc:	4b8c      	ldr	r3, [pc, #560]	; (800b610 <ip4_reass+0x298>)
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3e4:	4413      	add	r3, r2
 800b3e6:	2b0a      	cmp	r3, #10
 800b3e8:	dd10      	ble.n	800b40c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b3ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3f0:	f7ff fd90 	bl	800af14 <ip_reass_remove_oldest_datagram>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 8101 	beq.w	800b5fe <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b3fc:	4b84      	ldr	r3, [pc, #528]	; (800b610 <ip4_reass+0x298>)
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	461a      	mov	r2, r3
 800b402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b404:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b406:	2b0a      	cmp	r3, #10
 800b408:	f300 80f9 	bgt.w	800b5fe <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b40c:	4b81      	ldr	r3, [pc, #516]	; (800b614 <ip4_reass+0x29c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	633b      	str	r3, [r7, #48]	; 0x30
 800b412:	e015      	b.n	800b440 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	695a      	ldr	r2, [r3, #20]
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d10c      	bne.n	800b43a <ip4_reass+0xc2>
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	699a      	ldr	r2, [r3, #24]
 800b424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d106      	bne.n	800b43a <ip4_reass+0xc2>
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	899a      	ldrh	r2, [r3, #12]
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	889b      	ldrh	r3, [r3, #4]
 800b434:	b29b      	uxth	r3, r3
 800b436:	429a      	cmp	r2, r3
 800b438:	d006      	beq.n	800b448 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	633b      	str	r3, [r7, #48]	; 0x30
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e6      	bne.n	800b414 <ip4_reass+0x9c>
 800b446:	e000      	b.n	800b44a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b448:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d109      	bne.n	800b464 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b452:	4619      	mov	r1, r3
 800b454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b456:	f7ff fdbf 	bl	800afd8 <ip_reass_enqueue_new_datagram>
 800b45a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d11c      	bne.n	800b49c <ip4_reass+0x124>
      goto nullreturn;
 800b462:	e0cc      	b.n	800b5fe <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	88db      	ldrh	r3, [r3, #6]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fc fa0a 	bl	8007884 <lwip_htons>
 800b470:	4603      	mov	r3, r0
 800b472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b476:	2b00      	cmp	r3, #0
 800b478:	d110      	bne.n	800b49c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	89db      	ldrh	r3, [r3, #14]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fc fa00 	bl	8007884 <lwip_htons>
 800b484:	4603      	mov	r3, r0
 800b486:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d006      	beq.n	800b49c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	3308      	adds	r3, #8
 800b492:	2214      	movs	r2, #20
 800b494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b496:	4618      	mov	r0, r3
 800b498:	f008 ff85 	bl	80143a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	88db      	ldrh	r3, [r3, #6]
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bf0c      	ite	eq
 800b4aa:	2301      	moveq	r3, #1
 800b4ac:	2300      	movne	r3, #0
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00e      	beq.n	800b4d6 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800b4b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b4ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4bc:	4413      	add	r3, r2
 800b4be:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b4c0:	8b7a      	ldrh	r2, [r7, #26]
 800b4c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	f0c0 809a 	bcc.w	800b5fe <ip4_reass+0x286>
 800b4ca:	8b7b      	ldrh	r3, [r7, #26]
 800b4cc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	f200 8094 	bhi.w	800b5fe <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b4d6:	69fa      	ldr	r2, [r7, #28]
 800b4d8:	6879      	ldr	r1, [r7, #4]
 800b4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4dc:	f7ff fde4 	bl	800b0a8 <ip_reass_chain_frag_into_datagram_and_validate>
 800b4e0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e8:	f000 8088 	beq.w	800b5fc <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b4ec:	4b48      	ldr	r3, [pc, #288]	; (800b610 <ip4_reass+0x298>)
 800b4ee:	881a      	ldrh	r2, [r3, #0]
 800b4f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4f2:	4413      	add	r3, r2
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	4b46      	ldr	r3, [pc, #280]	; (800b610 <ip4_reass+0x298>)
 800b4f8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00d      	beq.n	800b51c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800b500:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b504:	4413      	add	r3, r2
 800b506:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	8a7a      	ldrh	r2, [r7, #18]
 800b50c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	7f9b      	ldrb	r3, [r3, #30]
 800b512:	f043 0301 	orr.w	r3, r3, #1
 800b516:	b2da      	uxtb	r2, r3
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d168      	bne.n	800b5f4 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	8b9b      	ldrh	r3, [r3, #28]
 800b526:	3314      	adds	r3, #20
 800b528:	b29a      	uxth	r2, r3
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	3308      	adds	r3, #8
 800b544:	2214      	movs	r2, #20
 800b546:	4619      	mov	r1, r3
 800b548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b54a:	f008 ff2c 	bl	80143a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	8b9b      	ldrh	r3, [r3, #28]
 800b552:	4618      	mov	r0, r3
 800b554:	f7fc f996 	bl	8007884 <lwip_htons>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	2200      	movs	r2, #0
 800b564:	719a      	strb	r2, [r3, #6]
 800b566:	2200      	movs	r2, #0
 800b568:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	2200      	movs	r2, #0
 800b56e:	729a      	strb	r2, [r3, #10]
 800b570:	2200      	movs	r2, #0
 800b572:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800b57a:	e00e      	b.n	800b59a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800b57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800b582:	f06f 0113 	mvn.w	r1, #19
 800b586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b588:	f001 fafc 	bl	800cb84 <pbuf_header>
      pbuf_cat(p, r);
 800b58c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 fbf6 	bl	800cd80 <pbuf_cat>
      r = iprh->next_pbuf;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1ed      	bne.n	800b57c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800b5a0:	4b1c      	ldr	r3, [pc, #112]	; (800b614 <ip4_reass+0x29c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d102      	bne.n	800b5b0 <ip4_reass+0x238>
      ipr_prev = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ae:	e010      	b.n	800b5d2 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b5b0:	4b18      	ldr	r3, [pc, #96]	; (800b614 <ip4_reass+0x29c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5b6:	e007      	b.n	800b5c8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d006      	beq.n	800b5d0 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f4      	bne.n	800b5b8 <ip4_reass+0x240>
 800b5ce:	e000      	b.n	800b5d2 <ip4_reass+0x25a>
          break;
 800b5d0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b5d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5d6:	f7ff fd39 	bl	800b04c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 fb90 	bl	800cd00 <pbuf_clen>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <ip4_reass+0x298>)
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	1a9b      	subs	r3, r3, r2
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	4b08      	ldr	r3, [pc, #32]	; (800b610 <ip4_reass+0x298>)
 800b5ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	e008      	b.n	800b606 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e006      	b.n	800b606 <ip4_reass+0x28e>
    goto nullreturn;
 800b5f8:	bf00      	nop
 800b5fa:	e000      	b.n	800b5fe <ip4_reass+0x286>
    goto nullreturn;
 800b5fc:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f001 fae4 	bl	800cbcc <pbuf_free>
  return NULL;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3738      	adds	r7, #56	; 0x38
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20003ef8 	.word	0x20003ef8
 800b614:	20003ef4 	.word	0x20003ef4

0800b618 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b61c:	2005      	movs	r0, #5
 800b61e:	f000 fd21 	bl	800c064 <memp_malloc>
 800b622:	4603      	mov	r3, r0
}
 800b624:	4618      	mov	r0, r3
 800b626:	bd80      	pop	{r7, pc}

0800b628 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d106      	bne.n	800b644 <ip_frag_free_pbuf_custom_ref+0x1c>
 800b636:	4b07      	ldr	r3, [pc, #28]	; (800b654 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800b638:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b63c:	4906      	ldr	r1, [pc, #24]	; (800b658 <ip_frag_free_pbuf_custom_ref+0x30>)
 800b63e:	4807      	ldr	r0, [pc, #28]	; (800b65c <ip_frag_free_pbuf_custom_ref+0x34>)
 800b640:	f008 fec4 	bl	80143cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	2005      	movs	r0, #5
 800b648:	f000 fd5e 	bl	800c108 <memp_free>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	0801657c 	.word	0x0801657c
 800b658:	080166e4 	.word	0x080166e4
 800b65c:	080165c4 	.word	0x080165c4

0800b660 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d106      	bne.n	800b680 <ipfrag_free_pbuf_custom+0x20>
 800b672:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <ipfrag_free_pbuf_custom+0x58>)
 800b674:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b678:	4910      	ldr	r1, [pc, #64]	; (800b6bc <ipfrag_free_pbuf_custom+0x5c>)
 800b67a:	4811      	ldr	r0, [pc, #68]	; (800b6c0 <ipfrag_free_pbuf_custom+0x60>)
 800b67c:	f008 fea6 	bl	80143cc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d006      	beq.n	800b696 <ipfrag_free_pbuf_custom+0x36>
 800b688:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <ipfrag_free_pbuf_custom+0x58>)
 800b68a:	f240 22b9 	movw	r2, #697	; 0x2b9
 800b68e:	490d      	ldr	r1, [pc, #52]	; (800b6c4 <ipfrag_free_pbuf_custom+0x64>)
 800b690:	480b      	ldr	r0, [pc, #44]	; (800b6c0 <ipfrag_free_pbuf_custom+0x60>)
 800b692:	f008 fe9b 	bl	80143cc <iprintf>
  if (pcr->original != NULL) {
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d004      	beq.n	800b6a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f001 fa92 	bl	800cbcc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff ffbd 	bl	800b628 <ip_frag_free_pbuf_custom_ref>
}
 800b6ae:	bf00      	nop
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	0801657c 	.word	0x0801657c
 800b6bc:	080166f0 	.word	0x080166f0
 800b6c0:	080165c4 	.word	0x080165c4
 800b6c4:	080166fc 	.word	0x080166fc

0800b6c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b092      	sub	sp, #72	; 0x48
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6dc:	3b14      	subs	r3, #20
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da00      	bge.n	800b6e4 <ip4_frag+0x1c>
 800b6e2:	3307      	adds	r3, #7
 800b6e4:	10db      	asrs	r3, r3, #3
 800b6e6:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b6e8:	2314      	movs	r3, #20
 800b6ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f003 030f 	and.w	r3, r3, #15
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	2b14      	cmp	r3, #20
 800b702:	d009      	beq.n	800b718 <ip4_frag+0x50>
 800b704:	4b79      	ldr	r3, [pc, #484]	; (800b8ec <ip4_frag+0x224>)
 800b706:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b70a:	4979      	ldr	r1, [pc, #484]	; (800b8f0 <ip4_frag+0x228>)
 800b70c:	4879      	ldr	r0, [pc, #484]	; (800b8f4 <ip4_frag+0x22c>)
 800b70e:	f008 fe5d 	bl	80143cc <iprintf>
 800b712:	f06f 0305 	mvn.w	r3, #5
 800b716:	e0e5      	b.n	800b8e4 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	88db      	ldrh	r3, [r3, #6]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fc f8b0 	bl	8007884 <lwip_htons>
 800b724:	4603      	mov	r3, r0
 800b726:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800b728:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b72a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b72e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b730:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <ip4_frag+0x86>
 800b73a:	4b6c      	ldr	r3, [pc, #432]	; (800b8ec <ip4_frag+0x224>)
 800b73c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b740:	496d      	ldr	r1, [pc, #436]	; (800b8f8 <ip4_frag+0x230>)
 800b742:	486c      	ldr	r0, [pc, #432]	; (800b8f4 <ip4_frag+0x22c>)
 800b744:	f008 fe42 	bl	80143cc <iprintf>
 800b748:	f06f 0305 	mvn.w	r3, #5
 800b74c:	e0ca      	b.n	800b8e4 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	891b      	ldrh	r3, [r3, #8]
 800b752:	3b14      	subs	r3, #20
 800b754:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800b756:	e0bc      	b.n	800b8d2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800b758:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b75a:	00da      	lsls	r2, r3, #3
 800b75c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b75e:	4293      	cmp	r3, r2
 800b760:	bfa8      	it	ge
 800b762:	4613      	movge	r3, r2
 800b764:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b766:	2200      	movs	r2, #0
 800b768:	2114      	movs	r1, #20
 800b76a:	2002      	movs	r0, #2
 800b76c:	f000 febc 	bl	800c4e8 <pbuf_alloc>
 800b770:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 80b2 	beq.w	800b8de <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	895b      	ldrh	r3, [r3, #10]
 800b77e:	2b13      	cmp	r3, #19
 800b780:	d806      	bhi.n	800b790 <ip4_frag+0xc8>
 800b782:	4b5a      	ldr	r3, [pc, #360]	; (800b8ec <ip4_frag+0x224>)
 800b784:	f240 3209 	movw	r2, #777	; 0x309
 800b788:	495c      	ldr	r1, [pc, #368]	; (800b8fc <ip4_frag+0x234>)
 800b78a:	485a      	ldr	r0, [pc, #360]	; (800b8f4 <ip4_frag+0x22c>)
 800b78c:	f008 fe1e 	bl	80143cc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2214      	movs	r2, #20
 800b796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b798:	4618      	mov	r0, r3
 800b79a:	f008 fe04 	bl	80143a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800b7a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800b7a8:	e04f      	b.n	800b84a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	895a      	ldrh	r2, [r3, #10]
 800b7ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b7b4:	8bfa      	ldrh	r2, [r7, #30]
 800b7b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	bf28      	it	cs
 800b7bc:	4613      	movcs	r3, r2
 800b7be:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b7c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d105      	bne.n	800b7d2 <ip4_frag+0x10a>
        poff = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	60fb      	str	r3, [r7, #12]
        continue;
 800b7d0:	e03b      	b.n	800b84a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b7d2:	f7ff ff21 	bl	800b618 <ip_frag_alloc_pbuf_custom_ref>
 800b7d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d103      	bne.n	800b7e6 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800b7de:	6a38      	ldr	r0, [r7, #32]
 800b7e0:	f001 f9f4 	bl	800cbcc <pbuf_free>
        goto memerr;
 800b7e4:	e07c      	b.n	800b8e0 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b7e6:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b7ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7ee:	4413      	add	r3, r2
 800b7f0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800b7f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b7f4:	9201      	str	r2, [sp, #4]
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	2004      	movs	r0, #4
 800b7fe:	f001 f807 	bl	800c810 <pbuf_alloced_custom>
 800b802:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b80a:	69b8      	ldr	r0, [r7, #24]
 800b80c:	f7ff ff0c 	bl	800b628 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b810:	6a38      	ldr	r0, [r7, #32]
 800b812:	f001 f9db 	bl	800cbcc <pbuf_free>
        goto memerr;
 800b816:	e063      	b.n	800b8e0 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f001 fa89 	bl	800cd30 <pbuf_ref>
      pcr->original = p;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	4a36      	ldr	r2, [pc, #216]	; (800b900 <ip4_frag+0x238>)
 800b828:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b82a:	6979      	ldr	r1, [r7, #20]
 800b82c:	6a38      	ldr	r0, [r7, #32]
 800b82e:	f001 faa7 	bl	800cd80 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800b832:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800b83a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d004      	beq.n	800b84a <ip4_frag+0x182>
        poff = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b84a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1ac      	bne.n	800b7aa <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800b850:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b854:	4413      	add	r3, r2
 800b856:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b858:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b85e:	3b14      	subs	r3, #20
 800b860:	429a      	cmp	r2, r3
 800b862:	bfd4      	ite	le
 800b864:	2301      	movle	r3, #1
 800b866:	2300      	movgt	r3, #0
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b86c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b86e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b872:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d103      	bne.n	800b882 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800b87a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b87c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b880:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b882:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b884:	4618      	mov	r0, r3
 800b886:	f7fb fffd 	bl	8007884 <lwip_htons>
 800b88a:	4603      	mov	r3, r0
 800b88c:	461a      	mov	r2, r3
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b894:	3314      	adds	r3, #20
 800b896:	b29b      	uxth	r3, r3
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fb fff3 	bl	8007884 <lwip_htons>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	729a      	strb	r2, [r3, #10]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	6a39      	ldr	r1, [r7, #32]
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b8bc:	6a38      	ldr	r0, [r7, #32]
 800b8be:	f001 f985 	bl	800cbcc <pbuf_free>
    left -= fragsize;
 800b8c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b8c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800b8ca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b8cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b8ce:	4413      	add	r3, r2
 800b8d0:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800b8d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f47f af3f 	bne.w	800b758 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e002      	b.n	800b8e4 <ip4_frag+0x21c>
      goto memerr;
 800b8de:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3740      	adds	r7, #64	; 0x40
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	0801657c 	.word	0x0801657c
 800b8f0:	08016708 	.word	0x08016708
 800b8f4:	080165c4 	.word	0x080165c4
 800b8f8:	08016730 	.word	0x08016730
 800b8fc:	0801674c 	.word	0x0801674c
 800b900:	0800b661 	.word	0x0800b661

0800b904 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b90c:	4b40      	ldr	r3, [pc, #256]	; (800ba10 <plug_holes+0x10c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d206      	bcs.n	800b924 <plug_holes+0x20>
 800b916:	4b3f      	ldr	r3, [pc, #252]	; (800ba14 <plug_holes+0x110>)
 800b918:	f240 125d 	movw	r2, #349	; 0x15d
 800b91c:	493e      	ldr	r1, [pc, #248]	; (800ba18 <plug_holes+0x114>)
 800b91e:	483f      	ldr	r0, [pc, #252]	; (800ba1c <plug_holes+0x118>)
 800b920:	f008 fd54 	bl	80143cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b924:	4b3e      	ldr	r3, [pc, #248]	; (800ba20 <plug_holes+0x11c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d306      	bcc.n	800b93c <plug_holes+0x38>
 800b92e:	4b39      	ldr	r3, [pc, #228]	; (800ba14 <plug_holes+0x110>)
 800b930:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b934:	493b      	ldr	r1, [pc, #236]	; (800ba24 <plug_holes+0x120>)
 800b936:	4839      	ldr	r0, [pc, #228]	; (800ba1c <plug_holes+0x118>)
 800b938:	f008 fd48 	bl	80143cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	791b      	ldrb	r3, [r3, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <plug_holes+0x4e>
 800b944:	4b33      	ldr	r3, [pc, #204]	; (800ba14 <plug_holes+0x110>)
 800b946:	f240 125f 	movw	r2, #351	; 0x15f
 800b94a:	4937      	ldr	r1, [pc, #220]	; (800ba28 <plug_holes+0x124>)
 800b94c:	4833      	ldr	r0, [pc, #204]	; (800ba1c <plug_holes+0x118>)
 800b94e:	f008 fd3d 	bl	80143cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b95a:	d906      	bls.n	800b96a <plug_holes+0x66>
 800b95c:	4b2d      	ldr	r3, [pc, #180]	; (800ba14 <plug_holes+0x110>)
 800b95e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800b962:	4932      	ldr	r1, [pc, #200]	; (800ba2c <plug_holes+0x128>)
 800b964:	482d      	ldr	r0, [pc, #180]	; (800ba1c <plug_holes+0x118>)
 800b966:	f008 fd31 	bl	80143cc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800b96a:	4b29      	ldr	r3, [pc, #164]	; (800ba10 <plug_holes+0x10c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	8812      	ldrh	r2, [r2, #0]
 800b972:	4413      	add	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d01f      	beq.n	800b9be <plug_holes+0xba>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	791b      	ldrb	r3, [r3, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d11b      	bne.n	800b9be <plug_holes+0xba>
 800b986:	4b26      	ldr	r3, [pc, #152]	; (800ba20 <plug_holes+0x11c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d016      	beq.n	800b9be <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b990:	4b27      	ldr	r3, [pc, #156]	; (800ba30 <plug_holes+0x12c>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	429a      	cmp	r2, r3
 800b998:	d102      	bne.n	800b9a0 <plug_holes+0x9c>
      lfree = mem;
 800b99a:	4a25      	ldr	r2, [pc, #148]	; (800ba30 <plug_holes+0x12c>)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	881a      	ldrh	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800b9a8:	4b19      	ldr	r3, [pc, #100]	; (800ba10 <plug_holes+0x10c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	8812      	ldrh	r2, [r2, #0]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4916      	ldr	r1, [pc, #88]	; (800ba10 <plug_holes+0x10c>)
 800b9b6:	6809      	ldr	r1, [r1, #0]
 800b9b8:	1a52      	subs	r2, r2, r1
 800b9ba:	b292      	uxth	r2, r2
 800b9bc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b9be:	4b14      	ldr	r3, [pc, #80]	; (800ba10 <plug_holes+0x10c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	8852      	ldrh	r2, [r2, #2]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d01a      	beq.n	800ba08 <plug_holes+0x104>
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	791b      	ldrb	r3, [r3, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d116      	bne.n	800ba08 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b9da:	4b15      	ldr	r3, [pc, #84]	; (800ba30 <plug_holes+0x12c>)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d102      	bne.n	800b9ea <plug_holes+0xe6>
      lfree = pmem;
 800b9e4:	4a12      	ldr	r2, [pc, #72]	; (800ba30 <plug_holes+0x12c>)
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	881a      	ldrh	r2, [r3, #0]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b9f2:	4b07      	ldr	r3, [pc, #28]	; (800ba10 <plug_holes+0x10c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	8812      	ldrh	r2, [r2, #0]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	4904      	ldr	r1, [pc, #16]	; (800ba10 <plug_holes+0x10c>)
 800ba00:	6809      	ldr	r1, [r1, #0]
 800ba02:	1a52      	subs	r2, r2, r1
 800ba04:	b292      	uxth	r2, r2
 800ba06:	805a      	strh	r2, [r3, #2]
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20003efc 	.word	0x20003efc
 800ba14:	0801676c 	.word	0x0801676c
 800ba18:	0801679c 	.word	0x0801679c
 800ba1c:	080167b4 	.word	0x080167b4
 800ba20:	20003f00 	.word	0x20003f00
 800ba24:	080167dc 	.word	0x080167dc
 800ba28:	080167f8 	.word	0x080167f8
 800ba2c:	08016814 	.word	0x08016814
 800ba30:	20003f04 	.word	0x20003f04

0800ba34 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba3a:	4b1e      	ldr	r3, [pc, #120]	; (800bab4 <mem_init+0x80>)
 800ba3c:	3303      	adds	r3, #3
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	461a      	mov	r2, r3
 800ba44:	4b1c      	ldr	r3, [pc, #112]	; (800bab8 <mem_init+0x84>)
 800ba46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba48:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <mem_init+0x84>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ba62:	4b15      	ldr	r3, [pc, #84]	; (800bab8 <mem_init+0x84>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ba6a:	4a14      	ldr	r2, [pc, #80]	; (800babc <mem_init+0x88>)
 800ba6c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <mem_init+0x88>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2201      	movs	r2, #1
 800ba74:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ba76:	4b11      	ldr	r3, [pc, #68]	; (800babc <mem_init+0x88>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba7e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ba80:	4b0e      	ldr	r3, [pc, #56]	; (800babc <mem_init+0x88>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba88:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba8a:	4b0b      	ldr	r3, [pc, #44]	; (800bab8 <mem_init+0x84>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a0c      	ldr	r2, [pc, #48]	; (800bac0 <mem_init+0x8c>)
 800ba90:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ba92:	480c      	ldr	r0, [pc, #48]	; (800bac4 <mem_init+0x90>)
 800ba94:	f007 fcbe 	bl	8013414 <sys_mutex_new>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d006      	beq.n	800baac <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ba9e:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <mem_init+0x94>)
 800baa0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800baa4:	4909      	ldr	r1, [pc, #36]	; (800bacc <mem_init+0x98>)
 800baa6:	480a      	ldr	r0, [pc, #40]	; (800bad0 <mem_init+0x9c>)
 800baa8:	f008 fc90 	bl	80143cc <iprintf>
  }
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20004020 	.word	0x20004020
 800bab8:	20003efc 	.word	0x20003efc
 800babc:	20003f00 	.word	0x20003f00
 800bac0:	20003f04 	.word	0x20003f04
 800bac4:	20003f08 	.word	0x20003f08
 800bac8:	0801676c 	.word	0x0801676c
 800bacc:	08016840 	.word	0x08016840
 800bad0:	080167b4 	.word	0x080167b4

0800bad4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d050      	beq.n	800bb84 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f003 0303 	and.w	r3, r3, #3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d006      	beq.n	800bafa <mem_free+0x26>
 800baec:	4b27      	ldr	r3, [pc, #156]	; (800bb8c <mem_free+0xb8>)
 800baee:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800baf2:	4927      	ldr	r1, [pc, #156]	; (800bb90 <mem_free+0xbc>)
 800baf4:	4827      	ldr	r0, [pc, #156]	; (800bb94 <mem_free+0xc0>)
 800baf6:	f008 fc69 	bl	80143cc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bafa:	4b27      	ldr	r3, [pc, #156]	; (800bb98 <mem_free+0xc4>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d304      	bcc.n	800bb0e <mem_free+0x3a>
 800bb04:	4b25      	ldr	r3, [pc, #148]	; (800bb9c <mem_free+0xc8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d306      	bcc.n	800bb1c <mem_free+0x48>
 800bb0e:	4b1f      	ldr	r3, [pc, #124]	; (800bb8c <mem_free+0xb8>)
 800bb10:	f240 12af 	movw	r2, #431	; 0x1af
 800bb14:	4922      	ldr	r1, [pc, #136]	; (800bba0 <mem_free+0xcc>)
 800bb16:	481f      	ldr	r0, [pc, #124]	; (800bb94 <mem_free+0xc0>)
 800bb18:	f008 fc58 	bl	80143cc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb1c:	4b1e      	ldr	r3, [pc, #120]	; (800bb98 <mem_free+0xc4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d304      	bcc.n	800bb30 <mem_free+0x5c>
 800bb26:	4b1d      	ldr	r3, [pc, #116]	; (800bb9c <mem_free+0xc8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d306      	bcc.n	800bb3e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800bb30:	f007 fcc4 	bl	80134bc <sys_arch_protect>
 800bb34:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800bb36:	68b8      	ldr	r0, [r7, #8]
 800bb38:	f007 fcce 	bl	80134d8 <sys_arch_unprotect>
    return;
 800bb3c:	e023      	b.n	800bb86 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bb3e:	4819      	ldr	r0, [pc, #100]	; (800bba4 <mem_free+0xd0>)
 800bb40:	f007 fc82 	bl	8013448 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3b08      	subs	r3, #8
 800bb48:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	791b      	ldrb	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d106      	bne.n	800bb60 <mem_free+0x8c>
 800bb52:	4b0e      	ldr	r3, [pc, #56]	; (800bb8c <mem_free+0xb8>)
 800bb54:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800bb58:	4913      	ldr	r1, [pc, #76]	; (800bba8 <mem_free+0xd4>)
 800bb5a:	480e      	ldr	r0, [pc, #56]	; (800bb94 <mem_free+0xc0>)
 800bb5c:	f008 fc36 	bl	80143cc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb66:	4b11      	ldr	r3, [pc, #68]	; (800bbac <mem_free+0xd8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d202      	bcs.n	800bb76 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb70:	4a0e      	ldr	r2, [pc, #56]	; (800bbac <mem_free+0xd8>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f7ff fec4 	bl	800b904 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb7c:	4809      	ldr	r0, [pc, #36]	; (800bba4 <mem_free+0xd0>)
 800bb7e:	f007 fc72 	bl	8013466 <sys_mutex_unlock>
 800bb82:	e000      	b.n	800bb86 <mem_free+0xb2>
    return;
 800bb84:	bf00      	nop
}
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	0801676c 	.word	0x0801676c
 800bb90:	0801685c 	.word	0x0801685c
 800bb94:	080167b4 	.word	0x080167b4
 800bb98:	20003efc 	.word	0x20003efc
 800bb9c:	20003f00 	.word	0x20003f00
 800bba0:	08016880 	.word	0x08016880
 800bba4:	20003f08 	.word	0x20003f08
 800bba8:	08016898 	.word	0x08016898
 800bbac:	20003f04 	.word	0x20003f04

0800bbb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b088      	sub	sp, #32
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800bbbc:	887b      	ldrh	r3, [r7, #2]
 800bbbe:	3303      	adds	r3, #3
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800bbc8:	887b      	ldrh	r3, [r7, #2]
 800bbca:	2b0b      	cmp	r3, #11
 800bbcc:	d801      	bhi.n	800bbd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bbce:	230c      	movs	r3, #12
 800bbd0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800bbd2:	887b      	ldrh	r3, [r7, #2]
 800bbd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbd8:	d901      	bls.n	800bbde <mem_trim+0x2e>
    return NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e0bd      	b.n	800bd5a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bbde:	4b61      	ldr	r3, [pc, #388]	; (800bd64 <mem_trim+0x1b4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d304      	bcc.n	800bbf2 <mem_trim+0x42>
 800bbe8:	4b5f      	ldr	r3, [pc, #380]	; (800bd68 <mem_trim+0x1b8>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d306      	bcc.n	800bc00 <mem_trim+0x50>
 800bbf2:	4b5e      	ldr	r3, [pc, #376]	; (800bd6c <mem_trim+0x1bc>)
 800bbf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bbf8:	495d      	ldr	r1, [pc, #372]	; (800bd70 <mem_trim+0x1c0>)
 800bbfa:	485e      	ldr	r0, [pc, #376]	; (800bd74 <mem_trim+0x1c4>)
 800bbfc:	f008 fbe6 	bl	80143cc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bc00:	4b58      	ldr	r3, [pc, #352]	; (800bd64 <mem_trim+0x1b4>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d304      	bcc.n	800bc14 <mem_trim+0x64>
 800bc0a:	4b57      	ldr	r3, [pc, #348]	; (800bd68 <mem_trim+0x1b8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d307      	bcc.n	800bc24 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800bc14:	f007 fc52 	bl	80134bc <sys_arch_protect>
 800bc18:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f007 fc5c 	bl	80134d8 <sys_arch_unprotect>
    return rmem;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	e09a      	b.n	800bd5a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3b08      	subs	r3, #8
 800bc28:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	4a4d      	ldr	r2, [pc, #308]	; (800bd64 <mem_trim+0x1b4>)
 800bc2e:	6812      	ldr	r2, [r2, #0]
 800bc30:	1a9b      	subs	r3, r3, r2
 800bc32:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	881a      	ldrh	r2, [r3, #0]
 800bc38:	8b7b      	ldrh	r3, [r7, #26]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	3b08      	subs	r3, #8
 800bc40:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bc42:	887a      	ldrh	r2, [r7, #2]
 800bc44:	8b3b      	ldrh	r3, [r7, #24]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d906      	bls.n	800bc58 <mem_trim+0xa8>
 800bc4a:	4b48      	ldr	r3, [pc, #288]	; (800bd6c <mem_trim+0x1bc>)
 800bc4c:	f240 2206 	movw	r2, #518	; 0x206
 800bc50:	4949      	ldr	r1, [pc, #292]	; (800bd78 <mem_trim+0x1c8>)
 800bc52:	4848      	ldr	r0, [pc, #288]	; (800bd74 <mem_trim+0x1c4>)
 800bc54:	f008 fbba 	bl	80143cc <iprintf>
  if (newsize > size) {
 800bc58:	887a      	ldrh	r2, [r7, #2]
 800bc5a:	8b3b      	ldrh	r3, [r7, #24]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d901      	bls.n	800bc64 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	e07a      	b.n	800bd5a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800bc64:	887a      	ldrh	r2, [r7, #2]
 800bc66:	8b3b      	ldrh	r3, [r7, #24]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d101      	bne.n	800bc70 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	e074      	b.n	800bd5a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc70:	4842      	ldr	r0, [pc, #264]	; (800bd7c <mem_trim+0x1cc>)
 800bc72:	f007 fbe9 	bl	8013448 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800bc76:	4b3b      	ldr	r3, [pc, #236]	; (800bd64 <mem_trim+0x1b4>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	8812      	ldrh	r2, [r2, #0]
 800bc7e:	4413      	add	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	791b      	ldrb	r3, [r3, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d131      	bne.n	800bcee <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800bc90:	8b7a      	ldrh	r2, [r7, #26]
 800bc92:	887b      	ldrh	r3, [r7, #2]
 800bc94:	4413      	add	r3, r2
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	3308      	adds	r3, #8
 800bc9a:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800bc9c:	4b38      	ldr	r3, [pc, #224]	; (800bd80 <mem_trim+0x1d0>)
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d105      	bne.n	800bcb2 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800bca6:	4b2f      	ldr	r3, [pc, #188]	; (800bd64 <mem_trim+0x1b4>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	8a3b      	ldrh	r3, [r7, #16]
 800bcac:	4413      	add	r3, r2
 800bcae:	4a34      	ldr	r2, [pc, #208]	; (800bd80 <mem_trim+0x1d0>)
 800bcb0:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800bcb2:	4b2c      	ldr	r3, [pc, #176]	; (800bd64 <mem_trim+0x1b4>)
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	8a3b      	ldrh	r3, [r7, #16]
 800bcb8:	4413      	add	r3, r2
 800bcba:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	8a7a      	ldrh	r2, [r7, #18]
 800bcc6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	8b7a      	ldrh	r2, [r7, #26]
 800bccc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	8a3a      	ldrh	r2, [r7, #16]
 800bcd2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcdc:	d039      	beq.n	800bd52 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bcde:	4b21      	ldr	r3, [pc, #132]	; (800bd64 <mem_trim+0x1b4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	8812      	ldrh	r2, [r2, #0]
 800bce6:	4413      	add	r3, r2
 800bce8:	8a3a      	ldrh	r2, [r7, #16]
 800bcea:	805a      	strh	r2, [r3, #2]
 800bcec:	e031      	b.n	800bd52 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcee:	887b      	ldrh	r3, [r7, #2]
 800bcf0:	f103 0214 	add.w	r2, r3, #20
 800bcf4:	8b3b      	ldrh	r3, [r7, #24]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d82b      	bhi.n	800bd52 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800bcfa:	8b7a      	ldrh	r2, [r7, #26]
 800bcfc:	887b      	ldrh	r3, [r7, #2]
 800bcfe:	4413      	add	r3, r2
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	3308      	adds	r3, #8
 800bd04:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800bd06:	4b17      	ldr	r3, [pc, #92]	; (800bd64 <mem_trim+0x1b4>)
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	8a3b      	ldrh	r3, [r7, #16]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800bd10:	4b1b      	ldr	r3, [pc, #108]	; (800bd80 <mem_trim+0x1d0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d202      	bcs.n	800bd20 <mem_trim+0x170>
      lfree = mem2;
 800bd1a:	4a19      	ldr	r2, [pc, #100]	; (800bd80 <mem_trim+0x1d0>)
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2200      	movs	r2, #0
 800bd24:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	881a      	ldrh	r2, [r3, #0]
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	8b7a      	ldrh	r2, [r7, #26]
 800bd32:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	8a3a      	ldrh	r2, [r7, #16]
 800bd38:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd42:	d006      	beq.n	800bd52 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bd44:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <mem_trim+0x1b4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	8812      	ldrh	r2, [r2, #0]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	8a3a      	ldrh	r2, [r7, #16]
 800bd50:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd52:	480a      	ldr	r0, [pc, #40]	; (800bd7c <mem_trim+0x1cc>)
 800bd54:	f007 fb87 	bl	8013466 <sys_mutex_unlock>
  return rmem;
 800bd58:	687b      	ldr	r3, [r7, #4]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3720      	adds	r7, #32
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20003efc 	.word	0x20003efc
 800bd68:	20003f00 	.word	0x20003f00
 800bd6c:	0801676c 	.word	0x0801676c
 800bd70:	080168ac 	.word	0x080168ac
 800bd74:	080167b4 	.word	0x080167b4
 800bd78:	080168c4 	.word	0x080168c4
 800bd7c:	20003f08 	.word	0x20003f08
 800bd80:	20003f04 	.word	0x20003f04

0800bd84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800bd8e:	88fb      	ldrh	r3, [r7, #6]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <mem_malloc+0x14>
    return NULL;
 800bd94:	2300      	movs	r3, #0
 800bd96:	e0d1      	b.n	800bf3c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	3303      	adds	r3, #3
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	f023 0303 	bic.w	r3, r3, #3
 800bda2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	2b0b      	cmp	r3, #11
 800bda8:	d801      	bhi.n	800bdae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bdaa:	230c      	movs	r3, #12
 800bdac:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800bdae:	88fb      	ldrh	r3, [r7, #6]
 800bdb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdb4:	d901      	bls.n	800bdba <mem_malloc+0x36>
    return NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e0c0      	b.n	800bf3c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bdba:	4862      	ldr	r0, [pc, #392]	; (800bf44 <mem_malloc+0x1c0>)
 800bdbc:	f007 fb44 	bl	8013448 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bdc0:	4b61      	ldr	r3, [pc, #388]	; (800bf48 <mem_malloc+0x1c4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4b61      	ldr	r3, [pc, #388]	; (800bf4c <mem_malloc+0x1c8>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	83fb      	strh	r3, [r7, #30]
 800bdce:	e0aa      	b.n	800bf26 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800bdd0:	4b5e      	ldr	r3, [pc, #376]	; (800bf4c <mem_malloc+0x1c8>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	8bfb      	ldrh	r3, [r7, #30]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	791b      	ldrb	r3, [r3, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f040 809b 	bne.w	800bf1a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	461a      	mov	r2, r3
 800bdea:	8bfb      	ldrh	r3, [r7, #30]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	f1a3 0208 	sub.w	r2, r3, #8
 800bdf2:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	f0c0 8090 	bcc.w	800bf1a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	8bfb      	ldrh	r3, [r7, #30]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	f1a3 0208 	sub.w	r2, r3, #8
 800be08:	88fb      	ldrh	r3, [r7, #6]
 800be0a:	3314      	adds	r3, #20
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d327      	bcc.n	800be60 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800be10:	8bfa      	ldrh	r2, [r7, #30]
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	4413      	add	r3, r2
 800be16:	b29b      	uxth	r3, r3
 800be18:	3308      	adds	r3, #8
 800be1a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800be1c:	4b4b      	ldr	r3, [pc, #300]	; (800bf4c <mem_malloc+0x1c8>)
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	8a7b      	ldrh	r3, [r7, #18]
 800be22:	4413      	add	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	881a      	ldrh	r2, [r3, #0]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8bfa      	ldrh	r2, [r7, #30]
 800be38:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	8a7a      	ldrh	r2, [r7, #18]
 800be3e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2201      	movs	r2, #1
 800be44:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be4e:	d00a      	beq.n	800be66 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800be50:	4b3e      	ldr	r3, [pc, #248]	; (800bf4c <mem_malloc+0x1c8>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	8812      	ldrh	r2, [r2, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	8a7a      	ldrh	r2, [r7, #18]
 800be5c:	805a      	strh	r2, [r3, #2]
 800be5e:	e002      	b.n	800be66 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2201      	movs	r2, #1
 800be64:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be66:	4b38      	ldr	r3, [pc, #224]	; (800bf48 <mem_malloc+0x1c4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d127      	bne.n	800bec0 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800be70:	4b35      	ldr	r3, [pc, #212]	; (800bf48 <mem_malloc+0x1c4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be76:	e005      	b.n	800be84 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800be78:	4b34      	ldr	r3, [pc, #208]	; (800bf4c <mem_malloc+0x1c8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	8812      	ldrh	r2, [r2, #0]
 800be80:	4413      	add	r3, r2
 800be82:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	791b      	ldrb	r3, [r3, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <mem_malloc+0x112>
 800be8c:	4b30      	ldr	r3, [pc, #192]	; (800bf50 <mem_malloc+0x1cc>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	429a      	cmp	r2, r3
 800be94:	d1f0      	bne.n	800be78 <mem_malloc+0xf4>
          }
          lfree = cur;
 800be96:	4a2c      	ldr	r2, [pc, #176]	; (800bf48 <mem_malloc+0x1c4>)
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be9c:	4b2a      	ldr	r3, [pc, #168]	; (800bf48 <mem_malloc+0x1c4>)
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	4b2b      	ldr	r3, [pc, #172]	; (800bf50 <mem_malloc+0x1cc>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d00b      	beq.n	800bec0 <mem_malloc+0x13c>
 800bea8:	4b27      	ldr	r3, [pc, #156]	; (800bf48 <mem_malloc+0x1c4>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	791b      	ldrb	r3, [r3, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d006      	beq.n	800bec0 <mem_malloc+0x13c>
 800beb2:	4b28      	ldr	r3, [pc, #160]	; (800bf54 <mem_malloc+0x1d0>)
 800beb4:	f240 22cf 	movw	r2, #719	; 0x2cf
 800beb8:	4927      	ldr	r1, [pc, #156]	; (800bf58 <mem_malloc+0x1d4>)
 800beba:	4828      	ldr	r0, [pc, #160]	; (800bf5c <mem_malloc+0x1d8>)
 800bebc:	f008 fa86 	bl	80143cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bec0:	4820      	ldr	r0, [pc, #128]	; (800bf44 <mem_malloc+0x1c0>)
 800bec2:	f007 fad0 	bl	8013466 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bec6:	88fa      	ldrh	r2, [r7, #6]
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	4413      	add	r3, r2
 800becc:	3308      	adds	r3, #8
 800bece:	4a20      	ldr	r2, [pc, #128]	; (800bf50 <mem_malloc+0x1cc>)
 800bed0:	6812      	ldr	r2, [r2, #0]
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d906      	bls.n	800bee4 <mem_malloc+0x160>
 800bed6:	4b1f      	ldr	r3, [pc, #124]	; (800bf54 <mem_malloc+0x1d0>)
 800bed8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bedc:	4920      	ldr	r1, [pc, #128]	; (800bf60 <mem_malloc+0x1dc>)
 800bede:	481f      	ldr	r0, [pc, #124]	; (800bf5c <mem_malloc+0x1d8>)
 800bee0:	f008 fa74 	bl	80143cc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	f003 0303 	and.w	r3, r3, #3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d006      	beq.n	800befc <mem_malloc+0x178>
 800beee:	4b19      	ldr	r3, [pc, #100]	; (800bf54 <mem_malloc+0x1d0>)
 800bef0:	f240 22d6 	movw	r2, #726	; 0x2d6
 800bef4:	491b      	ldr	r1, [pc, #108]	; (800bf64 <mem_malloc+0x1e0>)
 800bef6:	4819      	ldr	r0, [pc, #100]	; (800bf5c <mem_malloc+0x1d8>)
 800bef8:	f008 fa68 	bl	80143cc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d006      	beq.n	800bf14 <mem_malloc+0x190>
 800bf06:	4b13      	ldr	r3, [pc, #76]	; (800bf54 <mem_malloc+0x1d0>)
 800bf08:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800bf0c:	4916      	ldr	r1, [pc, #88]	; (800bf68 <mem_malloc+0x1e4>)
 800bf0e:	4813      	ldr	r0, [pc, #76]	; (800bf5c <mem_malloc+0x1d8>)
 800bf10:	f008 fa5c 	bl	80143cc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	3308      	adds	r3, #8
 800bf18:	e010      	b.n	800bf3c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800bf1a:	4b0c      	ldr	r3, [pc, #48]	; (800bf4c <mem_malloc+0x1c8>)
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	8bfb      	ldrh	r3, [r7, #30]
 800bf20:	4413      	add	r3, r2
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bf26:	8bfa      	ldrh	r2, [r7, #30]
 800bf28:	88fb      	ldrh	r3, [r7, #6]
 800bf2a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	f4ff af4e 	bcc.w	800bdd0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf34:	4803      	ldr	r0, [pc, #12]	; (800bf44 <mem_malloc+0x1c0>)
 800bf36:	f007 fa96 	bl	8013466 <sys_mutex_unlock>
  return NULL;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3720      	adds	r7, #32
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	20003f08 	.word	0x20003f08
 800bf48:	20003f04 	.word	0x20003f04
 800bf4c:	20003efc 	.word	0x20003efc
 800bf50:	20003f00 	.word	0x20003f00
 800bf54:	0801676c 	.word	0x0801676c
 800bf58:	080168e4 	.word	0x080168e4
 800bf5c:	080167b4 	.word	0x080167b4
 800bf60:	08016900 	.word	0x08016900
 800bf64:	08016930 	.word	0x08016930
 800bf68:	08016960 	.word	0x08016960

0800bf6c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	3303      	adds	r3, #3
 800bf82:	f023 0303 	bic.w	r3, r3, #3
 800bf86:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e011      	b.n	800bfb2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	885b      	ldrh	r3, [r3, #2]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	dce7      	bgt.n	800bf8e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bfbe:	bf00      	nop
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
	...

0800bfcc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	80fb      	strh	r3, [r7, #6]
 800bfd6:	e009      	b.n	800bfec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfd8:	88fb      	ldrh	r3, [r7, #6]
 800bfda:	4a08      	ldr	r2, [pc, #32]	; (800bffc <memp_init+0x30>)
 800bfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7ff ffc3 	bl	800bf6c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfe6:	88fb      	ldrh	r3, [r7, #6]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	80fb      	strh	r3, [r7, #6]
 800bfec:	88fb      	ldrh	r3, [r7, #6]
 800bfee:	2b0c      	cmp	r3, #12
 800bff0:	d9f2      	bls.n	800bfd8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bff2:	bf00      	nop
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	08017f64 	.word	0x08017f64

0800c000 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c008:	f007 fa58 	bl	80134bc <sys_arch_protect>
 800c00c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d015      	beq.n	800c048 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	6812      	ldr	r2, [r2, #0]
 800c024:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d006      	beq.n	800c03e <do_memp_malloc_pool+0x3e>
 800c030:	4b09      	ldr	r3, [pc, #36]	; (800c058 <do_memp_malloc_pool+0x58>)
 800c032:	f240 1249 	movw	r2, #329	; 0x149
 800c036:	4909      	ldr	r1, [pc, #36]	; (800c05c <do_memp_malloc_pool+0x5c>)
 800c038:	4809      	ldr	r0, [pc, #36]	; (800c060 <do_memp_malloc_pool+0x60>)
 800c03a:	f008 f9c7 	bl	80143cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f007 fa4a 	bl	80134d8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	e003      	b.n	800c050 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f007 fa45 	bl	80134d8 <sys_arch_unprotect>
  return NULL;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	08016984 	.word	0x08016984
 800c05c:	080169b4 	.word	0x080169b4
 800c060:	080169d8 	.word	0x080169d8

0800c064 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c06e:	79fb      	ldrb	r3, [r7, #7]
 800c070:	2b0c      	cmp	r3, #12
 800c072:	d908      	bls.n	800c086 <memp_malloc+0x22>
 800c074:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <memp_malloc+0x3c>)
 800c076:	f240 1287 	movw	r2, #391	; 0x187
 800c07a:	490a      	ldr	r1, [pc, #40]	; (800c0a4 <memp_malloc+0x40>)
 800c07c:	480a      	ldr	r0, [pc, #40]	; (800c0a8 <memp_malloc+0x44>)
 800c07e:	f008 f9a5 	bl	80143cc <iprintf>
 800c082:	2300      	movs	r3, #0
 800c084:	e008      	b.n	800c098 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	4a08      	ldr	r2, [pc, #32]	; (800c0ac <memp_malloc+0x48>)
 800c08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c08e:	4618      	mov	r0, r3
 800c090:	f7ff ffb6 	bl	800c000 <do_memp_malloc_pool>
 800c094:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c096:	68fb      	ldr	r3, [r7, #12]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	08016984 	.word	0x08016984
 800c0a4:	08016a14 	.word	0x08016a14
 800c0a8:	080169d8 	.word	0x080169d8
 800c0ac:	08017f64 	.word	0x08017f64

0800c0b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d006      	beq.n	800c0d2 <do_memp_free_pool+0x22>
 800c0c4:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <do_memp_free_pool+0x4c>)
 800c0c6:	f240 129d 	movw	r2, #413	; 0x19d
 800c0ca:	490d      	ldr	r1, [pc, #52]	; (800c100 <do_memp_free_pool+0x50>)
 800c0cc:	480d      	ldr	r0, [pc, #52]	; (800c104 <do_memp_free_pool+0x54>)
 800c0ce:	f008 f97d 	bl	80143cc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c0d6:	f007 f9f1 	bl	80134bc <sys_arch_protect>
 800c0da:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c0ee:	68b8      	ldr	r0, [r7, #8]
 800c0f0:	f007 f9f2 	bl	80134d8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c0f4:	bf00      	nop
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	08016984 	.word	0x08016984
 800c100:	08016a34 	.word	0x08016a34
 800c104:	080169d8 	.word	0x080169d8

0800c108 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	6039      	str	r1, [r7, #0]
 800c112:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	2b0c      	cmp	r3, #12
 800c118:	d907      	bls.n	800c12a <memp_free+0x22>
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <memp_free+0x44>)
 800c11c:	f240 12db 	movw	r2, #475	; 0x1db
 800c120:	490b      	ldr	r1, [pc, #44]	; (800c150 <memp_free+0x48>)
 800c122:	480c      	ldr	r0, [pc, #48]	; (800c154 <memp_free+0x4c>)
 800c124:	f008 f952 	bl	80143cc <iprintf>
 800c128:	e00c      	b.n	800c144 <memp_free+0x3c>

  if (mem == NULL) {
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d008      	beq.n	800c142 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c130:	79fb      	ldrb	r3, [r7, #7]
 800c132:	4a09      	ldr	r2, [pc, #36]	; (800c158 <memp_free+0x50>)
 800c134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff ffb8 	bl	800c0b0 <do_memp_free_pool>
 800c140:	e000      	b.n	800c144 <memp_free+0x3c>
    return;
 800c142:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	08016984 	.word	0x08016984
 800c150:	08016a54 	.word	0x08016a54
 800c154:	080169d8 	.word	0x080169d8
 800c158:	08017f64 	.word	0x08017f64

0800c15c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c15c:	b480      	push	{r7}
 800c15e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c160:	bf00      	nop
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
	...

0800c16c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d105      	bne.n	800c18c <netif_add+0x20>
 800c180:	4b23      	ldr	r3, [pc, #140]	; (800c210 <netif_add+0xa4>)
 800c182:	22fb      	movs	r2, #251	; 0xfb
 800c184:	4923      	ldr	r1, [pc, #140]	; (800c214 <netif_add+0xa8>)
 800c186:	4824      	ldr	r0, [pc, #144]	; (800c218 <netif_add+0xac>)
 800c188:	f008 f920 	bl	80143cc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3320      	adds	r3, #32
 800c1aa:	2204      	movs	r2, #4
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f008 f904 	bl	80143bc <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2203      	movs	r2, #3
 800c1b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c1c2:	4b16      	ldr	r3, [pc, #88]	; (800c21c <netif_add+0xb0>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	b2d1      	uxtb	r1, r2
 800c1ca:	4a14      	ldr	r2, [pc, #80]	; (800c21c <netif_add+0xb0>)
 800c1cc:	7011      	strb	r1, [r2, #0]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6a3a      	ldr	r2, [r7, #32]
 800c1d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f000 f81f 	bl	800c224 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	4798      	blx	r3
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <netif_add+0x8a>
    return NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e007      	b.n	800c206 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c1f6:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <netif_add+0xb4>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c1fe:	4a08      	ldr	r2, [pc, #32]	; (800c220 <netif_add+0xb4>)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c204:	68fb      	ldr	r3, [r7, #12]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	08016a70 	.word	0x08016a70
 800c214:	08016aa4 	.word	0x08016aa4
 800c218:	08016abc 	.word	0x08016abc
 800c21c:	20003f40 	.word	0x20003f40
 800c220:	20007728 	.word	0x20007728

0800c224 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <netif_set_addr+0x1c>
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10c      	bne.n	800c25a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 f81a 	bl	800c27c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f000 f862 	bl	800c314 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 f84a 	bl	800c2ec <netif_set_gw>
 800c258:	e00b      	b.n	800c272 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c25a:	6879      	ldr	r1, [r7, #4]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f859 	bl	800c314 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 f841 	bl	800c2ec <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f805 	bl	800c27c <netif_set_ipaddr>
  }
}
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <netif_set_ipaddr+0x18>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	e002      	b.n	800c29a <netif_set_ipaddr+0x1e>
 800c294:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <netif_set_ipaddr+0x6c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d01c      	beq.n	800c2e0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	f107 020c 	add.w	r2, r7, #12
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f002 fb27 	bl	800e904 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	f107 020c 	add.w	r2, r7, #12
 800c2be:	4611      	mov	r1, r2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f006 fe27 	bl	8012f14 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <netif_set_ipaddr+0x56>
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	e000      	b.n	800c2d4 <netif_set_ipaddr+0x58>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c2d8:	2101      	movs	r1, #1
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f861 	bl	800c3a2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c2e0:	bf00      	nop
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	08017ec0 	.word	0x08017ec0

0800c2ec <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <netif_set_gw+0x16>
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	e000      	b.n	800c304 <netif_set_gw+0x18>
 800c302:	2300      	movs	r3, #0
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <netif_set_netmask+0x16>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	e000      	b.n	800c32c <netif_set_netmask+0x18>
 800c32a:	2300      	movs	r3, #0
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c344:	4a04      	ldr	r2, [pc, #16]	; (800c358 <netif_set_default+0x1c>)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	2000772c 	.word	0x2000772c

0800c35c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d113      	bne.n	800c39a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c378:	f043 0301 	orr.w	r3, r3, #1
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c38a:	f003 0304 	and.w	r3, r3, #4
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800c392:	2103      	movs	r1, #3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f804 	bl	800c3a2 <netif_issue_reports>
    }
  }
}
 800c39a:	bf00      	nop
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b082      	sub	sp, #8
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c3ae:	78fb      	ldrb	r3, [r7, #3]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d011      	beq.n	800c3dc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00c      	beq.n	800c3dc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3c8:	f003 0308 	and.w	r3, r3, #8
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7fe f856 	bl	800a488 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d012      	beq.n	800c420 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c400:	f023 0301 	bic.w	r3, r3, #1
 800c404:	b2da      	uxtb	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c412:	f003 0308 	and.w	r3, r3, #8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d002      	beq.n	800c420 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fd fbf6 	bl	8009c0c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c42e:	f007 f845 	bl	80134bc <sys_arch_protect>
 800c432:	6038      	str	r0, [r7, #0]
 800c434:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <pbuf_free_ooseq+0x4c>)
 800c436:	2200      	movs	r2, #0
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	6838      	ldr	r0, [r7, #0]
 800c43c:	f007 f84c 	bl	80134d8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c440:	4b0d      	ldr	r3, [pc, #52]	; (800c478 <pbuf_free_ooseq+0x50>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	607b      	str	r3, [r7, #4]
 800c446:	e00f      	b.n	800c468 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d008      	beq.n	800c462 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c454:	4618      	mov	r0, r3
 800c456:	f001 fed0 	bl	800e1fa <tcp_segs_free>
      pcb->ooseq = NULL;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800c460:	e005      	b.n	800c46e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	607b      	str	r3, [r7, #4]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1ec      	bne.n	800c448 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20007730 	.word	0x20007730
 800c478:	20007738 	.word	0x20007738

0800c47c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c484:	f7ff ffd0 	bl	800c428 <pbuf_free_ooseq>
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c496:	f007 f811 	bl	80134bc <sys_arch_protect>
 800c49a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c49c:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <pbuf_pool_is_empty+0x50>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c4a2:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <pbuf_pool_is_empty+0x50>)
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f007 f815 	bl	80134d8 <sys_arch_unprotect>

  if (!queued) {
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d110      	bne.n	800c4d6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	480a      	ldr	r0, [pc, #40]	; (800c4e4 <pbuf_pool_is_empty+0x54>)
 800c4ba:	f7fb f939 	bl	8007730 <tcpip_callback_with_block>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d008      	beq.n	800c4d6 <pbuf_pool_is_empty+0x46>
 800c4c4:	f006 fffa 	bl	80134bc <sys_arch_protect>
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <pbuf_pool_is_empty+0x50>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f007 f801 	bl	80134d8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20007730 	.word	0x20007730
 800c4e4:	0800c47d 	.word	0x0800c47d

0800c4e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b088      	sub	sp, #32
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	71fb      	strb	r3, [r7, #7]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	80bb      	strh	r3, [r7, #4]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	d81c      	bhi.n	800c53a <pbuf_alloc+0x52>
 800c500:	a201      	add	r2, pc, #4	; (adr r2, 800c508 <pbuf_alloc+0x20>)
 800c502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c506:	bf00      	nop
 800c508:	0800c51d 	.word	0x0800c51d
 800c50c:	0800c523 	.word	0x0800c523
 800c510:	0800c529 	.word	0x0800c529
 800c514:	0800c52f 	.word	0x0800c52f
 800c518:	0800c535 	.word	0x0800c535
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c51c:	2336      	movs	r3, #54	; 0x36
 800c51e:	82fb      	strh	r3, [r7, #22]
    break;
 800c520:	e014      	b.n	800c54c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c522:	2322      	movs	r3, #34	; 0x22
 800c524:	82fb      	strh	r3, [r7, #22]
    break;
 800c526:	e011      	b.n	800c54c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c528:	230e      	movs	r3, #14
 800c52a:	82fb      	strh	r3, [r7, #22]
    break;
 800c52c:	e00e      	b.n	800c54c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c52e:	2300      	movs	r3, #0
 800c530:	82fb      	strh	r3, [r7, #22]
    break;
 800c532:	e00b      	b.n	800c54c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	82fb      	strh	r3, [r7, #22]
    break;
 800c538:	e008      	b.n	800c54c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800c53a:	4ba5      	ldr	r3, [pc, #660]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c53c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800c540:	49a4      	ldr	r1, [pc, #656]	; (800c7d4 <pbuf_alloc+0x2ec>)
 800c542:	48a5      	ldr	r0, [pc, #660]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c544:	f007 ff42 	bl	80143cc <iprintf>
    return NULL;
 800c548:	2300      	movs	r3, #0
 800c54a:	e15d      	b.n	800c808 <pbuf_alloc+0x320>
  }

  switch (type) {
 800c54c:	79bb      	ldrb	r3, [r7, #6]
 800c54e:	2b03      	cmp	r3, #3
 800c550:	f200 8134 	bhi.w	800c7bc <pbuf_alloc+0x2d4>
 800c554:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <pbuf_alloc+0x74>)
 800c556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55a:	bf00      	nop
 800c55c:	0800c6fd 	.word	0x0800c6fd
 800c560:	0800c789 	.word	0x0800c789
 800c564:	0800c789 	.word	0x0800c789
 800c568:	0800c56d 	.word	0x0800c56d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c56c:	200c      	movs	r0, #12
 800c56e:	f7ff fd79 	bl	800c064 <memp_malloc>
 800c572:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d103      	bne.n	800c582 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800c57a:	f7ff ff89 	bl	800c490 <pbuf_pool_is_empty>
      return NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	e142      	b.n	800c808 <pbuf_alloc+0x320>
    }
    p->type = type;
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	79ba      	ldrb	r2, [r7, #6]
 800c586:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800c58e:	8afb      	ldrh	r3, [r7, #22]
 800c590:	3310      	adds	r3, #16
 800c592:	69fa      	ldr	r2, [r7, #28]
 800c594:	4413      	add	r3, r2
 800c596:	3303      	adds	r3, #3
 800c598:	f023 0303 	bic.w	r3, r3, #3
 800c59c:	461a      	mov	r2, r3
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f003 0303 	and.w	r3, r3, #3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d006      	beq.n	800c5bc <pbuf_alloc+0xd4>
 800c5ae:	4b88      	ldr	r3, [pc, #544]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c5b0:	f240 1229 	movw	r2, #297	; 0x129
 800c5b4:	4989      	ldr	r1, [pc, #548]	; (800c7dc <pbuf_alloc+0x2f4>)
 800c5b6:	4888      	ldr	r0, [pc, #544]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c5b8:	f007 ff08 	bl	80143cc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	88ba      	ldrh	r2, [r7, #4]
 800c5c0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800c5c2:	8afb      	ldrh	r3, [r7, #22]
 800c5c4:	3303      	adds	r3, #3
 800c5c6:	f023 0303 	bic.w	r3, r3, #3
 800c5ca:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800c5ce:	88bb      	ldrh	r3, [r7, #4]
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	bf28      	it	cs
 800c5d4:	4613      	movcs	r3, r2
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	69fa      	ldr	r2, [r7, #28]
 800c5e2:	8952      	ldrh	r2, [r2, #10]
 800c5e4:	441a      	add	r2, r3
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d906      	bls.n	800c5fe <pbuf_alloc+0x116>
 800c5f0:	4b77      	ldr	r3, [pc, #476]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c5f2:	f44f 7298 	mov.w	r2, #304	; 0x130
 800c5f6:	497a      	ldr	r1, [pc, #488]	; (800c7e0 <pbuf_alloc+0x2f8>)
 800c5f8:	4877      	ldr	r0, [pc, #476]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c5fa:	f007 fee7 	bl	80143cc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c5fe:	8afb      	ldrh	r3, [r7, #22]
 800c600:	3303      	adds	r3, #3
 800c602:	f023 0303 	bic.w	r3, r3, #3
 800c606:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c60a:	d106      	bne.n	800c61a <pbuf_alloc+0x132>
 800c60c:	4b70      	ldr	r3, [pc, #448]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c60e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c612:	4974      	ldr	r1, [pc, #464]	; (800c7e4 <pbuf_alloc+0x2fc>)
 800c614:	4870      	ldr	r0, [pc, #448]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c616:	f007 fed9 	bl	80143cc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	2201      	movs	r2, #1
 800c61e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800c624:	88bb      	ldrh	r3, [r7, #4]
 800c626:	69fa      	ldr	r2, [r7, #28]
 800c628:	8952      	ldrh	r2, [r2, #10]
 800c62a:	1a9b      	subs	r3, r3, r2
 800c62c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800c62e:	e061      	b.n	800c6f4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c630:	200c      	movs	r0, #12
 800c632:	f7ff fd17 	bl	800c064 <memp_malloc>
 800c636:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800c63e:	f7ff ff27 	bl	800c490 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800c642:	69f8      	ldr	r0, [r7, #28]
 800c644:	f000 fac2 	bl	800cbcc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800c648:	2300      	movs	r3, #0
 800c64a:	e0dd      	b.n	800c808 <pbuf_alloc+0x320>
      }
      q->type = type;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	79ba      	ldrb	r2, [r7, #6]
 800c650:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c66a:	4293      	cmp	r3, r2
 800c66c:	dd06      	ble.n	800c67c <pbuf_alloc+0x194>
 800c66e:	4b58      	ldr	r3, [pc, #352]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c670:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c674:	495c      	ldr	r1, [pc, #368]	; (800c7e8 <pbuf_alloc+0x300>)
 800c676:	4858      	ldr	r0, [pc, #352]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c678:	f007 fea8 	bl	80143cc <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	b29a      	uxth	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	b29b      	uxth	r3, r3
 800c688:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c68c:	bf28      	it	cs
 800c68e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800c692:	b29a      	uxth	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f103 0210 	add.w	r2, r3, #16
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	f003 0303 	and.w	r3, r3, #3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d006      	beq.n	800c6bc <pbuf_alloc+0x1d4>
 800c6ae:	4b48      	ldr	r3, [pc, #288]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c6b0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c6b4:	494d      	ldr	r1, [pc, #308]	; (800c7ec <pbuf_alloc+0x304>)
 800c6b6:	4848      	ldr	r0, [pc, #288]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c6b8:	f007 fe88 	bl	80143cc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	8952      	ldrh	r2, [r2, #10]
 800c6c4:	441a      	add	r2, r3
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d906      	bls.n	800c6de <pbuf_alloc+0x1f6>
 800c6d0:	4b3f      	ldr	r3, [pc, #252]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c6d2:	f240 1255 	movw	r2, #341	; 0x155
 800c6d6:	4942      	ldr	r1, [pc, #264]	; (800c7e0 <pbuf_alloc+0x2f8>)
 800c6d8:	483f      	ldr	r0, [pc, #252]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c6da:	f007 fe77 	bl	80143cc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	895b      	ldrh	r3, [r3, #10]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	1a9b      	subs	r3, r3, r2
 800c6ee:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dc9a      	bgt.n	800c630 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c6fa:	e07e      	b.n	800c7fa <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c6fc:	8afb      	ldrh	r3, [r7, #22]
 800c6fe:	3313      	adds	r3, #19
 800c700:	b29b      	uxth	r3, r3
 800c702:	f023 0303 	bic.w	r3, r3, #3
 800c706:	b29a      	uxth	r2, r3
 800c708:	88bb      	ldrh	r3, [r7, #4]
 800c70a:	3303      	adds	r3, #3
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	f023 0303 	bic.w	r3, r3, #3
 800c712:	b29b      	uxth	r3, r3
 800c714:	4413      	add	r3, r2
 800c716:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c718:	897a      	ldrh	r2, [r7, #10]
 800c71a:	88bb      	ldrh	r3, [r7, #4]
 800c71c:	3303      	adds	r3, #3
 800c71e:	f023 0303 	bic.w	r3, r3, #3
 800c722:	429a      	cmp	r2, r3
 800c724:	d201      	bcs.n	800c72a <pbuf_alloc+0x242>
        return NULL;
 800c726:	2300      	movs	r3, #0
 800c728:	e06e      	b.n	800c808 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c72a:	897b      	ldrh	r3, [r7, #10]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff fb29 	bl	800bd84 <mem_malloc>
 800c732:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d101      	bne.n	800c73e <pbuf_alloc+0x256>
      return NULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e064      	b.n	800c808 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c73e:	8afb      	ldrh	r3, [r7, #22]
 800c740:	3310      	adds	r3, #16
 800c742:	69fa      	ldr	r2, [r7, #28]
 800c744:	4413      	add	r3, r2
 800c746:	3303      	adds	r3, #3
 800c748:	f023 0303 	bic.w	r3, r3, #3
 800c74c:	461a      	mov	r2, r3
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	88ba      	ldrh	r2, [r7, #4]
 800c756:	811a      	strh	r2, [r3, #8]
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	891a      	ldrh	r2, [r3, #8]
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	79ba      	ldrb	r2, [r7, #6]
 800c76a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	f003 0303 	and.w	r3, r3, #3
 800c774:	2b00      	cmp	r3, #0
 800c776:	d03f      	beq.n	800c7f8 <pbuf_alloc+0x310>
 800c778:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c77a:	f240 1277 	movw	r2, #375	; 0x177
 800c77e:	491c      	ldr	r1, [pc, #112]	; (800c7f0 <pbuf_alloc+0x308>)
 800c780:	4815      	ldr	r0, [pc, #84]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c782:	f007 fe23 	bl	80143cc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800c786:	e037      	b.n	800c7f8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c788:	200b      	movs	r0, #11
 800c78a:	f7ff fc6b 	bl	800c064 <memp_malloc>
 800c78e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800c796:	2300      	movs	r3, #0
 800c798:	e036      	b.n	800c808 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	2200      	movs	r2, #0
 800c79e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	88ba      	ldrh	r2, [r7, #4]
 800c7a4:	811a      	strh	r2, [r3, #8]
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	891a      	ldrh	r2, [r3, #8]
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	79ba      	ldrb	r2, [r7, #6]
 800c7b8:	731a      	strb	r2, [r3, #12]
    break;
 800c7ba:	e01e      	b.n	800c7fa <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c7bc:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <pbuf_alloc+0x2e8>)
 800c7be:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800c7c2:	490c      	ldr	r1, [pc, #48]	; (800c7f4 <pbuf_alloc+0x30c>)
 800c7c4:	4804      	ldr	r0, [pc, #16]	; (800c7d8 <pbuf_alloc+0x2f0>)
 800c7c6:	f007 fe01 	bl	80143cc <iprintf>
    return NULL;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e01c      	b.n	800c808 <pbuf_alloc+0x320>
 800c7ce:	bf00      	nop
 800c7d0:	08016ae4 	.word	0x08016ae4
 800c7d4:	08016b14 	.word	0x08016b14
 800c7d8:	08016b30 	.word	0x08016b30
 800c7dc:	08016b58 	.word	0x08016b58
 800c7e0:	08016b88 	.word	0x08016b88
 800c7e4:	08016bbc 	.word	0x08016bbc
 800c7e8:	08016bf0 	.word	0x08016bf0
 800c7ec:	08016c04 	.word	0x08016c04
 800c7f0:	08016c34 	.word	0x08016c34
 800c7f4:	08016c60 	.word	0x08016c60
    break;
 800c7f8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2200      	movs	r2, #0
 800c804:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c806:	69fb      	ldr	r3, [r7, #28]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3720      	adds	r7, #32
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	603b      	str	r3, [r7, #0]
 800c818:	4603      	mov	r3, r0
 800c81a:	71fb      	strb	r3, [r7, #7]
 800c81c:	460b      	mov	r3, r1
 800c81e:	80bb      	strh	r3, [r7, #4]
 800c820:	4613      	mov	r3, r2
 800c822:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	2b04      	cmp	r3, #4
 800c828:	d81b      	bhi.n	800c862 <pbuf_alloced_custom+0x52>
 800c82a:	a201      	add	r2, pc, #4	; (adr r2, 800c830 <pbuf_alloced_custom+0x20>)
 800c82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c830:	0800c845 	.word	0x0800c845
 800c834:	0800c84b 	.word	0x0800c84b
 800c838:	0800c851 	.word	0x0800c851
 800c83c:	0800c857 	.word	0x0800c857
 800c840:	0800c85d 	.word	0x0800c85d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c844:	2336      	movs	r3, #54	; 0x36
 800c846:	81fb      	strh	r3, [r7, #14]
    break;
 800c848:	e014      	b.n	800c874 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c84a:	2322      	movs	r3, #34	; 0x22
 800c84c:	81fb      	strh	r3, [r7, #14]
    break;
 800c84e:	e011      	b.n	800c874 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c850:	230e      	movs	r3, #14
 800c852:	81fb      	strh	r3, [r7, #14]
    break;
 800c854:	e00e      	b.n	800c874 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c856:	2300      	movs	r3, #0
 800c858:	81fb      	strh	r3, [r7, #14]
    break;
 800c85a:	e00b      	b.n	800c874 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	81fb      	strh	r3, [r7, #14]
    break;
 800c860:	e008      	b.n	800c874 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c862:	4b1d      	ldr	r3, [pc, #116]	; (800c8d8 <pbuf_alloced_custom+0xc8>)
 800c864:	f240 12c5 	movw	r2, #453	; 0x1c5
 800c868:	491c      	ldr	r1, [pc, #112]	; (800c8dc <pbuf_alloced_custom+0xcc>)
 800c86a:	481d      	ldr	r0, [pc, #116]	; (800c8e0 <pbuf_alloced_custom+0xd0>)
 800c86c:	f007 fdae 	bl	80143cc <iprintf>
    return NULL;
 800c870:	2300      	movs	r3, #0
 800c872:	e02d      	b.n	800c8d0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c874:	89fb      	ldrh	r3, [r7, #14]
 800c876:	3303      	adds	r3, #3
 800c878:	f023 0203 	bic.w	r2, r3, #3
 800c87c:	88bb      	ldrh	r3, [r7, #4]
 800c87e:	441a      	add	r2, r3
 800c880:	8bbb      	ldrh	r3, [r7, #28]
 800c882:	429a      	cmp	r2, r3
 800c884:	d901      	bls.n	800c88a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c886:	2300      	movs	r3, #0
 800c888:	e022      	b.n	800c8d0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d008      	beq.n	800c8a8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c896:	89fb      	ldrh	r3, [r7, #14]
 800c898:	3303      	adds	r3, #3
 800c89a:	f023 0303 	bic.w	r3, r3, #3
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	441a      	add	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	605a      	str	r2, [r3, #4]
 800c8a6:	e002      	b.n	800c8ae <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	88ba      	ldrh	r2, [r7, #4]
 800c8b8:	811a      	strh	r2, [r3, #8]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	891a      	ldrh	r2, [r3, #8]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	79ba      	ldrb	r2, [r7, #6]
 800c8c6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800c8ce:	683b      	ldr	r3, [r7, #0]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	08016ae4 	.word	0x08016ae4
 800c8dc:	08016c7c 	.word	0x08016c7c
 800c8e0:	08016b30 	.word	0x08016b30

0800c8e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d106      	bne.n	800c904 <pbuf_realloc+0x20>
 800c8f6:	4b4b      	ldr	r3, [pc, #300]	; (800ca24 <pbuf_realloc+0x140>)
 800c8f8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c8fc:	494a      	ldr	r1, [pc, #296]	; (800ca28 <pbuf_realloc+0x144>)
 800c8fe:	484b      	ldr	r0, [pc, #300]	; (800ca2c <pbuf_realloc+0x148>)
 800c900:	f007 fd64 	bl	80143cc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7b1b      	ldrb	r3, [r3, #12]
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d012      	beq.n	800c932 <pbuf_realloc+0x4e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	7b1b      	ldrb	r3, [r3, #12]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d00e      	beq.n	800c932 <pbuf_realloc+0x4e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7b1b      	ldrb	r3, [r3, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00a      	beq.n	800c932 <pbuf_realloc+0x4e>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7b1b      	ldrb	r3, [r3, #12]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d006      	beq.n	800c932 <pbuf_realloc+0x4e>
 800c924:	4b3f      	ldr	r3, [pc, #252]	; (800ca24 <pbuf_realloc+0x140>)
 800c926:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c92a:	4941      	ldr	r1, [pc, #260]	; (800ca30 <pbuf_realloc+0x14c>)
 800c92c:	483f      	ldr	r0, [pc, #252]	; (800ca2c <pbuf_realloc+0x148>)
 800c92e:	f007 fd4d 	bl	80143cc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	891b      	ldrh	r3, [r3, #8]
 800c936:	887a      	ldrh	r2, [r7, #2]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d26f      	bcs.n	800ca1c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c93c:	887b      	ldrh	r3, [r7, #2]
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	8912      	ldrh	r2, [r2, #8]
 800c942:	1a9b      	subs	r3, r3, r2
 800c944:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c946:	887b      	ldrh	r3, [r7, #2]
 800c948:	827b      	strh	r3, [r7, #18]
  q = p;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c94e:	e025      	b.n	800c99c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	895b      	ldrh	r3, [r3, #10]
 800c954:	8a7a      	ldrh	r2, [r7, #18]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c960:	4293      	cmp	r3, r2
 800c962:	dd06      	ble.n	800c972 <pbuf_realloc+0x8e>
 800c964:	4b2f      	ldr	r3, [pc, #188]	; (800ca24 <pbuf_realloc+0x140>)
 800c966:	f240 220b 	movw	r2, #523	; 0x20b
 800c96a:	4932      	ldr	r1, [pc, #200]	; (800ca34 <pbuf_realloc+0x150>)
 800c96c:	482f      	ldr	r0, [pc, #188]	; (800ca2c <pbuf_realloc+0x148>)
 800c96e:	f007 fd2d 	bl	80143cc <iprintf>
    q->tot_len += (u16_t)grow;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	891a      	ldrh	r2, [r3, #8]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	b29b      	uxth	r3, r3
 800c97a:	4413      	add	r3, r2
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <pbuf_realloc+0xb8>
 800c98e:	4b25      	ldr	r3, [pc, #148]	; (800ca24 <pbuf_realloc+0x140>)
 800c990:	f240 220f 	movw	r2, #527	; 0x20f
 800c994:	4928      	ldr	r1, [pc, #160]	; (800ca38 <pbuf_realloc+0x154>)
 800c996:	4825      	ldr	r0, [pc, #148]	; (800ca2c <pbuf_realloc+0x148>)
 800c998:	f007 fd18 	bl	80143cc <iprintf>
  while (rem_len > q->len) {
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	895b      	ldrh	r3, [r3, #10]
 800c9a0:	8a7a      	ldrh	r2, [r7, #18]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d8d4      	bhi.n	800c950 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	7b1b      	ldrb	r3, [r3, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d122      	bne.n	800c9f4 <pbuf_realloc+0x110>
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	895b      	ldrh	r3, [r3, #10]
 800c9b2:	8a7a      	ldrh	r2, [r7, #18]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d01d      	beq.n	800c9f4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	7b5b      	ldrb	r3, [r3, #13]
 800c9bc:	f003 0302 	and.w	r3, r3, #2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d117      	bne.n	800c9f4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	8a7b      	ldrh	r3, [r7, #18]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6978      	ldr	r0, [r7, #20]
 800c9da:	f7ff f8e9 	bl	800bbb0 <mem_trim>
 800c9de:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d106      	bne.n	800c9f4 <pbuf_realloc+0x110>
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <pbuf_realloc+0x140>)
 800c9e8:	f240 221d 	movw	r2, #541	; 0x21d
 800c9ec:	4913      	ldr	r1, [pc, #76]	; (800ca3c <pbuf_realloc+0x158>)
 800c9ee:	480f      	ldr	r0, [pc, #60]	; (800ca2c <pbuf_realloc+0x148>)
 800c9f0:	f007 fcec 	bl	80143cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	8a7a      	ldrh	r2, [r7, #18]
 800c9f8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	895a      	ldrh	r2, [r3, #10]
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d004      	beq.n	800ca14 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 f8dc 	bl	800cbcc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2200      	movs	r2, #0
 800ca18:	601a      	str	r2, [r3, #0]
 800ca1a:	e000      	b.n	800ca1e <pbuf_realloc+0x13a>
    return;
 800ca1c:	bf00      	nop

}
 800ca1e:	3718      	adds	r7, #24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	08016ae4 	.word	0x08016ae4
 800ca28:	08016ca0 	.word	0x08016ca0
 800ca2c:	08016b30 	.word	0x08016b30
 800ca30:	08016cb8 	.word	0x08016cb8
 800ca34:	08016cd4 	.word	0x08016cd4
 800ca38:	08016ce8 	.word	0x08016ce8
 800ca3c:	08016d00 	.word	0x08016d00

0800ca40 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	807b      	strh	r3, [r7, #2]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <pbuf_header_impl+0x24>
 800ca56:	4b46      	ldr	r3, [pc, #280]	; (800cb70 <pbuf_header_impl+0x130>)
 800ca58:	f240 223f 	movw	r2, #575	; 0x23f
 800ca5c:	4945      	ldr	r1, [pc, #276]	; (800cb74 <pbuf_header_impl+0x134>)
 800ca5e:	4846      	ldr	r0, [pc, #280]	; (800cb78 <pbuf_header_impl+0x138>)
 800ca60:	f007 fcb4 	bl	80143cc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800ca64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <pbuf_header_impl+0x32>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <pbuf_header_impl+0x36>
    return 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	e078      	b.n	800cb68 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800ca76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	da10      	bge.n	800caa0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800ca7e:	887b      	ldrh	r3, [r7, #2]
 800ca80:	425b      	negs	r3, r3
 800ca82:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	895b      	ldrh	r3, [r3, #10]
 800ca88:	89fa      	ldrh	r2, [r7, #14]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d90a      	bls.n	800caa4 <pbuf_header_impl+0x64>
 800ca8e:	4b38      	ldr	r3, [pc, #224]	; (800cb70 <pbuf_header_impl+0x130>)
 800ca90:	f240 2247 	movw	r2, #583	; 0x247
 800ca94:	4939      	ldr	r1, [pc, #228]	; (800cb7c <pbuf_header_impl+0x13c>)
 800ca96:	4838      	ldr	r0, [pc, #224]	; (800cb78 <pbuf_header_impl+0x138>)
 800ca98:	f007 fc98 	bl	80143cc <iprintf>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e063      	b.n	800cb68 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800caa0:	887b      	ldrh	r3, [r7, #2]
 800caa2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7b1b      	ldrb	r3, [r3, #12]
 800caa8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800cab0:	89bb      	ldrh	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <pbuf_header_impl+0x7c>
 800cab6:	89bb      	ldrh	r3, [r7, #12]
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d112      	bne.n	800cae2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cac4:	425b      	negs	r3, r3
 800cac6:	441a      	add	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3310      	adds	r3, #16
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d238      	bcs.n	800cb4a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800cade:	2301      	movs	r3, #1
 800cae0:	e042      	b.n	800cb68 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800cae2:	89bb      	ldrh	r3, [r7, #12]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d002      	beq.n	800caee <pbuf_header_impl+0xae>
 800cae8:	89bb      	ldrh	r3, [r7, #12]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d124      	bne.n	800cb38 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800caee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	da0d      	bge.n	800cb12 <pbuf_header_impl+0xd2>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	895b      	ldrh	r3, [r3, #10]
 800cafa:	89fa      	ldrh	r2, [r7, #14]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d808      	bhi.n	800cb12 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb08:	425b      	negs	r3, r3
 800cb0a:	441a      	add	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	605a      	str	r2, [r3, #4]
 800cb10:	e011      	b.n	800cb36 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800cb12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dd0b      	ble.n	800cb32 <pbuf_header_impl+0xf2>
 800cb1a:	787b      	ldrb	r3, [r7, #1]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d008      	beq.n	800cb32 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb28:	425b      	negs	r3, r3
 800cb2a:	441a      	add	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	605a      	str	r2, [r3, #4]
 800cb30:	e001      	b.n	800cb36 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e018      	b.n	800cb68 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800cb36:	e008      	b.n	800cb4a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800cb38:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <pbuf_header_impl+0x130>)
 800cb3a:	f240 2277 	movw	r2, #631	; 0x277
 800cb3e:	4910      	ldr	r1, [pc, #64]	; (800cb80 <pbuf_header_impl+0x140>)
 800cb40:	480d      	ldr	r0, [pc, #52]	; (800cb78 <pbuf_header_impl+0x138>)
 800cb42:	f007 fc43 	bl	80143cc <iprintf>
    return 1;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e00e      	b.n	800cb68 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	895a      	ldrh	r2, [r3, #10]
 800cb4e:	887b      	ldrh	r3, [r7, #2]
 800cb50:	4413      	add	r3, r2
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	891a      	ldrh	r2, [r3, #8]
 800cb5c:	887b      	ldrh	r3, [r7, #2]
 800cb5e:	4413      	add	r3, r2
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	08016ae4 	.word	0x08016ae4
 800cb74:	08016d1c 	.word	0x08016d1c
 800cb78:	08016b30 	.word	0x08016b30
 800cb7c:	08016d28 	.word	0x08016d28
 800cb80:	08016d48 	.word	0x08016d48

0800cb84 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800cb90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb94:	2200      	movs	r2, #0
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff ff51 	bl	800ca40 <pbuf_header_impl>
 800cb9e:	4603      	mov	r3, r0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800cbb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff ff3f 	bl	800ca40 <pbuf_header_impl>
 800cbc2:	4603      	mov	r3, r0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10b      	bne.n	800cbf2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <pbuf_free+0x22>
 800cbe0:	4b41      	ldr	r3, [pc, #260]	; (800cce8 <pbuf_free+0x11c>)
 800cbe2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cbe6:	4941      	ldr	r1, [pc, #260]	; (800ccec <pbuf_free+0x120>)
 800cbe8:	4841      	ldr	r0, [pc, #260]	; (800ccf0 <pbuf_free+0x124>)
 800cbea:	f007 fbef 	bl	80143cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	e076      	b.n	800cce0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	7b1b      	ldrb	r3, [r3, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d012      	beq.n	800cc20 <pbuf_free+0x54>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7b1b      	ldrb	r3, [r3, #12]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d00e      	beq.n	800cc20 <pbuf_free+0x54>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	7b1b      	ldrb	r3, [r3, #12]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d00a      	beq.n	800cc20 <pbuf_free+0x54>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7b1b      	ldrb	r3, [r3, #12]
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d006      	beq.n	800cc20 <pbuf_free+0x54>
 800cc12:	4b35      	ldr	r3, [pc, #212]	; (800cce8 <pbuf_free+0x11c>)
 800cc14:	f240 22de 	movw	r2, #734	; 0x2de
 800cc18:	4936      	ldr	r1, [pc, #216]	; (800ccf4 <pbuf_free+0x128>)
 800cc1a:	4835      	ldr	r0, [pc, #212]	; (800ccf0 <pbuf_free+0x124>)
 800cc1c:	f007 fbd6 	bl	80143cc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cc24:	e058      	b.n	800ccd8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cc26:	f006 fc49 	bl	80134bc <sys_arch_protect>
 800cc2a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	89db      	ldrh	r3, [r3, #14]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <pbuf_free+0x76>
 800cc34:	4b2c      	ldr	r3, [pc, #176]	; (800cce8 <pbuf_free+0x11c>)
 800cc36:	f240 22eb 	movw	r2, #747	; 0x2eb
 800cc3a:	492f      	ldr	r1, [pc, #188]	; (800ccf8 <pbuf_free+0x12c>)
 800cc3c:	482c      	ldr	r0, [pc, #176]	; (800ccf0 <pbuf_free+0x124>)
 800cc3e:	f007 fbc5 	bl	80143cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	89db      	ldrh	r3, [r3, #14]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	81da      	strh	r2, [r3, #14]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	89db      	ldrh	r3, [r3, #14]
 800cc52:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800cc54:	69b8      	ldr	r0, [r7, #24]
 800cc56:	f006 fc3f 	bl	80134d8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cc5a:	8afb      	ldrh	r3, [r7, #22]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d139      	bne.n	800ccd4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	7b1b      	ldrb	r3, [r3, #12]
 800cc6a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7b5b      	ldrb	r3, [r3, #13]
 800cc70:	f003 0302 	and.w	r3, r3, #2
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d011      	beq.n	800cc9c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d106      	bne.n	800cc92 <pbuf_free+0xc6>
 800cc84:	4b18      	ldr	r3, [pc, #96]	; (800cce8 <pbuf_free+0x11c>)
 800cc86:	f240 22f9 	movw	r2, #761	; 0x2f9
 800cc8a:	491c      	ldr	r1, [pc, #112]	; (800ccfc <pbuf_free+0x130>)
 800cc8c:	4818      	ldr	r0, [pc, #96]	; (800ccf0 <pbuf_free+0x124>)
 800cc8e:	f007 fb9d 	bl	80143cc <iprintf>
        pc->custom_free_function(p);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	4798      	blx	r3
 800cc9a:	e015      	b.n	800ccc8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800cc9c:	89fb      	ldrh	r3, [r7, #14]
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d104      	bne.n	800ccac <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	200c      	movs	r0, #12
 800cca6:	f7ff fa2f 	bl	800c108 <memp_free>
 800ccaa:	e00d      	b.n	800ccc8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800ccac:	89fb      	ldrh	r3, [r7, #14]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d002      	beq.n	800ccb8 <pbuf_free+0xec>
 800ccb2:	89fb      	ldrh	r3, [r7, #14]
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d104      	bne.n	800ccc2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	200b      	movs	r0, #11
 800ccbc:	f7ff fa24 	bl	800c108 <memp_free>
 800ccc0:	e002      	b.n	800ccc8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7fe ff06 	bl	800bad4 <mem_free>
        }
      }
      count++;
 800ccc8:	7ffb      	ldrb	r3, [r7, #31]
 800ccca:	3301      	adds	r3, #1
 800cccc:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	607b      	str	r3, [r7, #4]
 800ccd2:	e001      	b.n	800ccd8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1a3      	bne.n	800cc26 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ccde:	7ffb      	ldrb	r3, [r7, #31]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	08016ae4 	.word	0x08016ae4
 800ccec:	08016d1c 	.word	0x08016d1c
 800ccf0:	08016b30 	.word	0x08016b30
 800ccf4:	08016d58 	.word	0x08016d58
 800ccf8:	08016d70 	.word	0x08016d70
 800ccfc:	08016d88 	.word	0x08016d88

0800cd00 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cd0c:	e005      	b.n	800cd1a <pbuf_clen+0x1a>
    ++len;
 800cd0e:	89fb      	ldrh	r3, [r7, #14]
 800cd10:	3301      	adds	r3, #1
 800cd12:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1f6      	bne.n	800cd0e <pbuf_clen+0xe>
  }
  return len;
 800cd20:	89fb      	ldrh	r3, [r7, #14]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
	...

0800cd30 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d016      	beq.n	800cd6c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800cd3e:	f006 fbbd 	bl	80134bc <sys_arch_protect>
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	89db      	ldrh	r3, [r3, #14]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	81da      	strh	r2, [r3, #14]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f006 fbc1 	bl	80134d8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	89db      	ldrh	r3, [r3, #14]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <pbuf_ref+0x3c>
 800cd5e:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <pbuf_ref+0x44>)
 800cd60:	f240 3239 	movw	r2, #825	; 0x339
 800cd64:	4904      	ldr	r1, [pc, #16]	; (800cd78 <pbuf_ref+0x48>)
 800cd66:	4805      	ldr	r0, [pc, #20]	; (800cd7c <pbuf_ref+0x4c>)
 800cd68:	f007 fb30 	bl	80143cc <iprintf>
  }
}
 800cd6c:	bf00      	nop
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	08016ae4 	.word	0x08016ae4
 800cd78:	08016dac 	.word	0x08016dac
 800cd7c:	08016b30 	.word	0x08016b30

0800cd80 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <pbuf_cat+0x16>
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d107      	bne.n	800cda6 <pbuf_cat+0x26>
 800cd96:	4b20      	ldr	r3, [pc, #128]	; (800ce18 <pbuf_cat+0x98>)
 800cd98:	f240 324d 	movw	r2, #845	; 0x34d
 800cd9c:	491f      	ldr	r1, [pc, #124]	; (800ce1c <pbuf_cat+0x9c>)
 800cd9e:	4820      	ldr	r0, [pc, #128]	; (800ce20 <pbuf_cat+0xa0>)
 800cda0:	f007 fb14 	bl	80143cc <iprintf>
 800cda4:	e034      	b.n	800ce10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	60fb      	str	r3, [r7, #12]
 800cdaa:	e00a      	b.n	800cdc2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	891a      	ldrh	r2, [r3, #8]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	891b      	ldrh	r3, [r3, #8]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1f0      	bne.n	800cdac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	891a      	ldrh	r2, [r3, #8]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	895b      	ldrh	r3, [r3, #10]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d006      	beq.n	800cde4 <pbuf_cat+0x64>
 800cdd6:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <pbuf_cat+0x98>)
 800cdd8:	f240 3255 	movw	r2, #853	; 0x355
 800cddc:	4911      	ldr	r1, [pc, #68]	; (800ce24 <pbuf_cat+0xa4>)
 800cdde:	4810      	ldr	r0, [pc, #64]	; (800ce20 <pbuf_cat+0xa0>)
 800cde0:	f007 faf4 	bl	80143cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d006      	beq.n	800cdfa <pbuf_cat+0x7a>
 800cdec:	4b0a      	ldr	r3, [pc, #40]	; (800ce18 <pbuf_cat+0x98>)
 800cdee:	f240 3256 	movw	r2, #854	; 0x356
 800cdf2:	490d      	ldr	r1, [pc, #52]	; (800ce28 <pbuf_cat+0xa8>)
 800cdf4:	480a      	ldr	r0, [pc, #40]	; (800ce20 <pbuf_cat+0xa0>)
 800cdf6:	f007 fae9 	bl	80143cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	891a      	ldrh	r2, [r3, #8]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	891b      	ldrh	r3, [r3, #8]
 800ce02:	4413      	add	r3, r2
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	08016ae4 	.word	0x08016ae4
 800ce1c:	08016dc0 	.word	0x08016dc0
 800ce20:	08016b30 	.word	0x08016b30
 800ce24:	08016df8 	.word	0x08016df8
 800ce28:	08016e28 	.word	0x08016e28

0800ce2c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff ffa1 	bl	800cd80 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ce3e:	6838      	ldr	r0, [r7, #0]
 800ce40:	f7ff ff76 	bl	800cd30 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800ce56:	2300      	movs	r3, #0
 800ce58:	81fb      	strh	r3, [r7, #14]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d008      	beq.n	800ce76 <pbuf_copy+0x2a>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d005      	beq.n	800ce76 <pbuf_copy+0x2a>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	891a      	ldrh	r2, [r3, #8]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	891b      	ldrh	r3, [r3, #8]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d209      	bcs.n	800ce8a <pbuf_copy+0x3e>
 800ce76:	4b54      	ldr	r3, [pc, #336]	; (800cfc8 <pbuf_copy+0x17c>)
 800ce78:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ce7c:	4953      	ldr	r1, [pc, #332]	; (800cfcc <pbuf_copy+0x180>)
 800ce7e:	4854      	ldr	r0, [pc, #336]	; (800cfd0 <pbuf_copy+0x184>)
 800ce80:	f007 faa4 	bl	80143cc <iprintf>
 800ce84:	f06f 030f 	mvn.w	r3, #15
 800ce88:	e099      	b.n	800cfbe <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	895b      	ldrh	r3, [r3, #10]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	89fb      	ldrh	r3, [r7, #14]
 800ce92:	1ad2      	subs	r2, r2, r3
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	895b      	ldrh	r3, [r3, #10]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	89bb      	ldrh	r3, [r7, #12]
 800ce9c:	1acb      	subs	r3, r1, r3
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	db05      	blt.n	800ceae <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	895a      	ldrh	r2, [r3, #10]
 800cea6:	89bb      	ldrh	r3, [r7, #12]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	817b      	strh	r3, [r7, #10]
 800ceac:	e004      	b.n	800ceb8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	895a      	ldrh	r2, [r3, #10]
 800ceb2:	89fb      	ldrh	r3, [r7, #14]
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	89fb      	ldrh	r3, [r7, #14]
 800cebe:	18d0      	adds	r0, r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	89bb      	ldrh	r3, [r7, #12]
 800cec6:	4413      	add	r3, r2
 800cec8:	897a      	ldrh	r2, [r7, #10]
 800ceca:	4619      	mov	r1, r3
 800cecc:	f007 fa6b 	bl	80143a6 <memcpy>
    offset_to += len;
 800ced0:	89fa      	ldrh	r2, [r7, #14]
 800ced2:	897b      	ldrh	r3, [r7, #10]
 800ced4:	4413      	add	r3, r2
 800ced6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800ced8:	89ba      	ldrh	r2, [r7, #12]
 800ceda:	897b      	ldrh	r3, [r7, #10]
 800cedc:	4413      	add	r3, r2
 800cede:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	895b      	ldrh	r3, [r3, #10]
 800cee4:	89fa      	ldrh	r2, [r7, #14]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d906      	bls.n	800cef8 <pbuf_copy+0xac>
 800ceea:	4b37      	ldr	r3, [pc, #220]	; (800cfc8 <pbuf_copy+0x17c>)
 800ceec:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cef0:	4938      	ldr	r1, [pc, #224]	; (800cfd4 <pbuf_copy+0x188>)
 800cef2:	4837      	ldr	r0, [pc, #220]	; (800cfd0 <pbuf_copy+0x184>)
 800cef4:	f007 fa6a 	bl	80143cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	895b      	ldrh	r3, [r3, #10]
 800cefc:	89ba      	ldrh	r2, [r7, #12]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d906      	bls.n	800cf10 <pbuf_copy+0xc4>
 800cf02:	4b31      	ldr	r3, [pc, #196]	; (800cfc8 <pbuf_copy+0x17c>)
 800cf04:	f240 32ce 	movw	r2, #974	; 0x3ce
 800cf08:	4933      	ldr	r1, [pc, #204]	; (800cfd8 <pbuf_copy+0x18c>)
 800cf0a:	4831      	ldr	r0, [pc, #196]	; (800cfd0 <pbuf_copy+0x184>)
 800cf0c:	f007 fa5e 	bl	80143cc <iprintf>
    if (offset_from >= p_from->len) {
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	895b      	ldrh	r3, [r3, #10]
 800cf14:	89ba      	ldrh	r2, [r7, #12]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d304      	bcc.n	800cf24 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	895b      	ldrh	r3, [r3, #10]
 800cf28:	89fa      	ldrh	r2, [r7, #14]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d114      	bne.n	800cf58 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10c      	bne.n	800cf58 <pbuf_copy+0x10c>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d009      	beq.n	800cf58 <pbuf_copy+0x10c>
 800cf44:	4b20      	ldr	r3, [pc, #128]	; (800cfc8 <pbuf_copy+0x17c>)
 800cf46:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cf4a:	4924      	ldr	r1, [pc, #144]	; (800cfdc <pbuf_copy+0x190>)
 800cf4c:	4820      	ldr	r0, [pc, #128]	; (800cfd0 <pbuf_copy+0x184>)
 800cf4e:	f007 fa3d 	bl	80143cc <iprintf>
 800cf52:	f06f 030f 	mvn.w	r3, #15
 800cf56:	e032      	b.n	800cfbe <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d013      	beq.n	800cf86 <pbuf_copy+0x13a>
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	895a      	ldrh	r2, [r3, #10]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	891b      	ldrh	r3, [r3, #8]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d10d      	bne.n	800cf86 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d009      	beq.n	800cf86 <pbuf_copy+0x13a>
 800cf72:	4b15      	ldr	r3, [pc, #84]	; (800cfc8 <pbuf_copy+0x17c>)
 800cf74:	f240 32de 	movw	r2, #990	; 0x3de
 800cf78:	4919      	ldr	r1, [pc, #100]	; (800cfe0 <pbuf_copy+0x194>)
 800cf7a:	4815      	ldr	r0, [pc, #84]	; (800cfd0 <pbuf_copy+0x184>)
 800cf7c:	f007 fa26 	bl	80143cc <iprintf>
 800cf80:	f06f 0305 	mvn.w	r3, #5
 800cf84:	e01b      	b.n	800cfbe <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d013      	beq.n	800cfb4 <pbuf_copy+0x168>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	895a      	ldrh	r2, [r3, #10]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	891b      	ldrh	r3, [r3, #8]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d10d      	bne.n	800cfb4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d009      	beq.n	800cfb4 <pbuf_copy+0x168>
 800cfa0:	4b09      	ldr	r3, [pc, #36]	; (800cfc8 <pbuf_copy+0x17c>)
 800cfa2:	f240 32e3 	movw	r2, #995	; 0x3e3
 800cfa6:	490e      	ldr	r1, [pc, #56]	; (800cfe0 <pbuf_copy+0x194>)
 800cfa8:	4809      	ldr	r0, [pc, #36]	; (800cfd0 <pbuf_copy+0x184>)
 800cfaa:	f007 fa0f 	bl	80143cc <iprintf>
 800cfae:	f06f 0305 	mvn.w	r3, #5
 800cfb2:	e004      	b.n	800cfbe <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f47f af67 	bne.w	800ce8a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	08016ae4 	.word	0x08016ae4
 800cfcc:	08016e74 	.word	0x08016e74
 800cfd0:	08016b30 	.word	0x08016b30
 800cfd4:	08016ea4 	.word	0x08016ea4
 800cfd8:	08016ebc 	.word	0x08016ebc
 800cfdc:	08016ed8 	.word	0x08016ed8
 800cfe0:	08016ee8 	.word	0x08016ee8

0800cfe4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	4611      	mov	r1, r2
 800cff0:	461a      	mov	r2, r3
 800cff2:	460b      	mov	r3, r1
 800cff4:	80fb      	strh	r3, [r7, #6]
 800cff6:	4613      	mov	r3, r2
 800cff8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d108      	bne.n	800d016 <pbuf_copy_partial+0x32>
 800d004:	4b30      	ldr	r3, [pc, #192]	; (800d0c8 <pbuf_copy_partial+0xe4>)
 800d006:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d00a:	4930      	ldr	r1, [pc, #192]	; (800d0cc <pbuf_copy_partial+0xe8>)
 800d00c:	4830      	ldr	r0, [pc, #192]	; (800d0d0 <pbuf_copy_partial+0xec>)
 800d00e:	f007 f9dd 	bl	80143cc <iprintf>
 800d012:	2300      	movs	r3, #0
 800d014:	e054      	b.n	800d0c0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d108      	bne.n	800d02e <pbuf_copy_partial+0x4a>
 800d01c:	4b2a      	ldr	r3, [pc, #168]	; (800d0c8 <pbuf_copy_partial+0xe4>)
 800d01e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d022:	492c      	ldr	r1, [pc, #176]	; (800d0d4 <pbuf_copy_partial+0xf0>)
 800d024:	482a      	ldr	r0, [pc, #168]	; (800d0d0 <pbuf_copy_partial+0xec>)
 800d026:	f007 f9d1 	bl	80143cc <iprintf>
 800d02a:	2300      	movs	r3, #0
 800d02c:	e048      	b.n	800d0c0 <pbuf_copy_partial+0xdc>

  left = 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <pbuf_copy_partial+0x5a>
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d101      	bne.n	800d042 <pbuf_copy_partial+0x5e>
    return 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	e03e      	b.n	800d0c0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	61fb      	str	r3, [r7, #28]
 800d046:	e034      	b.n	800d0b2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800d048:	88bb      	ldrh	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <pbuf_copy_partial+0x80>
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	895b      	ldrh	r3, [r3, #10]
 800d052:	88ba      	ldrh	r2, [r7, #4]
 800d054:	429a      	cmp	r2, r3
 800d056:	d305      	bcc.n	800d064 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	895b      	ldrh	r3, [r3, #10]
 800d05c:	88ba      	ldrh	r2, [r7, #4]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	80bb      	strh	r3, [r7, #4]
 800d062:	e023      	b.n	800d0ac <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	895a      	ldrh	r2, [r3, #10]
 800d068:	88bb      	ldrh	r3, [r7, #4]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d06e:	8b3a      	ldrh	r2, [r7, #24]
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	429a      	cmp	r2, r3
 800d074:	d901      	bls.n	800d07a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800d076:	88fb      	ldrh	r3, [r7, #6]
 800d078:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800d07a:	8b7b      	ldrh	r3, [r7, #26]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	18d0      	adds	r0, r2, r3
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	88bb      	ldrh	r3, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	8b3a      	ldrh	r2, [r7, #24]
 800d08a:	4619      	mov	r1, r3
 800d08c:	f007 f98b 	bl	80143a6 <memcpy>
      copied_total += buf_copy_len;
 800d090:	8afa      	ldrh	r2, [r7, #22]
 800d092:	8b3b      	ldrh	r3, [r7, #24]
 800d094:	4413      	add	r3, r2
 800d096:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800d098:	8b7a      	ldrh	r2, [r7, #26]
 800d09a:	8b3b      	ldrh	r3, [r7, #24]
 800d09c:	4413      	add	r3, r2
 800d09e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800d0a0:	88fa      	ldrh	r2, [r7, #6]
 800d0a2:	8b3b      	ldrh	r3, [r7, #24]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	61fb      	str	r3, [r7, #28]
 800d0b2:	88fb      	ldrh	r3, [r7, #6]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <pbuf_copy_partial+0xda>
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1c4      	bne.n	800d048 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800d0be:	8afb      	ldrh	r3, [r7, #22]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3720      	adds	r7, #32
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	08016ae4 	.word	0x08016ae4
 800d0cc:	08016f14 	.word	0x08016f14
 800d0d0:	08016b30 	.word	0x08016b30
 800d0d4:	08016f34 	.word	0x08016f34

0800d0d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d0dc:	bf00      	nop
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
	...

0800d0e8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d0ec:	f000 ffb8 	bl	800e060 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <tcp_tmr+0x28>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	4b05      	ldr	r3, [pc, #20]	; (800d110 <tcp_tmr+0x28>)
 800d0fa:	701a      	strb	r2, [r3, #0]
 800d0fc:	4b04      	ldr	r3, [pc, #16]	; (800d110 <tcp_tmr+0x28>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	d001      	beq.n	800d10c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d108:	f000 fcea 	bl	800dae0 <tcp_slowtmr>
  }
}
 800d10c:	bf00      	nop
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	20003f41 	.word	0x20003f41

0800d114 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	e00a      	b.n	800d13a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d102      	bne.n	800d134 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d1f1      	bne.n	800d124 <tcp_remove_listener+0x10>
      }
   }
}
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d105      	bne.n	800d166 <tcp_listen_closed+0x1a>
 800d15a:	4b13      	ldr	r3, [pc, #76]	; (800d1a8 <tcp_listen_closed+0x5c>)
 800d15c:	22c0      	movs	r2, #192	; 0xc0
 800d15e:	4913      	ldr	r1, [pc, #76]	; (800d1ac <tcp_listen_closed+0x60>)
 800d160:	4813      	ldr	r0, [pc, #76]	; (800d1b0 <tcp_listen_closed+0x64>)
 800d162:	f007 f933 	bl	80143cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	7d1b      	ldrb	r3, [r3, #20]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d005      	beq.n	800d17a <tcp_listen_closed+0x2e>
 800d16e:	4b0e      	ldr	r3, [pc, #56]	; (800d1a8 <tcp_listen_closed+0x5c>)
 800d170:	22c1      	movs	r2, #193	; 0xc1
 800d172:	4910      	ldr	r1, [pc, #64]	; (800d1b4 <tcp_listen_closed+0x68>)
 800d174:	480e      	ldr	r0, [pc, #56]	; (800d1b0 <tcp_listen_closed+0x64>)
 800d176:	f007 f929 	bl	80143cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d17a:	2301      	movs	r3, #1
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e00b      	b.n	800d198 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800d180:	4a0d      	ldr	r2, [pc, #52]	; (800d1b8 <tcp_listen_closed+0x6c>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6879      	ldr	r1, [r7, #4]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff ffc1 	bl	800d114 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3301      	adds	r3, #1
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d9f0      	bls.n	800d180 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d19e:	bf00      	nop
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08017068 	.word	0x08017068
 800d1ac:	08017098 	.word	0x08017098
 800d1b0:	080170a4 	.word	0x080170a4
 800d1b4:	080170cc 	.word	0x080170cc
 800d1b8:	08017fb0 	.word	0x08017fb0

0800d1bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d1bc:	b5b0      	push	{r4, r5, r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af02      	add	r7, sp, #8
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d1c8:	78fb      	ldrb	r3, [r7, #3]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d075      	beq.n	800d2ba <tcp_close_shutdown+0xfe>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7d1b      	ldrb	r3, [r3, #20]
 800d1d2:	2b04      	cmp	r3, #4
 800d1d4:	d003      	beq.n	800d1de <tcp_close_shutdown+0x22>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7d1b      	ldrb	r3, [r3, #20]
 800d1da:	2b07      	cmp	r3, #7
 800d1dc:	d16d      	bne.n	800d2ba <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d104      	bne.n	800d1f0 <tcp_close_shutdown+0x34>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d1ee:	d064      	beq.n	800d2ba <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	7e9b      	ldrb	r3, [r3, #26]
 800d1f4:	f003 0310 	and.w	r3, r3, #16
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d106      	bne.n	800d20a <tcp_close_shutdown+0x4e>
 800d1fc:	4b59      	ldr	r3, [pc, #356]	; (800d364 <tcp_close_shutdown+0x1a8>)
 800d1fe:	f240 120f 	movw	r2, #271	; 0x10f
 800d202:	4959      	ldr	r1, [pc, #356]	; (800d368 <tcp_close_shutdown+0x1ac>)
 800d204:	4859      	ldr	r0, [pc, #356]	; (800d36c <tcp_close_shutdown+0x1b0>)
 800d206:	f007 f8e1 	bl	80143cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d212:	687c      	ldr	r4, [r7, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	1d1d      	adds	r5, r3, #4
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	8adb      	ldrh	r3, [r3, #22]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	8b12      	ldrh	r2, [r2, #24]
 800d220:	9201      	str	r2, [sp, #4]
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	462b      	mov	r3, r5
 800d226:	4622      	mov	r2, r4
 800d228:	f004 ff1c 	bl	8012064 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f001 fa4d 	bl	800e6cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d232:	4b4f      	ldr	r3, [pc, #316]	; (800d370 <tcp_close_shutdown+0x1b4>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d105      	bne.n	800d248 <tcp_close_shutdown+0x8c>
 800d23c:	4b4c      	ldr	r3, [pc, #304]	; (800d370 <tcp_close_shutdown+0x1b4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	4a4b      	ldr	r2, [pc, #300]	; (800d370 <tcp_close_shutdown+0x1b4>)
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	e013      	b.n	800d270 <tcp_close_shutdown+0xb4>
 800d248:	4b49      	ldr	r3, [pc, #292]	; (800d370 <tcp_close_shutdown+0x1b4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	e00c      	b.n	800d26a <tcp_close_shutdown+0xae>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	68da      	ldr	r2, [r3, #12]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	429a      	cmp	r2, r3
 800d258:	d104      	bne.n	800d264 <tcp_close_shutdown+0xa8>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	68da      	ldr	r2, [r3, #12]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	60da      	str	r2, [r3, #12]
 800d262:	e005      	b.n	800d270 <tcp_close_shutdown+0xb4>
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1ef      	bne.n	800d250 <tcp_close_shutdown+0x94>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	4b3f      	ldr	r3, [pc, #252]	; (800d374 <tcp_close_shutdown+0x1b8>)
 800d278:	2201      	movs	r2, #1
 800d27a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	7d1b      	ldrb	r3, [r3, #20]
 800d280:	2b04      	cmp	r3, #4
 800d282:	d10c      	bne.n	800d29e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	220a      	movs	r2, #10
 800d288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d28a:	4b3b      	ldr	r3, [pc, #236]	; (800d378 <tcp_close_shutdown+0x1bc>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	60da      	str	r2, [r3, #12]
 800d292:	4a39      	ldr	r2, [pc, #228]	; (800d378 <tcp_close_shutdown+0x1bc>)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	f005 f934 	bl	8012504 <tcp_timer_needed>
 800d29c:	e00b      	b.n	800d2b6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800d29e:	4b37      	ldr	r3, [pc, #220]	; (800d37c <tcp_close_shutdown+0x1c0>)
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d102      	bne.n	800d2ae <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800d2a8:	f003 fd72 	bl	8010d90 <tcp_trigger_input_pcb_close>
 800d2ac:	e003      	b.n	800d2b6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800d2ae:	6879      	ldr	r1, [r7, #4]
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	f7fe ff29 	bl	800c108 <memp_free>
        }
      }
      return ERR_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	e050      	b.n	800d35c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	7d1b      	ldrb	r3, [r3, #20]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d02e      	beq.n	800d320 <tcp_close_shutdown+0x164>
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d038      	beq.n	800d338 <tcp_close_shutdown+0x17c>
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d142      	bne.n	800d350 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	8adb      	ldrh	r3, [r3, #22]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d021      	beq.n	800d316 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d2d2:	4b2b      	ldr	r3, [pc, #172]	; (800d380 <tcp_close_shutdown+0x1c4>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d105      	bne.n	800d2e8 <tcp_close_shutdown+0x12c>
 800d2dc:	4b28      	ldr	r3, [pc, #160]	; (800d380 <tcp_close_shutdown+0x1c4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	4a27      	ldr	r2, [pc, #156]	; (800d380 <tcp_close_shutdown+0x1c4>)
 800d2e4:	6013      	str	r3, [r2, #0]
 800d2e6:	e013      	b.n	800d310 <tcp_close_shutdown+0x154>
 800d2e8:	4b25      	ldr	r3, [pc, #148]	; (800d380 <tcp_close_shutdown+0x1c4>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	60bb      	str	r3, [r7, #8]
 800d2ee:	e00c      	b.n	800d30a <tcp_close_shutdown+0x14e>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	68da      	ldr	r2, [r3, #12]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d104      	bne.n	800d304 <tcp_close_shutdown+0x148>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68da      	ldr	r2, [r3, #12]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	60da      	str	r2, [r3, #12]
 800d302:	e005      	b.n	800d310 <tcp_close_shutdown+0x154>
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	60bb      	str	r3, [r7, #8]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1ef      	bne.n	800d2f0 <tcp_close_shutdown+0x134>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	2001      	movs	r0, #1
 800d31a:	f7fe fef5 	bl	800c108 <memp_free>
    break;
 800d31e:	e01c      	b.n	800d35a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff ff13 	bl	800d14c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	4816      	ldr	r0, [pc, #88]	; (800d384 <tcp_close_shutdown+0x1c8>)
 800d32a:	f001 fa11 	bl	800e750 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	2002      	movs	r0, #2
 800d332:	f7fe fee9 	bl	800c108 <memp_free>
    break;
 800d336:	e010      	b.n	800d35a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	480d      	ldr	r0, [pc, #52]	; (800d370 <tcp_close_shutdown+0x1b4>)
 800d33c:	f001 fa08 	bl	800e750 <tcp_pcb_remove>
 800d340:	4b0c      	ldr	r3, [pc, #48]	; (800d374 <tcp_close_shutdown+0x1b8>)
 800d342:	2201      	movs	r2, #1
 800d344:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	2001      	movs	r0, #1
 800d34a:	f7fe fedd 	bl	800c108 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800d34e:	e004      	b.n	800d35a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f819 	bl	800d388 <tcp_close_shutdown_fin>
 800d356:	4603      	mov	r3, r0
 800d358:	e000      	b.n	800d35c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bdb0      	pop	{r4, r5, r7, pc}
 800d364:	08017068 	.word	0x08017068
 800d368:	080170e4 	.word	0x080170e4
 800d36c:	080170a4 	.word	0x080170a4
 800d370:	20007738 	.word	0x20007738
 800d374:	20007734 	.word	0x20007734
 800d378:	20007748 	.word	0x20007748
 800d37c:	2000774c 	.word	0x2000774c
 800d380:	20007744 	.word	0x20007744
 800d384:	20007740 	.word	0x20007740

0800d388 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <tcp_close_shutdown_fin+0x1c>
 800d396:	4b2c      	ldr	r3, [pc, #176]	; (800d448 <tcp_close_shutdown_fin+0xc0>)
 800d398:	f240 124d 	movw	r2, #333	; 0x14d
 800d39c:	492b      	ldr	r1, [pc, #172]	; (800d44c <tcp_close_shutdown_fin+0xc4>)
 800d39e:	482c      	ldr	r0, [pc, #176]	; (800d450 <tcp_close_shutdown_fin+0xc8>)
 800d3a0:	f007 f814 	bl	80143cc <iprintf>

  switch (pcb->state) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7d1b      	ldrb	r3, [r3, #20]
 800d3a8:	2b04      	cmp	r3, #4
 800d3aa:	d010      	beq.n	800d3ce <tcp_close_shutdown_fin+0x46>
 800d3ac:	2b07      	cmp	r3, #7
 800d3ae:	d01b      	beq.n	800d3e8 <tcp_close_shutdown_fin+0x60>
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d126      	bne.n	800d402 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f003 fd77 	bl	8010ea8 <tcp_send_fin>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d11f      	bne.n	800d406 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2205      	movs	r2, #5
 800d3ca:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d3cc:	e01b      	b.n	800d406 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f003 fd6a 	bl	8010ea8 <tcp_send_fin>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d114      	bne.n	800d40a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2205      	movs	r2, #5
 800d3e4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d3e6:	e010      	b.n	800d40a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f003 fd5d 	bl	8010ea8 <tcp_send_fin>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d109      	bne.n	800d40e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2209      	movs	r2, #9
 800d3fe:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d400:	e005      	b.n	800d40e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	e01c      	b.n	800d440 <tcp_close_shutdown_fin+0xb8>
    break;
 800d406:	bf00      	nop
 800d408:	e002      	b.n	800d410 <tcp_close_shutdown_fin+0x88>
    break;
 800d40a:	bf00      	nop
 800d40c:	e000      	b.n	800d410 <tcp_close_shutdown_fin+0x88>
    break;
 800d40e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d103      	bne.n	800d420 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f004 fb9b 	bl	8011b54 <tcp_output>
 800d41e:	e00d      	b.n	800d43c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d428:	d108      	bne.n	800d43c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	7e9b      	ldrb	r3, [r3, #26]
 800d42e:	f043 0308 	orr.w	r3, r3, #8
 800d432:	b2da      	uxtb	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	e001      	b.n	800d440 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d43c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	08017068 	.word	0x08017068
 800d44c:	08017098 	.word	0x08017098
 800d450:	080170a4 	.word	0x080170a4

0800d454 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7d1b      	ldrb	r3, [r3, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d006      	beq.n	800d472 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	7e9b      	ldrb	r3, [r3, #26]
 800d468:	f043 0310 	orr.w	r3, r3, #16
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d472:	2101      	movs	r1, #1
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fea1 	bl	800d1bc <tcp_close_shutdown>
 800d47a:	4603      	mov	r3, r0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	7d1b      	ldrb	r3, [r3, #20]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d102      	bne.n	800d49e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800d498:	f06f 030a 	mvn.w	r3, #10
 800d49c:	e035      	b.n	800d50a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d01b      	beq.n	800d4dc <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	7e9b      	ldrb	r3, [r3, #26]
 800d4a8:	f043 0310 	orr.w	r3, r3, #16
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d005      	beq.n	800d4c4 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f7ff fe7e 	bl	800d1bc <tcp_close_shutdown>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	e022      	b.n	800d50a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d007      	beq.n	800d4dc <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff fb7b 	bl	800cbcc <pbuf_free>
      pcb->refused_data = NULL;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d012      	beq.n	800d508 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	7d1b      	ldrb	r3, [r3, #20]
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	db0b      	blt.n	800d502 <tcp_shutdown+0x7e>
 800d4ea:	2b04      	cmp	r3, #4
 800d4ec:	dd01      	ble.n	800d4f2 <tcp_shutdown+0x6e>
 800d4ee:	2b07      	cmp	r3, #7
 800d4f0:	d107      	bne.n	800d502 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f7ff fe5f 	bl	800d1bc <tcp_close_shutdown>
 800d4fe:	4603      	mov	r3, r0
 800d500:	e003      	b.n	800d50a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800d502:	f06f 030a 	mvn.w	r3, #10
 800d506:	e000      	b.n	800d50a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
	...

0800d514 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08c      	sub	sp, #48	; 0x30
 800d518:	af02      	add	r7, sp, #8
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7d1b      	ldrb	r3, [r3, #20]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d106      	bne.n	800d534 <tcp_abandon+0x20>
 800d526:	4b4d      	ldr	r3, [pc, #308]	; (800d65c <tcp_abandon+0x148>)
 800d528:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d52c:	494c      	ldr	r1, [pc, #304]	; (800d660 <tcp_abandon+0x14c>)
 800d52e:	484d      	ldr	r0, [pc, #308]	; (800d664 <tcp_abandon+0x150>)
 800d530:	f006 ff4c 	bl	80143cc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	7d1b      	ldrb	r3, [r3, #20]
 800d538:	2b0a      	cmp	r3, #10
 800d53a:	d108      	bne.n	800d54e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	484a      	ldr	r0, [pc, #296]	; (800d668 <tcp_abandon+0x154>)
 800d540:	f001 f906 	bl	800e750 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	2001      	movs	r0, #1
 800d548:	f7fe fdde 	bl	800c108 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800d54c:	e081      	b.n	800d652 <tcp_abandon+0x13e>
    int send_rst = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d55a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d560:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d568:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7d1b      	ldrb	r3, [r3, #20]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d126      	bne.n	800d5c6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	8adb      	ldrh	r3, [r3, #22]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d02e      	beq.n	800d5de <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d580:	4b3a      	ldr	r3, [pc, #232]	; (800d66c <tcp_abandon+0x158>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	429a      	cmp	r2, r3
 800d588:	d105      	bne.n	800d596 <tcp_abandon+0x82>
 800d58a:	4b38      	ldr	r3, [pc, #224]	; (800d66c <tcp_abandon+0x158>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	4a36      	ldr	r2, [pc, #216]	; (800d66c <tcp_abandon+0x158>)
 800d592:	6013      	str	r3, [r2, #0]
 800d594:	e013      	b.n	800d5be <tcp_abandon+0xaa>
 800d596:	4b35      	ldr	r3, [pc, #212]	; (800d66c <tcp_abandon+0x158>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	e00c      	b.n	800d5b8 <tcp_abandon+0xa4>
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d104      	bne.n	800d5b2 <tcp_abandon+0x9e>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	68da      	ldr	r2, [r3, #12]
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	60da      	str	r2, [r3, #12]
 800d5b0:	e005      	b.n	800d5be <tcp_abandon+0xaa>
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1ef      	bne.n	800d59e <tcp_abandon+0x8a>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	60da      	str	r2, [r3, #12]
 800d5c4:	e00b      	b.n	800d5de <tcp_abandon+0xca>
      send_rst = reset;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	8adb      	ldrh	r3, [r3, #22]
 800d5ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	4827      	ldr	r0, [pc, #156]	; (800d670 <tcp_abandon+0x15c>)
 800d5d4:	f001 f8bc 	bl	800e750 <tcp_pcb_remove>
 800d5d8:	4b26      	ldr	r3, [pc, #152]	; (800d674 <tcp_abandon+0x160>)
 800d5da:	2201      	movs	r2, #1
 800d5dc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 fe05 	bl	800e1fa <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 fdfc 	bl	800e1fa <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fdf3 	bl	800e1fa <tcp_segs_free>
    if (send_rst) {
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00c      	beq.n	800d634 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	1d19      	adds	r1, r3, #4
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	8b1b      	ldrh	r3, [r3, #24]
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	460b      	mov	r3, r1
 800d62c:	6979      	ldr	r1, [r7, #20]
 800d62e:	69b8      	ldr	r0, [r7, #24]
 800d630:	f004 fd18 	bl	8012064 <tcp_rst>
    last_state = pcb->state;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7d1b      	ldrb	r3, [r3, #20]
 800d638:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	2001      	movs	r0, #1
 800d63e:	f7fe fd63 	bl	800c108 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d004      	beq.n	800d652 <tcp_abandon+0x13e>
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	f06f 010c 	mvn.w	r1, #12
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	4798      	blx	r3
}
 800d652:	bf00      	nop
 800d654:	3728      	adds	r7, #40	; 0x28
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	08017068 	.word	0x08017068
 800d660:	08017100 	.word	0x08017100
 800d664:	080170a4 	.word	0x080170a4
 800d668:	20007748 	.word	0x20007748
 800d66c:	20007744 	.word	0x20007744
 800d670:	20007738 	.word	0x20007738
 800d674:	20007734 	.word	0x20007734

0800d678 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d680:	2101      	movs	r1, #1
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff ff46 	bl	800d514 <tcp_abandon>
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b088      	sub	sp, #32
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	4613      	mov	r3, r2
 800d69c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d69e:	2304      	movs	r3, #4
 800d6a0:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d6a8:	4b3c      	ldr	r3, [pc, #240]	; (800d79c <tcp_bind+0x10c>)
 800d6aa:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <tcp_bind+0x28>
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d102      	bne.n	800d6be <tcp_bind+0x2e>
    return ERR_VAL;
 800d6b8:	f06f 0305 	mvn.w	r3, #5
 800d6bc:	e06a      	b.n	800d794 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	7d1b      	ldrb	r3, [r3, #20]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d009      	beq.n	800d6da <tcp_bind+0x4a>
 800d6c6:	4b36      	ldr	r3, [pc, #216]	; (800d7a0 <tcp_bind+0x110>)
 800d6c8:	f44f 7211 	mov.w	r2, #580	; 0x244
 800d6cc:	4935      	ldr	r1, [pc, #212]	; (800d7a4 <tcp_bind+0x114>)
 800d6ce:	4836      	ldr	r0, [pc, #216]	; (800d7a8 <tcp_bind+0x118>)
 800d6d0:	f006 fe7c 	bl	80143cc <iprintf>
 800d6d4:	f06f 0305 	mvn.w	r3, #5
 800d6d8:	e05c      	b.n	800d794 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800d6da:	88fb      	ldrh	r3, [r7, #6]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d109      	bne.n	800d6f4 <tcp_bind+0x64>
    port = tcp_new_port();
 800d6e0:	f000 f9ba 	bl	800da58 <tcp_new_port>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d135      	bne.n	800d75a <tcp_bind+0xca>
      return ERR_BUF;
 800d6ee:	f06f 0301 	mvn.w	r3, #1
 800d6f2:	e04f      	b.n	800d794 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61fb      	str	r3, [r7, #28]
 800d6f8:	e02b      	b.n	800d752 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d6fa:	4a2c      	ldr	r2, [pc, #176]	; (800d7ac <tcp_bind+0x11c>)
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	61bb      	str	r3, [r7, #24]
 800d706:	e01e      	b.n	800d746 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	8adb      	ldrh	r3, [r3, #22]
 800d70c:	88fa      	ldrh	r2, [r7, #6]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d116      	bne.n	800d740 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d712:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d714:	2b00      	cmp	r3, #0
 800d716:	d010      	beq.n	800d73a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00c      	beq.n	800d73a <tcp_bind+0xaa>
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d009      	beq.n	800d73a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d736:	429a      	cmp	r2, r3
 800d738:	d102      	bne.n	800d740 <tcp_bind+0xb0>
              return ERR_USE;
 800d73a:	f06f 0307 	mvn.w	r3, #7
 800d73e:	e029      	b.n	800d794 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	61bb      	str	r3, [r7, #24]
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1dd      	bne.n	800d708 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	3301      	adds	r3, #1
 800d750:	61fb      	str	r3, [r7, #28]
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	429a      	cmp	r2, r3
 800d758:	dbcf      	blt.n	800d6fa <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00c      	beq.n	800d77a <tcp_bind+0xea>
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d008      	beq.n	800d77a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <tcp_bind+0xe4>
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	e000      	b.n	800d776 <tcp_bind+0xe6>
 800d774:	2300      	movs	r3, #0
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	88fa      	ldrh	r2, [r7, #6]
 800d77e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d780:	4b0b      	ldr	r3, [pc, #44]	; (800d7b0 <tcp_bind+0x120>)
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	60da      	str	r2, [r3, #12]
 800d788:	4a09      	ldr	r2, [pc, #36]	; (800d7b0 <tcp_bind+0x120>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6013      	str	r3, [r2, #0]
 800d78e:	f004 feb9 	bl	8012504 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	08017ec0 	.word	0x08017ec0
 800d7a0:	08017068 	.word	0x08017068
 800d7a4:	08017134 	.word	0x08017134
 800d7a8:	080170a4 	.word	0x080170a4
 800d7ac:	08017fb0 	.word	0x08017fb0
 800d7b0:	20007744 	.word	0x20007744

0800d7b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800d7c2:	68b8      	ldr	r0, [r7, #8]
 800d7c4:	f7ff ff58 	bl	800d678 <tcp_abort>

  return ERR_ABRT;
 800d7c8:	f06f 030c 	mvn.w	r3, #12
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b088      	sub	sp, #32
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d009      	beq.n	800d802 <tcp_listen_with_backlog_and_err+0x2e>
 800d7ee:	4b3f      	ldr	r3, [pc, #252]	; (800d8ec <tcp_listen_with_backlog_and_err+0x118>)
 800d7f0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800d7f4:	493e      	ldr	r1, [pc, #248]	; (800d8f0 <tcp_listen_with_backlog_and_err+0x11c>)
 800d7f6:	483f      	ldr	r0, [pc, #252]	; (800d8f4 <tcp_listen_with_backlog_and_err+0x120>)
 800d7f8:	f006 fde8 	bl	80143cc <iprintf>
 800d7fc:	23f1      	movs	r3, #241	; 0xf1
 800d7fe:	76fb      	strb	r3, [r7, #27]
 800d800:	e069      	b.n	800d8d6 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	7d1b      	ldrb	r3, [r3, #20]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d104      	bne.n	800d814 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d80e:	23f7      	movs	r3, #247	; 0xf7
 800d810:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d812:	e060      	b.n	800d8d6 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d814:	2002      	movs	r0, #2
 800d816:	f7fe fc25 	bl	800c064 <memp_malloc>
 800d81a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800d822:	23ff      	movs	r3, #255	; 0xff
 800d824:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d826:	e056      	b.n	800d8d6 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	691a      	ldr	r2, [r3, #16]
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	8ada      	ldrh	r2, [r3, #22]
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	2201      	movs	r2, #1
 800d83c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	7d5a      	ldrb	r2, [r3, #21]
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	7a1a      	ldrb	r2, [r3, #8]
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	7a9a      	ldrb	r2, [r3, #10]
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	7a5a      	ldrb	r2, [r3, #9]
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8adb      	ldrh	r3, [r3, #22]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d021      	beq.n	800d8b2 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d86e:	4b22      	ldr	r3, [pc, #136]	; (800d8f8 <tcp_listen_with_backlog_and_err+0x124>)
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	429a      	cmp	r2, r3
 800d876:	d105      	bne.n	800d884 <tcp_listen_with_backlog_and_err+0xb0>
 800d878:	4b1f      	ldr	r3, [pc, #124]	; (800d8f8 <tcp_listen_with_backlog_and_err+0x124>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	4a1e      	ldr	r2, [pc, #120]	; (800d8f8 <tcp_listen_with_backlog_and_err+0x124>)
 800d880:	6013      	str	r3, [r2, #0]
 800d882:	e013      	b.n	800d8ac <tcp_listen_with_backlog_and_err+0xd8>
 800d884:	4b1c      	ldr	r3, [pc, #112]	; (800d8f8 <tcp_listen_with_backlog_and_err+0x124>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	617b      	str	r3, [r7, #20]
 800d88a:	e00c      	b.n	800d8a6 <tcp_listen_with_backlog_and_err+0xd2>
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	68da      	ldr	r2, [r3, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	429a      	cmp	r2, r3
 800d894:	d104      	bne.n	800d8a0 <tcp_listen_with_backlog_and_err+0xcc>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	68da      	ldr	r2, [r3, #12]
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	60da      	str	r2, [r3, #12]
 800d89e:	e005      	b.n	800d8ac <tcp_listen_with_backlog_and_err+0xd8>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1ef      	bne.n	800d88c <tcp_listen_with_backlog_and_err+0xb8>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800d8b2:	68f9      	ldr	r1, [r7, #12]
 800d8b4:	2001      	movs	r0, #1
 800d8b6:	f7fe fc27 	bl	800c108 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	4a0f      	ldr	r2, [pc, #60]	; (800d8fc <tcp_listen_with_backlog_and_err+0x128>)
 800d8be:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d8c0:	4b0f      	ldr	r3, [pc, #60]	; (800d900 <tcp_listen_with_backlog_and_err+0x12c>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	60da      	str	r2, [r3, #12]
 800d8c8:	4a0d      	ldr	r2, [pc, #52]	; (800d900 <tcp_listen_with_backlog_and_err+0x12c>)
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	f004 fe19 	bl	8012504 <tcp_timer_needed>
  res = ERR_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7efa      	ldrb	r2, [r7, #27]
 800d8e0:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d8e2:	69fb      	ldr	r3, [r7, #28]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3720      	adds	r7, #32
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	08017068 	.word	0x08017068
 800d8f0:	0801715c 	.word	0x0801715c
 800d8f4:	080170a4 	.word	0x080170a4
 800d8f8:	20007744 	.word	0x20007744
 800d8fc:	0800d7b5 	.word	0x0800d7b5
 800d900:	20007740 	.word	0x20007740

0800d904 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d914:	4413      	add	r3, r2
 800d916:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d920:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d924:	d802      	bhi.n	800d92c <tcp_update_rcv_ann_wnd+0x28>
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d92a:	e001      	b.n	800d930 <tcp_update_rcv_ann_wnd+0x2c>
 800d92c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d930:	4413      	add	r3, r2
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	db08      	blt.n	800d94c <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	e020      	b.n	800d98e <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	dd03      	ble.n	800d962 <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d960:	e014      	b.n	800d98c <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d974:	d306      	bcc.n	800d984 <tcp_update_rcv_ann_wnd+0x80>
 800d976:	4b08      	ldr	r3, [pc, #32]	; (800d998 <tcp_update_rcv_ann_wnd+0x94>)
 800d978:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d97c:	4907      	ldr	r1, [pc, #28]	; (800d99c <tcp_update_rcv_ann_wnd+0x98>)
 800d97e:	4808      	ldr	r0, [pc, #32]	; (800d9a0 <tcp_update_rcv_ann_wnd+0x9c>)
 800d980:	f006 fd24 	bl	80143cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	b29a      	uxth	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d98c:	2300      	movs	r3, #0
  }
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	08017068 	.word	0x08017068
 800d99c:	08017180 	.word	0x08017180
 800d9a0:	080170a4 	.word	0x080170a4

0800d9a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	7d1b      	ldrb	r3, [r3, #20]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d106      	bne.n	800d9c6 <tcp_recved+0x22>
 800d9b8:	4b23      	ldr	r3, [pc, #140]	; (800da48 <tcp_recved+0xa4>)
 800d9ba:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d9be:	4923      	ldr	r1, [pc, #140]	; (800da4c <tcp_recved+0xa8>)
 800d9c0:	4823      	ldr	r0, [pc, #140]	; (800da50 <tcp_recved+0xac>)
 800d9c2:	f006 fd03 	bl	80143cc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9ca:	887b      	ldrh	r3, [r7, #2]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d9dc:	d904      	bls.n	800d9e8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d9e4:	851a      	strh	r2, [r3, #40]	; 0x28
 800d9e6:	e017      	b.n	800da18 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d113      	bne.n	800da18 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	2b07      	cmp	r3, #7
 800d9f6:	d003      	beq.n	800da00 <tcp_recved+0x5c>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	7d1b      	ldrb	r3, [r3, #20]
 800d9fc:	2b09      	cmp	r3, #9
 800d9fe:	d104      	bne.n	800da0a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da06:	851a      	strh	r2, [r3, #40]	; 0x28
 800da08:	e006      	b.n	800da18 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800da0a:	4b0f      	ldr	r3, [pc, #60]	; (800da48 <tcp_recved+0xa4>)
 800da0c:	f240 322d 	movw	r2, #813	; 0x32d
 800da10:	4910      	ldr	r1, [pc, #64]	; (800da54 <tcp_recved+0xb0>)
 800da12:	480f      	ldr	r0, [pc, #60]	; (800da50 <tcp_recved+0xac>)
 800da14:	f006 fcda 	bl	80143cc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff ff73 	bl	800d904 <tcp_update_rcv_ann_wnd>
 800da1e:	4603      	mov	r3, r0
 800da20:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800da28:	db09      	blt.n	800da3e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	7e9b      	ldrb	r3, [r3, #26]
 800da2e:	f043 0302 	orr.w	r3, r3, #2
 800da32:	b2da      	uxtb	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f004 f88b 	bl	8011b54 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800da3e:	bf00      	nop
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	08017068 	.word	0x08017068
 800da4c:	0801719c 	.word	0x0801719c
 800da50:	080170a4 	.word	0x080170a4
 800da54:	080171c4 	.word	0x080171c4

0800da58 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800da62:	4b1d      	ldr	r3, [pc, #116]	; (800dad8 <tcp_new_port+0x80>)
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	b291      	uxth	r1, r2
 800da6a:	4a1b      	ldr	r2, [pc, #108]	; (800dad8 <tcp_new_port+0x80>)
 800da6c:	8011      	strh	r1, [r2, #0]
 800da6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da72:	4293      	cmp	r3, r2
 800da74:	d103      	bne.n	800da7e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800da76:	4b18      	ldr	r3, [pc, #96]	; (800dad8 <tcp_new_port+0x80>)
 800da78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800da7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800da7e:	2300      	movs	r3, #0
 800da80:	71fb      	strb	r3, [r7, #7]
 800da82:	e01e      	b.n	800dac2 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800da84:	79fb      	ldrb	r3, [r7, #7]
 800da86:	4a15      	ldr	r2, [pc, #84]	; (800dadc <tcp_new_port+0x84>)
 800da88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	603b      	str	r3, [r7, #0]
 800da90:	e011      	b.n	800dab6 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	8ada      	ldrh	r2, [r3, #22]
 800da96:	4b10      	ldr	r3, [pc, #64]	; (800dad8 <tcp_new_port+0x80>)
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d108      	bne.n	800dab0 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800da9e:	88bb      	ldrh	r3, [r7, #4]
 800daa0:	3301      	adds	r3, #1
 800daa2:	80bb      	strh	r3, [r7, #4]
 800daa4:	88bb      	ldrh	r3, [r7, #4]
 800daa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daaa:	d3da      	bcc.n	800da62 <tcp_new_port+0xa>
          return 0;
 800daac:	2300      	movs	r3, #0
 800daae:	e00d      	b.n	800dacc <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	603b      	str	r3, [r7, #0]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1ea      	bne.n	800da92 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dabc:	79fb      	ldrb	r3, [r7, #7]
 800dabe:	3301      	adds	r3, #1
 800dac0:	71fb      	strb	r3, [r7, #7]
 800dac2:	79fb      	ldrb	r3, [r7, #7]
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	d9dd      	bls.n	800da84 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dac8:	4b03      	ldr	r3, [pc, #12]	; (800dad8 <tcp_new_port+0x80>)
 800daca:	881b      	ldrh	r3, [r3, #0]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	2000000c 	.word	0x2000000c
 800dadc:	08017fb0 	.word	0x08017fb0

0800dae0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dae0:	b5b0      	push	{r4, r5, r7, lr}
 800dae2:	b08c      	sub	sp, #48	; 0x30
 800dae4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800daea:	4b97      	ldr	r3, [pc, #604]	; (800dd48 <tcp_slowtmr+0x268>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3301      	adds	r3, #1
 800daf0:	4a95      	ldr	r2, [pc, #596]	; (800dd48 <tcp_slowtmr+0x268>)
 800daf2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800daf4:	4b95      	ldr	r3, [pc, #596]	; (800dd4c <tcp_slowtmr+0x26c>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	3301      	adds	r3, #1
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	4b93      	ldr	r3, [pc, #588]	; (800dd4c <tcp_slowtmr+0x26c>)
 800dafe:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800db00:	2300      	movs	r3, #0
 800db02:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800db04:	4b92      	ldr	r3, [pc, #584]	; (800dd50 <tcp_slowtmr+0x270>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800db0a:	e227      	b.n	800df5c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	7d1b      	ldrb	r3, [r3, #20]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d106      	bne.n	800db22 <tcp_slowtmr+0x42>
 800db14:	4b8f      	ldr	r3, [pc, #572]	; (800dd54 <tcp_slowtmr+0x274>)
 800db16:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800db1a:	498f      	ldr	r1, [pc, #572]	; (800dd58 <tcp_slowtmr+0x278>)
 800db1c:	488f      	ldr	r0, [pc, #572]	; (800dd5c <tcp_slowtmr+0x27c>)
 800db1e:	f006 fc55 	bl	80143cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	7d1b      	ldrb	r3, [r3, #20]
 800db26:	2b01      	cmp	r3, #1
 800db28:	d106      	bne.n	800db38 <tcp_slowtmr+0x58>
 800db2a:	4b8a      	ldr	r3, [pc, #552]	; (800dd54 <tcp_slowtmr+0x274>)
 800db2c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800db30:	498b      	ldr	r1, [pc, #556]	; (800dd60 <tcp_slowtmr+0x280>)
 800db32:	488a      	ldr	r0, [pc, #552]	; (800dd5c <tcp_slowtmr+0x27c>)
 800db34:	f006 fc4a 	bl	80143cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
 800db3c:	2b0a      	cmp	r3, #10
 800db3e:	d106      	bne.n	800db4e <tcp_slowtmr+0x6e>
 800db40:	4b84      	ldr	r3, [pc, #528]	; (800dd54 <tcp_slowtmr+0x274>)
 800db42:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800db46:	4987      	ldr	r1, [pc, #540]	; (800dd64 <tcp_slowtmr+0x284>)
 800db48:	4884      	ldr	r0, [pc, #528]	; (800dd5c <tcp_slowtmr+0x27c>)
 800db4a:	f006 fc3f 	bl	80143cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db50:	7f5a      	ldrb	r2, [r3, #29]
 800db52:	4b7e      	ldr	r3, [pc, #504]	; (800dd4c <tcp_slowtmr+0x26c>)
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	429a      	cmp	r2, r3
 800db58:	d103      	bne.n	800db62 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800db60:	e1fc      	b.n	800df5c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800db62:	4b7a      	ldr	r3, [pc, #488]	; (800dd4c <tcp_slowtmr+0x26c>)
 800db64:	781a      	ldrb	r2, [r3, #0]
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	7d1b      	ldrb	r3, [r3, #20]
 800db76:	2b02      	cmp	r3, #2
 800db78:	d108      	bne.n	800db8c <tcp_slowtmr+0xac>
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db80:	2b05      	cmp	r3, #5
 800db82:	d903      	bls.n	800db8c <tcp_slowtmr+0xac>
      ++pcb_remove;
 800db84:	7ffb      	ldrb	r3, [r7, #31]
 800db86:	3301      	adds	r3, #1
 800db88:	77fb      	strb	r3, [r7, #31]
 800db8a:	e0a2      	b.n	800dcd2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db92:	2b0b      	cmp	r3, #11
 800db94:	d903      	bls.n	800db9e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800db96:	7ffb      	ldrb	r3, [r7, #31]
 800db98:	3301      	adds	r3, #1
 800db9a:	77fb      	strb	r3, [r7, #31]
 800db9c:	e099      	b.n	800dcd2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d032      	beq.n	800dc0e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	4a6d      	ldr	r2, [pc, #436]	; (800dd68 <tcp_slowtmr+0x288>)
 800dbb2:	5cd3      	ldrb	r3, [r2, r3]
 800dbb4:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800dbbc:	7f3a      	ldrb	r2, [r7, #28]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d907      	bls.n	800dbd2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800dbc8:	3301      	adds	r3, #1
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800dbd8:	7f3a      	ldrb	r2, [r7, #28]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d879      	bhi.n	800dcd2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800dbde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbe0:	f004 fbd0 	bl	8012384 <tcp_zero_window_probe>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d173      	bne.n	800dcd2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800dbf8:	2b06      	cmp	r3, #6
 800dbfa:	d86a      	bhi.n	800dcd2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800dc02:	3301      	adds	r3, #1
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800dc0c:	e061      	b.n	800dcd2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	db08      	blt.n	800dc2a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	3301      	adds	r3, #1
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	b21a      	sxth	r2, r3
 800dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc28:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d04f      	beq.n	800dcd2 <tcp_slowtmr+0x1f2>
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	db47      	blt.n	800dcd2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	7d1b      	ldrb	r3, [r3, #20]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d018      	beq.n	800dc7c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc50:	2b0c      	cmp	r3, #12
 800dc52:	bf28      	it	cs
 800dc54:	230c      	movcs	r3, #12
 800dc56:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc5e:	10db      	asrs	r3, r3, #3
 800dc60:	b21b      	sxth	r3, r3
 800dc62:	461a      	mov	r2, r3
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc6a:	4413      	add	r3, r2
 800dc6c:	7efa      	ldrb	r2, [r7, #27]
 800dc6e:	493f      	ldr	r1, [pc, #252]	; (800dd6c <tcp_slowtmr+0x28c>)
 800dc70:	5c8a      	ldrb	r2, [r1, r2]
 800dc72:	4093      	lsls	r3, r2
 800dc74:	b21a      	sxth	r2, r3
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	2200      	movs	r2, #0
 800dc80:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	bf28      	it	cs
 800dc92:	4613      	movcs	r3, r2
 800dc94:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 800dc96:	8b3b      	ldrh	r3, [r7, #24]
 800dc98:	085b      	lsrs	r3, r3, #1
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d206      	bcs.n	800dcc2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800dccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcce:	f004 fa3f 	bl	8012150 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	7d1b      	ldrb	r3, [r3, #20]
 800dcd6:	2b06      	cmp	r3, #6
 800dcd8:	d10f      	bne.n	800dcfa <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	7e9b      	ldrb	r3, [r3, #26]
 800dcde:	f003 0310 	and.w	r3, r3, #16
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d009      	beq.n	800dcfa <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dce6:	4b18      	ldr	r3, [pc, #96]	; (800dd48 <tcp_slowtmr+0x268>)
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	6a1b      	ldr	r3, [r3, #32]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	2b28      	cmp	r3, #40	; 0x28
 800dcf2:	d902      	bls.n	800dcfa <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dcf4:	7ffb      	ldrb	r3, [r7, #31]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	7a1b      	ldrb	r3, [r3, #8]
 800dcfe:	f003 0308 	and.w	r3, r3, #8
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d05d      	beq.n	800ddc2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dd0a:	2b04      	cmp	r3, #4
 800dd0c:	d003      	beq.n	800dd16 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800dd12:	2b07      	cmp	r3, #7
 800dd14:	d155      	bne.n	800ddc2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd16:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <tcp_slowtmr+0x268>)
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	6a1b      	ldr	r3, [r3, #32]
 800dd1e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd26:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800dd2a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800dd2e:	4910      	ldr	r1, [pc, #64]	; (800dd70 <tcp_slowtmr+0x290>)
 800dd30:	fba1 1303 	umull	r1, r3, r1, r3
 800dd34:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d91c      	bls.n	800dd74 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dd3a:	7ffb      	ldrb	r3, [r7, #31]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800dd40:	7fbb      	ldrb	r3, [r7, #30]
 800dd42:	3301      	adds	r3, #1
 800dd44:	77bb      	strb	r3, [r7, #30]
 800dd46:	e03c      	b.n	800ddc2 <tcp_slowtmr+0x2e2>
 800dd48:	2000773c 	.word	0x2000773c
 800dd4c:	20003f42 	.word	0x20003f42
 800dd50:	20007738 	.word	0x20007738
 800dd54:	08017068 	.word	0x08017068
 800dd58:	08017218 	.word	0x08017218
 800dd5c:	080170a4 	.word	0x080170a4
 800dd60:	08017244 	.word	0x08017244
 800dd64:	08017270 	.word	0x08017270
 800dd68:	08017fa8 	.word	0x08017fa8
 800dd6c:	08017f98 	.word	0x08017f98
 800dd70:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd74:	4b97      	ldr	r3, [pc, #604]	; (800dfd4 <tcp_slowtmr+0x4f4>)
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800dd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd86:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	4b92      	ldr	r3, [pc, #584]	; (800dfd8 <tcp_slowtmr+0x4f8>)
 800dd8e:	fb03 f300 	mul.w	r3, r3, r0
 800dd92:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800dd94:	4991      	ldr	r1, [pc, #580]	; (800dfdc <tcp_slowtmr+0x4fc>)
 800dd96:	fba1 1303 	umull	r1, r3, r1, r3
 800dd9a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d910      	bls.n	800ddc2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800dda0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dda2:	f004 fab2 	bl	801230a <tcp_keepalive>
 800dda6:	4603      	mov	r3, r0
 800dda8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800ddaa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d107      	bne.n	800ddc2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ddb8:	3301      	adds	r3, #1
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbe:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d016      	beq.n	800ddf8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800ddca:	4b82      	ldr	r3, [pc, #520]	; (800dfd4 <tcp_slowtmr+0x4f4>)
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	1ad2      	subs	r2, r2, r3
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ddda:	4619      	mov	r1, r3
 800dddc:	460b      	mov	r3, r1
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	440b      	add	r3, r1
 800dde2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d307      	bcc.n	800ddf8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 fa04 	bl	800e1fa <tcp_segs_free>
      pcb->ooseq = NULL;
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	7d1b      	ldrb	r3, [r3, #20]
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d109      	bne.n	800de14 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de00:	4b74      	ldr	r3, [pc, #464]	; (800dfd4 <tcp_slowtmr+0x4f4>)
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	2b28      	cmp	r3, #40	; 0x28
 800de0c:	d902      	bls.n	800de14 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800de0e:	7ffb      	ldrb	r3, [r7, #31]
 800de10:	3301      	adds	r3, #1
 800de12:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de16:	7d1b      	ldrb	r3, [r3, #20]
 800de18:	2b09      	cmp	r3, #9
 800de1a:	d109      	bne.n	800de30 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800de1c:	4b6d      	ldr	r3, [pc, #436]	; (800dfd4 <tcp_slowtmr+0x4f4>)
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	2bf0      	cmp	r3, #240	; 0xf0
 800de28:	d902      	bls.n	800de30 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800de2a:	7ffb      	ldrb	r3, [r7, #31]
 800de2c:	3301      	adds	r3, #1
 800de2e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800de30:	7ffb      	ldrb	r3, [r7, #31]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d05d      	beq.n	800def2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de3c:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800de3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de40:	f000 fc44 	bl	800e6cc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800de44:	6a3b      	ldr	r3, [r7, #32]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d010      	beq.n	800de6c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800de4a:	4b65      	ldr	r3, [pc, #404]	; (800dfe0 <tcp_slowtmr+0x500>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de50:	429a      	cmp	r2, r3
 800de52:	d106      	bne.n	800de62 <tcp_slowtmr+0x382>
 800de54:	4b63      	ldr	r3, [pc, #396]	; (800dfe4 <tcp_slowtmr+0x504>)
 800de56:	f240 4289 	movw	r2, #1161	; 0x489
 800de5a:	4963      	ldr	r1, [pc, #396]	; (800dfe8 <tcp_slowtmr+0x508>)
 800de5c:	4863      	ldr	r0, [pc, #396]	; (800dfec <tcp_slowtmr+0x50c>)
 800de5e:	f006 fab5 	bl	80143cc <iprintf>
        prev->next = pcb->next;
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	68da      	ldr	r2, [r3, #12]
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	60da      	str	r2, [r3, #12]
 800de6a:	e00f      	b.n	800de8c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800de6c:	4b5c      	ldr	r3, [pc, #368]	; (800dfe0 <tcp_slowtmr+0x500>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	429a      	cmp	r2, r3
 800de74:	d006      	beq.n	800de84 <tcp_slowtmr+0x3a4>
 800de76:	4b5b      	ldr	r3, [pc, #364]	; (800dfe4 <tcp_slowtmr+0x504>)
 800de78:	f240 428d 	movw	r2, #1165	; 0x48d
 800de7c:	495c      	ldr	r1, [pc, #368]	; (800dff0 <tcp_slowtmr+0x510>)
 800de7e:	485b      	ldr	r0, [pc, #364]	; (800dfec <tcp_slowtmr+0x50c>)
 800de80:	f006 faa4 	bl	80143cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	4a55      	ldr	r2, [pc, #340]	; (800dfe0 <tcp_slowtmr+0x500>)
 800de8a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800de8c:	7fbb      	ldrb	r3, [r7, #30]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d010      	beq.n	800deb4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800de9a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	1d1d      	adds	r5, r3, #4
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	8adb      	ldrh	r3, [r3, #22]
 800dea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dea6:	8b12      	ldrh	r2, [r2, #24]
 800dea8:	9201      	str	r2, [sp, #4]
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	462b      	mov	r3, r5
 800deae:	4622      	mov	r2, r4
 800deb0:	f004 f8d8 	bl	8012064 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	7d1b      	ldrb	r3, [r3, #20]
 800debe:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	2001      	movs	r0, #1
 800dece:	f7fe f91b 	bl	800c108 <memp_free>

      tcp_active_pcbs_changed = 0;
 800ded2:	4b48      	ldr	r3, [pc, #288]	; (800dff4 <tcp_slowtmr+0x514>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d004      	beq.n	800dee8 <tcp_slowtmr+0x408>
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f06f 010c 	mvn.w	r1, #12
 800dee4:	6938      	ldr	r0, [r7, #16]
 800dee6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dee8:	4b42      	ldr	r3, [pc, #264]	; (800dff4 <tcp_slowtmr+0x514>)
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d035      	beq.n	800df5c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800def0:	e606      	b.n	800db00 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	7edb      	ldrb	r3, [r3, #27]
 800df00:	3301      	adds	r3, #1
 800df02:	b2da      	uxtb	r2, r3
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	7eda      	ldrb	r2, [r3, #27]
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	7f1b      	ldrb	r3, [r3, #28]
 800df10:	429a      	cmp	r2, r3
 800df12:	d323      	bcc.n	800df5c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	2200      	movs	r2, #0
 800df18:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800df1a:	4b36      	ldr	r3, [pc, #216]	; (800dff4 <tcp_slowtmr+0x514>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00a      	beq.n	800df40 <tcp_slowtmr+0x460>
 800df2a:	6a3b      	ldr	r3, [r7, #32]
 800df2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df30:	6a3a      	ldr	r2, [r7, #32]
 800df32:	6912      	ldr	r2, [r2, #16]
 800df34:	6a39      	ldr	r1, [r7, #32]
 800df36:	4610      	mov	r0, r2
 800df38:	4798      	blx	r3
 800df3a:	4603      	mov	r3, r0
 800df3c:	777b      	strb	r3, [r7, #29]
 800df3e:	e001      	b.n	800df44 <tcp_slowtmr+0x464>
 800df40:	2300      	movs	r3, #0
 800df42:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800df44:	4b2b      	ldr	r3, [pc, #172]	; (800dff4 <tcp_slowtmr+0x514>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d000      	beq.n	800df4e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800df4c:	e5d8      	b.n	800db00 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800df4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800df56:	6a38      	ldr	r0, [r7, #32]
 800df58:	f003 fdfc 	bl	8011b54 <tcp_output>
  while (pcb != NULL) {
 800df5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f47f add4 	bne.w	800db0c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800df68:	4b23      	ldr	r3, [pc, #140]	; (800dff8 <tcp_slowtmr+0x518>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800df6e:	e068      	b.n	800e042 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	7d1b      	ldrb	r3, [r3, #20]
 800df74:	2b0a      	cmp	r3, #10
 800df76:	d006      	beq.n	800df86 <tcp_slowtmr+0x4a6>
 800df78:	4b1a      	ldr	r3, [pc, #104]	; (800dfe4 <tcp_slowtmr+0x504>)
 800df7a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800df7e:	491f      	ldr	r1, [pc, #124]	; (800dffc <tcp_slowtmr+0x51c>)
 800df80:	481a      	ldr	r0, [pc, #104]	; (800dfec <tcp_slowtmr+0x50c>)
 800df82:	f006 fa23 	bl	80143cc <iprintf>
    pcb_remove = 0;
 800df86:	2300      	movs	r3, #0
 800df88:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800df8a:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <tcp_slowtmr+0x4f4>)
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	2bf0      	cmp	r3, #240	; 0xf0
 800df96:	d902      	bls.n	800df9e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800df98:	7ffb      	ldrb	r3, [r7, #31]
 800df9a:	3301      	adds	r3, #1
 800df9c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800df9e:	7ffb      	ldrb	r3, [r7, #31]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d049      	beq.n	800e038 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dfa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfa6:	f000 fb91 	bl	800e6cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d029      	beq.n	800e004 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dfb0:	4b11      	ldr	r3, [pc, #68]	; (800dff8 <tcp_slowtmr+0x518>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d106      	bne.n	800dfc8 <tcp_slowtmr+0x4e8>
 800dfba:	4b0a      	ldr	r3, [pc, #40]	; (800dfe4 <tcp_slowtmr+0x504>)
 800dfbc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800dfc0:	490f      	ldr	r1, [pc, #60]	; (800e000 <tcp_slowtmr+0x520>)
 800dfc2:	480a      	ldr	r0, [pc, #40]	; (800dfec <tcp_slowtmr+0x50c>)
 800dfc4:	f006 fa02 	bl	80143cc <iprintf>
        prev->next = pcb->next;
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	68da      	ldr	r2, [r3, #12]
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	60da      	str	r2, [r3, #12]
 800dfd0:	e028      	b.n	800e024 <tcp_slowtmr+0x544>
 800dfd2:	bf00      	nop
 800dfd4:	2000773c 	.word	0x2000773c
 800dfd8:	000124f8 	.word	0x000124f8
 800dfdc:	10624dd3 	.word	0x10624dd3
 800dfe0:	20007738 	.word	0x20007738
 800dfe4:	08017068 	.word	0x08017068
 800dfe8:	080172a0 	.word	0x080172a0
 800dfec:	080170a4 	.word	0x080170a4
 800dff0:	080172cc 	.word	0x080172cc
 800dff4:	20007734 	.word	0x20007734
 800dff8:	20007748 	.word	0x20007748
 800dffc:	080172f8 	.word	0x080172f8
 800e000:	08017328 	.word	0x08017328
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e004:	4b12      	ldr	r3, [pc, #72]	; (800e050 <tcp_slowtmr+0x570>)
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d006      	beq.n	800e01c <tcp_slowtmr+0x53c>
 800e00e:	4b11      	ldr	r3, [pc, #68]	; (800e054 <tcp_slowtmr+0x574>)
 800e010:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800e014:	4910      	ldr	r1, [pc, #64]	; (800e058 <tcp_slowtmr+0x578>)
 800e016:	4811      	ldr	r0, [pc, #68]	; (800e05c <tcp_slowtmr+0x57c>)
 800e018:	f006 f9d8 	bl	80143cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	4a0b      	ldr	r2, [pc, #44]	; (800e050 <tcp_slowtmr+0x570>)
 800e022:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	2001      	movs	r0, #1
 800e032:	f7fe f869 	bl	800c108 <memp_free>
 800e036:	e004      	b.n	800e042 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	2b00      	cmp	r3, #0
 800e046:	d193      	bne.n	800df70 <tcp_slowtmr+0x490>
    }
  }
}
 800e048:	bf00      	nop
 800e04a:	3728      	adds	r7, #40	; 0x28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bdb0      	pop	{r4, r5, r7, pc}
 800e050:	20007748 	.word	0x20007748
 800e054:	08017068 	.word	0x08017068
 800e058:	08017350 	.word	0x08017350
 800e05c:	080170a4 	.word	0x080170a4

0800e060 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e066:	4b2d      	ldr	r3, [pc, #180]	; (800e11c <tcp_fasttmr+0xbc>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	4b2b      	ldr	r3, [pc, #172]	; (800e11c <tcp_fasttmr+0xbc>)
 800e070:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e072:	4b2b      	ldr	r3, [pc, #172]	; (800e120 <tcp_fasttmr+0xc0>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e078:	e048      	b.n	800e10c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7f5a      	ldrb	r2, [r3, #29]
 800e07e:	4b27      	ldr	r3, [pc, #156]	; (800e11c <tcp_fasttmr+0xbc>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	429a      	cmp	r2, r3
 800e084:	d03f      	beq.n	800e106 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e086:	4b25      	ldr	r3, [pc, #148]	; (800e11c <tcp_fasttmr+0xbc>)
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7e9b      	ldrb	r3, [r3, #26]
 800e092:	f003 0301 	and.w	r3, r3, #1
 800e096:	2b00      	cmp	r3, #0
 800e098:	d010      	beq.n	800e0bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	7e9b      	ldrb	r3, [r3, #26]
 800e09e:	f043 0302 	orr.w	r3, r3, #2
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f003 fd53 	bl	8011b54 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	7e9b      	ldrb	r3, [r3, #26]
 800e0b2:	f023 0303 	bic.w	r3, r3, #3
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	7e9b      	ldrb	r3, [r3, #26]
 800e0c0:	f003 0308 	and.w	r3, r3, #8
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d009      	beq.n	800e0dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7e9b      	ldrb	r3, [r3, #26]
 800e0cc:	f023 0308 	bic.w	r3, r3, #8
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff f956 	bl	800d388 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e0ea:	4b0e      	ldr	r3, [pc, #56]	; (800e124 <tcp_fasttmr+0xc4>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f819 	bl	800e128 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e0f6:	4b0b      	ldr	r3, [pc, #44]	; (800e124 <tcp_fasttmr+0xc4>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d000      	beq.n	800e100 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e0fe:	e7b8      	b.n	800e072 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	607b      	str	r3, [r7, #4]
 800e104:	e002      	b.n	800e10c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1b3      	bne.n	800e07a <tcp_fasttmr+0x1a>
    }
  }
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	20003f42 	.word	0x20003f42
 800e120:	20007738 	.word	0x20007738
 800e124:	20007734 	.word	0x20007734

0800e128 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e128:	b590      	push	{r4, r7, lr}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e134:	7b5b      	ldrb	r3, [r3, #13]
 800e136:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e13c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00b      	beq.n	800e166 <tcp_process_refused_data+0x3e>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6918      	ldr	r0, [r3, #16]
 800e158:	2300      	movs	r3, #0
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	47a0      	blx	r4
 800e160:	4603      	mov	r3, r0
 800e162:	73fb      	strb	r3, [r7, #15]
 800e164:	e007      	b.n	800e176 <tcp_process_refused_data+0x4e>
 800e166:	2300      	movs	r3, #0
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	6879      	ldr	r1, [r7, #4]
 800e16c:	2000      	movs	r0, #0
 800e16e:	f000 f88c 	bl	800e28a <tcp_recv_null>
 800e172:	4603      	mov	r3, r0
 800e174:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d12a      	bne.n	800e1d4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	f003 0320 	and.w	r3, r3, #32
 800e184:	2b00      	cmp	r3, #0
 800e186:	d033      	beq.n	800e1f0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e18c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e190:	d005      	beq.n	800e19e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e196:	3301      	adds	r3, #1
 800e198:	b29a      	uxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00b      	beq.n	800e1c0 <tcp_process_refused_data+0x98>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6918      	ldr	r0, [r3, #16]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	6879      	ldr	r1, [r7, #4]
 800e1b8:	47a0      	blx	r4
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]
 800e1be:	e001      	b.n	800e1c4 <tcp_process_refused_data+0x9c>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1c8:	f113 0f0d 	cmn.w	r3, #13
 800e1cc:	d110      	bne.n	800e1f0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800e1ce:	f06f 030c 	mvn.w	r3, #12
 800e1d2:	e00e      	b.n	800e1f2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800e1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1d8:	f113 0f0d 	cmn.w	r3, #13
 800e1dc:	d102      	bne.n	800e1e4 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e1de:	f06f 030c 	mvn.w	r3, #12
 800e1e2:	e006      	b.n	800e1f2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800e1ea:	f06f 0304 	mvn.w	r3, #4
 800e1ee:	e000      	b.n	800e1f2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800e1f0:	2300      	movs	r3, #0
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3714      	adds	r7, #20
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd90      	pop	{r4, r7, pc}

0800e1fa <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b084      	sub	sp, #16
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e202:	e007      	b.n	800e214 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f809 	bl	800e222 <tcp_seg_free>
    seg = next;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1f4      	bne.n	800e204 <tcp_segs_free+0xa>
  }
}
 800e21a:	bf00      	nop
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b082      	sub	sp, #8
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00c      	beq.n	800e24a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fe fcc5 	bl	800cbcc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	2003      	movs	r0, #3
 800e246:	f7fd ff5f 	bl	800c108 <memp_free>
  }
}
 800e24a:	bf00      	nop
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b084      	sub	sp, #16
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e25a:	2003      	movs	r0, #3
 800e25c:	f7fd ff02 	bl	800c064 <memp_malloc>
 800e260:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <tcp_seg_copy+0x1a>
    return NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	e00a      	b.n	800e282 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e26c:	2210      	movs	r2, #16
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f006 f898 	bl	80143a6 <memcpy>
  pbuf_ref(cseg->p);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe fd58 	bl	800cd30 <pbuf_ref>
  return cseg;
 800e280:	68fb      	ldr	r3, [r7, #12]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b084      	sub	sp, #16
 800e28e:	af00      	add	r7, sp, #0
 800e290:	60f8      	str	r0, [r7, #12]
 800e292:	60b9      	str	r1, [r7, #8]
 800e294:	607a      	str	r2, [r7, #4]
 800e296:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d009      	beq.n	800e2b2 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	891b      	ldrh	r3, [r3, #8]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	68b8      	ldr	r0, [r7, #8]
 800e2a6:	f7ff fb7d 	bl	800d9a4 <tcp_recved>
    pbuf_free(p);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fe fc8e 	bl	800cbcc <pbuf_free>
 800e2b0:	e008      	b.n	800e2c4 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800e2b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d104      	bne.n	800e2c4 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800e2ba:	68b8      	ldr	r0, [r7, #8]
 800e2bc:	f7ff f8ca 	bl	800d454 <tcp_close>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	e000      	b.n	800e2c6 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e2da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	db01      	blt.n	800e2e6 <tcp_kill_prio+0x16>
 800e2e2:	79fb      	ldrb	r3, [r7, #7]
 800e2e4:	e000      	b.n	800e2e8 <tcp_kill_prio+0x18>
 800e2e6:	237f      	movs	r3, #127	; 0x7f
 800e2e8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2f2:	4b16      	ldr	r3, [pc, #88]	; (800e34c <tcp_kill_prio+0x7c>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	617b      	str	r3, [r7, #20]
 800e2f8:	e01a      	b.n	800e330 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	7d5b      	ldrb	r3, [r3, #21]
 800e2fe:	7afa      	ldrb	r2, [r7, #11]
 800e300:	429a      	cmp	r2, r3
 800e302:	d312      	bcc.n	800e32a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e304:	4b12      	ldr	r3, [pc, #72]	; (800e350 <tcp_kill_prio+0x80>)
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	6a1b      	ldr	r3, [r3, #32]
 800e30c:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	429a      	cmp	r2, r3
 800e312:	d30a      	bcc.n	800e32a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800e314:	4b0e      	ldr	r3, [pc, #56]	; (800e350 <tcp_kill_prio+0x80>)
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	6a1b      	ldr	r3, [r3, #32]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	7d5b      	ldrb	r3, [r3, #21]
 800e328:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	617b      	str	r3, [r7, #20]
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1e1      	bne.n	800e2fa <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e33c:	6938      	ldr	r0, [r7, #16]
 800e33e:	f7ff f99b 	bl	800d678 <tcp_abort>
  }
}
 800e342:	bf00      	nop
 800e344:	3718      	adds	r7, #24
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	20007738 	.word	0x20007738
 800e350:	2000773c 	.word	0x2000773c

0800e354 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	4603      	mov	r3, r0
 800e35c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	2b08      	cmp	r3, #8
 800e362:	d009      	beq.n	800e378 <tcp_kill_state+0x24>
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	2b09      	cmp	r3, #9
 800e368:	d006      	beq.n	800e378 <tcp_kill_state+0x24>
 800e36a:	4b1a      	ldr	r3, [pc, #104]	; (800e3d4 <tcp_kill_state+0x80>)
 800e36c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e370:	4919      	ldr	r1, [pc, #100]	; (800e3d8 <tcp_kill_state+0x84>)
 800e372:	481a      	ldr	r0, [pc, #104]	; (800e3dc <tcp_kill_state+0x88>)
 800e374:	f006 f82a 	bl	80143cc <iprintf>

  inactivity = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e37c:	2300      	movs	r3, #0
 800e37e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e380:	4b17      	ldr	r3, [pc, #92]	; (800e3e0 <tcp_kill_state+0x8c>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	617b      	str	r3, [r7, #20]
 800e386:	e017      	b.n	800e3b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	7d1b      	ldrb	r3, [r3, #20]
 800e38c:	79fa      	ldrb	r2, [r7, #7]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d10f      	bne.n	800e3b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e392:	4b14      	ldr	r3, [pc, #80]	; (800e3e4 <tcp_kill_state+0x90>)
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	6a1b      	ldr	r3, [r3, #32]
 800e39a:	1ad2      	subs	r2, r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d307      	bcc.n	800e3b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e3a2:	4b10      	ldr	r3, [pc, #64]	; (800e3e4 <tcp_kill_state+0x90>)
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	6a1b      	ldr	r3, [r3, #32]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	617b      	str	r3, [r7, #20]
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1e4      	bne.n	800e388 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	6938      	ldr	r0, [r7, #16]
 800e3c8:	f7ff f8a4 	bl	800d514 <tcp_abandon>
  }
}
 800e3cc:	bf00      	nop
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	08017068 	.word	0x08017068
 800e3d8:	08017378 	.word	0x08017378
 800e3dc:	080170a4 	.word	0x080170a4
 800e3e0:	20007738 	.word	0x20007738
 800e3e4:	2000773c 	.word	0x2000773c

0800e3e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3f6:	4b12      	ldr	r3, [pc, #72]	; (800e440 <tcp_kill_timewait+0x58>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	60fb      	str	r3, [r7, #12]
 800e3fc:	e012      	b.n	800e424 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e3fe:	4b11      	ldr	r3, [pc, #68]	; (800e444 <tcp_kill_timewait+0x5c>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6a1b      	ldr	r3, [r3, #32]
 800e406:	1ad2      	subs	r2, r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d307      	bcc.n	800e41e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e40e:	4b0d      	ldr	r3, [pc, #52]	; (800e444 <tcp_kill_timewait+0x5c>)
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1e9      	bne.n	800e3fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e430:	68b8      	ldr	r0, [r7, #8]
 800e432:	f7ff f921 	bl	800d678 <tcp_abort>
  }
}
 800e436:	bf00      	nop
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20007748 	.word	0x20007748
 800e444:	2000773c 	.word	0x2000773c

0800e448 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e452:	2001      	movs	r0, #1
 800e454:	f7fd fe06 	bl	800c064 <memp_malloc>
 800e458:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d124      	bne.n	800e4aa <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e460:	f7ff ffc2 	bl	800e3e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e464:	2001      	movs	r0, #1
 800e466:	f7fd fdfd 	bl	800c064 <memp_malloc>
 800e46a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d11b      	bne.n	800e4aa <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e472:	2009      	movs	r0, #9
 800e474:	f7ff ff6e 	bl	800e354 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e478:	2001      	movs	r0, #1
 800e47a:	f7fd fdf3 	bl	800c064 <memp_malloc>
 800e47e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d111      	bne.n	800e4aa <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e486:	2008      	movs	r0, #8
 800e488:	f7ff ff64 	bl	800e354 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e48c:	2001      	movs	r0, #1
 800e48e:	f7fd fde9 	bl	800c064 <memp_malloc>
 800e492:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d107      	bne.n	800e4aa <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e49a:	79fb      	ldrb	r3, [r7, #7]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff ff17 	bl	800e2d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4a2:	2001      	movs	r0, #1
 800e4a4:	f7fd fdde 	bl	800c064 <memp_malloc>
 800e4a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d03f      	beq.n	800e530 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e4b0:	2298      	movs	r2, #152	; 0x98
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f005 ff81 	bl	80143bc <memset>
    pcb->prio = prio;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	79fa      	ldrb	r2, [r7, #7]
 800e4be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e4c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e4d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	22ff      	movs	r2, #255	; 0xff
 800e4de:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e4e6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2206      	movs	r2, #6
 800e4ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2206      	movs	r2, #6
 800e4f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4fc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2201      	movs	r2, #1
 800e502:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e506:	4b0d      	ldr	r3, [pc, #52]	; (800e53c <tcp_alloc+0xf4>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e50e:	4b0c      	ldr	r3, [pc, #48]	; (800e540 <tcp_alloc+0xf8>)
 800e510:	781a      	ldrb	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e51c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	4a08      	ldr	r2, [pc, #32]	; (800e544 <tcp_alloc+0xfc>)
 800e524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	4a07      	ldr	r2, [pc, #28]	; (800e548 <tcp_alloc+0x100>)
 800e52c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e530:	68fb      	ldr	r3, [r7, #12]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	2000773c 	.word	0x2000773c
 800e540:	20003f42 	.word	0x20003f42
 800e544:	0800e28b 	.word	0x0800e28b
 800e548:	006ddd00 	.word	0x006ddd00

0800e54c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	4603      	mov	r3, r0
 800e554:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e556:	2040      	movs	r0, #64	; 0x40
 800e558:	f7ff ff76 	bl	800e448 <tcp_alloc>
 800e55c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e55e:	68fb      	ldr	r3, [r7, #12]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d002      	beq.n	800e57e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	611a      	str	r2, [r3, #16]
  }
}
 800e57e:	bf00      	nop
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
	...

0800e58c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00e      	beq.n	800e5ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	7d1b      	ldrb	r3, [r3, #20]
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d106      	bne.n	800e5b2 <tcp_recv+0x26>
 800e5a4:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <tcp_recv+0x38>)
 800e5a6:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800e5aa:	4907      	ldr	r1, [pc, #28]	; (800e5c8 <tcp_recv+0x3c>)
 800e5ac:	4807      	ldr	r0, [pc, #28]	; (800e5cc <tcp_recv+0x40>)
 800e5ae:	f005 ff0d 	bl	80143cc <iprintf>
    pcb->recv = recv;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	683a      	ldr	r2, [r7, #0]
 800e5b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e5ba:	bf00      	nop
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	08017068 	.word	0x08017068
 800e5c8:	08017388 	.word	0x08017388
 800e5cc:	080170a4 	.word	0x080170a4

0800e5d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00d      	beq.n	800e5fc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7d1b      	ldrb	r3, [r3, #20]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d106      	bne.n	800e5f6 <tcp_sent+0x26>
 800e5e8:	4b06      	ldr	r3, [pc, #24]	; (800e604 <tcp_sent+0x34>)
 800e5ea:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800e5ee:	4906      	ldr	r1, [pc, #24]	; (800e608 <tcp_sent+0x38>)
 800e5f0:	4806      	ldr	r0, [pc, #24]	; (800e60c <tcp_sent+0x3c>)
 800e5f2:	f005 feeb 	bl	80143cc <iprintf>
    pcb->sent = sent;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	08017068 	.word	0x08017068
 800e608:	080173b0 	.word	0x080173b0
 800e60c:	080170a4 	.word	0x080170a4

0800e610 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00e      	beq.n	800e63e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7d1b      	ldrb	r3, [r3, #20]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d106      	bne.n	800e636 <tcp_err+0x26>
 800e628:	4b07      	ldr	r3, [pc, #28]	; (800e648 <tcp_err+0x38>)
 800e62a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800e62e:	4907      	ldr	r1, [pc, #28]	; (800e64c <tcp_err+0x3c>)
 800e630:	4807      	ldr	r0, [pc, #28]	; (800e650 <tcp_err+0x40>)
 800e632:	f005 fecb 	bl	80143cc <iprintf>
    pcb->errf = err;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	683a      	ldr	r2, [r7, #0]
 800e63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800e63e:	bf00      	nop
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	08017068 	.word	0x08017068
 800e64c:	080173d8 	.word	0x080173d8
 800e650:	080170a4 	.word	0x080170a4

0800e654 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d008      	beq.n	800e676 <tcp_accept+0x22>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	7d1b      	ldrb	r3, [r3, #20]
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d104      	bne.n	800e676 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	683a      	ldr	r2, [r7, #0]
 800e674:	619a      	str	r2, [r3, #24]
  }
}
 800e676:	bf00      	nop
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
	...

0800e684 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	4613      	mov	r3, r2
 800e690:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	7d1b      	ldrb	r3, [r3, #20]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d106      	bne.n	800e6a8 <tcp_poll+0x24>
 800e69a:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <tcp_poll+0x3c>)
 800e69c:	f240 7203 	movw	r2, #1795	; 0x703
 800e6a0:	4908      	ldr	r1, [pc, #32]	; (800e6c4 <tcp_poll+0x40>)
 800e6a2:	4809      	ldr	r0, [pc, #36]	; (800e6c8 <tcp_poll+0x44>)
 800e6a4:	f005 fe92 	bl	80143cc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	79fa      	ldrb	r2, [r7, #7]
 800e6b4:	771a      	strb	r2, [r3, #28]
}
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	08017068 	.word	0x08017068
 800e6c4:	08017400 	.word	0x08017400
 800e6c8:	080170a4 	.word	0x080170a4

0800e6cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7d1b      	ldrb	r3, [r3, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d034      	beq.n	800e746 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e6e0:	2b0a      	cmp	r3, #10
 800e6e2:	d030      	beq.n	800e746 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d02c      	beq.n	800e746 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d007      	beq.n	800e704 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fe fa67 	bl	800cbcc <pbuf_free>
      pcb->refused_data = NULL;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e708:	4618      	mov	r0, r3
 800e70a:	f7ff fd76 	bl	800e1fa <tcp_segs_free>
    pcb->ooseq = NULL;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e71a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff fd6a 	bl	800e1fa <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fd65 	bl	800e1fa <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	669a      	str	r2, [r3, #104]	; 0x68
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e746:	bf00      	nop
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
	...

0800e750 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	429a      	cmp	r2, r3
 800e762:	d105      	bne.n	800e770 <tcp_pcb_remove+0x20>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	68da      	ldr	r2, [r3, #12]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	e013      	b.n	800e798 <tcp_pcb_remove+0x48>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	e00c      	b.n	800e792 <tcp_pcb_remove+0x42>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	68da      	ldr	r2, [r3, #12]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d104      	bne.n	800e78c <tcp_pcb_remove+0x3c>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	68da      	ldr	r2, [r3, #12]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	60da      	str	r2, [r3, #12]
 800e78a:	e005      	b.n	800e798 <tcp_pcb_remove+0x48>
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	68db      	ldr	r3, [r3, #12]
 800e790:	60fb      	str	r3, [r7, #12]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1ef      	bne.n	800e778 <tcp_pcb_remove+0x28>
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	2200      	movs	r2, #0
 800e79c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e79e:	6838      	ldr	r0, [r7, #0]
 800e7a0:	f7ff ff94 	bl	800e6cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	7d1b      	ldrb	r3, [r3, #20]
 800e7a8:	2b0a      	cmp	r3, #10
 800e7aa:	d013      	beq.n	800e7d4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d00f      	beq.n	800e7d4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	7e9b      	ldrb	r3, [r3, #26]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d009      	beq.n	800e7d4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	7e9b      	ldrb	r3, [r3, #26]
 800e7c4:	f043 0302 	orr.w	r3, r3, #2
 800e7c8:	b2da      	uxtb	r2, r3
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e7ce:	6838      	ldr	r0, [r7, #0]
 800e7d0:	f003 f9c0 	bl	8011b54 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	7d1b      	ldrb	r3, [r3, #20]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d020      	beq.n	800e81e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d006      	beq.n	800e7f2 <tcp_pcb_remove+0xa2>
 800e7e4:	4b13      	ldr	r3, [pc, #76]	; (800e834 <tcp_pcb_remove+0xe4>)
 800e7e6:	f240 7253 	movw	r2, #1875	; 0x753
 800e7ea:	4913      	ldr	r1, [pc, #76]	; (800e838 <tcp_pcb_remove+0xe8>)
 800e7ec:	4813      	ldr	r0, [pc, #76]	; (800e83c <tcp_pcb_remove+0xec>)
 800e7ee:	f005 fded 	bl	80143cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d006      	beq.n	800e808 <tcp_pcb_remove+0xb8>
 800e7fa:	4b0e      	ldr	r3, [pc, #56]	; (800e834 <tcp_pcb_remove+0xe4>)
 800e7fc:	f240 7254 	movw	r2, #1876	; 0x754
 800e800:	490f      	ldr	r1, [pc, #60]	; (800e840 <tcp_pcb_remove+0xf0>)
 800e802:	480e      	ldr	r0, [pc, #56]	; (800e83c <tcp_pcb_remove+0xec>)
 800e804:	f005 fde2 	bl	80143cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d006      	beq.n	800e81e <tcp_pcb_remove+0xce>
 800e810:	4b08      	ldr	r3, [pc, #32]	; (800e834 <tcp_pcb_remove+0xe4>)
 800e812:	f240 7256 	movw	r2, #1878	; 0x756
 800e816:	490b      	ldr	r1, [pc, #44]	; (800e844 <tcp_pcb_remove+0xf4>)
 800e818:	4808      	ldr	r0, [pc, #32]	; (800e83c <tcp_pcb_remove+0xec>)
 800e81a:	f005 fdd7 	bl	80143cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	2200      	movs	r2, #0
 800e822:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2200      	movs	r2, #0
 800e828:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	08017068 	.word	0x08017068
 800e838:	08017420 	.word	0x08017420
 800e83c:	080170a4 	.word	0x080170a4
 800e840:	08017438 	.word	0x08017438
 800e844:	08017454 	.word	0x08017454

0800e848 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e850:	4b07      	ldr	r3, [pc, #28]	; (800e870 <tcp_next_iss+0x28>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	4b07      	ldr	r3, [pc, #28]	; (800e874 <tcp_next_iss+0x2c>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4413      	add	r3, r2
 800e85a:	4a05      	ldr	r2, [pc, #20]	; (800e870 <tcp_next_iss+0x28>)
 800e85c:	6013      	str	r3, [r2, #0]
  return iss;
 800e85e:	4b04      	ldr	r3, [pc, #16]	; (800e870 <tcp_next_iss+0x28>)
 800e860:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e862:	4618      	mov	r0, r3
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000010 	.word	0x20000010
 800e874:	2000773c 	.word	0x2000773c

0800e878 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	6039      	str	r1, [r7, #0]
 800e882:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e884:	6838      	ldr	r0, [r7, #0]
 800e886:	f7fb ff9f 	bl	800a7c8 <ip4_route>
 800e88a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e892:	88fb      	ldrh	r3, [r7, #6]
 800e894:	e010      	b.n	800e8b8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e89a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e89c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d008      	beq.n	800e8b6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e8a4:	897b      	ldrh	r3, [r7, #10]
 800e8a6:	3b28      	subs	r3, #40	; 0x28
 800e8a8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e8aa:	893a      	ldrh	r2, [r7, #8]
 800e8ac:	88fb      	ldrh	r3, [r7, #6]
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	bf28      	it	cs
 800e8b2:	4613      	movcs	r3, r2
 800e8b4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e8b6:	88fb      	ldrh	r3, [r7, #6]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e8ce:	e011      	b.n	800e8f4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d108      	bne.n	800e8ee <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f7fe fec8 	bl	800d678 <tcp_abort>
      pcb = next;
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	e002      	b.n	800e8f4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1ea      	bne.n	800e8d0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
	...

0800e904 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d02c      	beq.n	800e96e <tcp_netif_ip_addr_changed+0x6a>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d028      	beq.n	800e96e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e91c:	4b16      	ldr	r3, [pc, #88]	; (800e978 <tcp_netif_ip_addr_changed+0x74>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4619      	mov	r1, r3
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff ffcc 	bl	800e8c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e928:	4b14      	ldr	r3, [pc, #80]	; (800e97c <tcp_netif_ip_addr_changed+0x78>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4619      	mov	r1, r3
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7ff ffc6 	bl	800e8c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d019      	beq.n	800e96e <tcp_netif_ip_addr_changed+0x6a>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d015      	beq.n	800e96e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e942:	4b0f      	ldr	r3, [pc, #60]	; (800e980 <tcp_netif_ip_addr_changed+0x7c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	60fb      	str	r3, [r7, #12]
 800e948:	e00e      	b.n	800e968 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d103      	bne.n	800e964 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	60fb      	str	r3, [r7, #12]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1ed      	bne.n	800e94a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e96e:	bf00      	nop
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20007738 	.word	0x20007738
 800e97c:	20007744 	.word	0x20007744
 800e980:	20007740 	.word	0x20007740

0800e984 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e984:	b590      	push	{r4, r7, lr}
 800e986:	b08b      	sub	sp, #44	; 0x2c
 800e988:	af02      	add	r7, sp, #8
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	4a82      	ldr	r2, [pc, #520]	; (800eb9c <tcp_input+0x218>)
 800e994:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	895b      	ldrh	r3, [r3, #10]
 800e99a:	2b13      	cmp	r3, #19
 800e99c:	f240 8388 	bls.w	800f0b0 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9a0:	4b7f      	ldr	r3, [pc, #508]	; (800eba0 <tcp_input+0x21c>)
 800e9a2:	695a      	ldr	r2, [r3, #20]
 800e9a4:	4b7e      	ldr	r3, [pc, #504]	; (800eba0 <tcp_input+0x21c>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	f7fc f9a0 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f040 837f 	bne.w	800f0b6 <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e9b8:	4b79      	ldr	r3, [pc, #484]	; (800eba0 <tcp_input+0x21c>)
 800e9ba:	695b      	ldr	r3, [r3, #20]
 800e9bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e9c0:	2be0      	cmp	r3, #224	; 0xe0
 800e9c2:	f000 8378 	beq.w	800f0b6 <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e9c6:	4b75      	ldr	r3, [pc, #468]	; (800eb9c <tcp_input+0x218>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	899b      	ldrh	r3, [r3, #12]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f8 ff58 	bl	8007884 <lwip_htons>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	0b1b      	lsrs	r3, r3, #12
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e9e0:	7cbb      	ldrb	r3, [r7, #18]
 800e9e2:	2b13      	cmp	r3, #19
 800e9e4:	f240 8367 	bls.w	800f0b6 <tcp_input+0x732>
 800e9e8:	7cbb      	ldrb	r3, [r7, #18]
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	891b      	ldrh	r3, [r3, #8]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	f200 8360 	bhi.w	800f0b6 <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e9f6:	7cbb      	ldrb	r3, [r7, #18]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	3b14      	subs	r3, #20
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	4b69      	ldr	r3, [pc, #420]	; (800eba4 <tcp_input+0x220>)
 800ea00:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ea02:	4b69      	ldr	r3, [pc, #420]	; (800eba8 <tcp_input+0x224>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	895a      	ldrh	r2, [r3, #10]
 800ea0c:	7cbb      	ldrb	r3, [r7, #18]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d30d      	bcc.n	800ea30 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ea14:	4b63      	ldr	r3, [pc, #396]	; (800eba4 <tcp_input+0x220>)
 800ea16:	881a      	ldrh	r2, [r3, #0]
 800ea18:	4b64      	ldr	r3, [pc, #400]	; (800ebac <tcp_input+0x228>)
 800ea1a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800ea1c:	7cbb      	ldrb	r3, [r7, #18]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	425b      	negs	r3, r3
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	b21b      	sxth	r3, r3
 800ea26:	4619      	mov	r1, r3
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7fe f8ab 	bl	800cb84 <pbuf_header>
 800ea2e:	e055      	b.n	800eadc <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d105      	bne.n	800ea44 <tcp_input+0xc0>
 800ea38:	4b5d      	ldr	r3, [pc, #372]	; (800ebb0 <tcp_input+0x22c>)
 800ea3a:	22b2      	movs	r2, #178	; 0xb2
 800ea3c:	495d      	ldr	r1, [pc, #372]	; (800ebb4 <tcp_input+0x230>)
 800ea3e:	485e      	ldr	r0, [pc, #376]	; (800ebb8 <tcp_input+0x234>)
 800ea40:	f005 fcc4 	bl	80143cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800ea44:	f06f 0113 	mvn.w	r1, #19
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fe f89b 	bl	800cb84 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	895a      	ldrh	r2, [r3, #10]
 800ea52:	4b56      	ldr	r3, [pc, #344]	; (800ebac <tcp_input+0x228>)
 800ea54:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800ea56:	4b53      	ldr	r3, [pc, #332]	; (800eba4 <tcp_input+0x220>)
 800ea58:	881a      	ldrh	r2, [r3, #0]
 800ea5a:	4b54      	ldr	r3, [pc, #336]	; (800ebac <tcp_input+0x228>)
 800ea5c:	881b      	ldrh	r3, [r3, #0]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800ea62:	4b52      	ldr	r3, [pc, #328]	; (800ebac <tcp_input+0x228>)
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	425b      	negs	r3, r3
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	b21b      	sxth	r3, r3
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7fe f888 	bl	800cb84 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	895b      	ldrh	r3, [r3, #10]
 800ea7a:	8a3a      	ldrh	r2, [r7, #16]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	f200 8319 	bhi.w	800f0b4 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	4a47      	ldr	r2, [pc, #284]	; (800eba8 <tcp_input+0x224>)
 800ea8a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	8a3b      	ldrh	r3, [r7, #16]
 800ea92:	425b      	negs	r3, r3
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	b21b      	sxth	r3, r3
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4610      	mov	r0, r2
 800ea9c:	f7fe f872 	bl	800cb84 <pbuf_header>
    p->tot_len -= opt2len;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	891a      	ldrh	r2, [r3, #8]
 800eaa4:	8a3b      	ldrh	r3, [r7, #16]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	895b      	ldrh	r3, [r3, #10]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d005      	beq.n	800eac2 <tcp_input+0x13e>
 800eab6:	4b3e      	ldr	r3, [pc, #248]	; (800ebb0 <tcp_input+0x22c>)
 800eab8:	22cf      	movs	r2, #207	; 0xcf
 800eaba:	4940      	ldr	r1, [pc, #256]	; (800ebbc <tcp_input+0x238>)
 800eabc:	483e      	ldr	r0, [pc, #248]	; (800ebb8 <tcp_input+0x234>)
 800eabe:	f005 fc85 	bl	80143cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	891a      	ldrh	r2, [r3, #8]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	891b      	ldrh	r3, [r3, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d005      	beq.n	800eadc <tcp_input+0x158>
 800ead0:	4b37      	ldr	r3, [pc, #220]	; (800ebb0 <tcp_input+0x22c>)
 800ead2:	22d0      	movs	r2, #208	; 0xd0
 800ead4:	493a      	ldr	r1, [pc, #232]	; (800ebc0 <tcp_input+0x23c>)
 800ead6:	4838      	ldr	r0, [pc, #224]	; (800ebb8 <tcp_input+0x234>)
 800ead8:	f005 fc78 	bl	80143cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800eadc:	4b2f      	ldr	r3, [pc, #188]	; (800eb9c <tcp_input+0x218>)
 800eade:	681c      	ldr	r4, [r3, #0]
 800eae0:	4b2e      	ldr	r3, [pc, #184]	; (800eb9c <tcp_input+0x218>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7f8 fecb 	bl	8007884 <lwip_htons>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800eaf2:	4b2a      	ldr	r3, [pc, #168]	; (800eb9c <tcp_input+0x218>)
 800eaf4:	681c      	ldr	r4, [r3, #0]
 800eaf6:	4b29      	ldr	r3, [pc, #164]	; (800eb9c <tcp_input+0x218>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f8 fec0 	bl	8007884 <lwip_htons>
 800eb04:	4603      	mov	r3, r0
 800eb06:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800eb08:	4b24      	ldr	r3, [pc, #144]	; (800eb9c <tcp_input+0x218>)
 800eb0a:	681c      	ldr	r4, [r3, #0]
 800eb0c:	4b23      	ldr	r3, [pc, #140]	; (800eb9c <tcp_input+0x218>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7f8 fec4 	bl	80078a0 <lwip_htonl>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	6063      	str	r3, [r4, #4]
 800eb1c:	6863      	ldr	r3, [r4, #4]
 800eb1e:	4a29      	ldr	r2, [pc, #164]	; (800ebc4 <tcp_input+0x240>)
 800eb20:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800eb22:	4b1e      	ldr	r3, [pc, #120]	; (800eb9c <tcp_input+0x218>)
 800eb24:	681c      	ldr	r4, [r3, #0]
 800eb26:	4b1d      	ldr	r3, [pc, #116]	; (800eb9c <tcp_input+0x218>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f8 feb7 	bl	80078a0 <lwip_htonl>
 800eb32:	4603      	mov	r3, r0
 800eb34:	60a3      	str	r3, [r4, #8]
 800eb36:	68a3      	ldr	r3, [r4, #8]
 800eb38:	4a23      	ldr	r2, [pc, #140]	; (800ebc8 <tcp_input+0x244>)
 800eb3a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800eb3c:	4b17      	ldr	r3, [pc, #92]	; (800eb9c <tcp_input+0x218>)
 800eb3e:	681c      	ldr	r4, [r3, #0]
 800eb40:	4b16      	ldr	r3, [pc, #88]	; (800eb9c <tcp_input+0x218>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	89db      	ldrh	r3, [r3, #14]
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7f8 fe9b 	bl	8007884 <lwip_htons>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800eb52:	4b12      	ldr	r3, [pc, #72]	; (800eb9c <tcp_input+0x218>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	899b      	ldrh	r3, [r3, #12]
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f8 fe92 	bl	8007884 <lwip_htons>
 800eb60:	4603      	mov	r3, r0
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	4b18      	ldr	r3, [pc, #96]	; (800ebcc <tcp_input+0x248>)
 800eb6c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	891a      	ldrh	r2, [r3, #8]
 800eb72:	4b16      	ldr	r3, [pc, #88]	; (800ebcc <tcp_input+0x248>)
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	f003 0303 	and.w	r3, r3, #3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bf14      	ite	ne
 800eb7e:	2301      	movne	r3, #1
 800eb80:	2300      	moveq	r3, #0
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	4413      	add	r3, r2
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	4b11      	ldr	r3, [pc, #68]	; (800ebd0 <tcp_input+0x24c>)
 800eb8c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <tcp_input+0x250>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	61fb      	str	r3, [r7, #28]
 800eb98:	e082      	b.n	800eca0 <tcp_input+0x31c>
 800eb9a:	bf00      	nop
 800eb9c:	20003f54 	.word	0x20003f54
 800eba0:	20003fe0 	.word	0x20003fe0
 800eba4:	20003f58 	.word	0x20003f58
 800eba8:	20003f5c 	.word	0x20003f5c
 800ebac:	20003f5a 	.word	0x20003f5a
 800ebb0:	0801746c 	.word	0x0801746c
 800ebb4:	080174a0 	.word	0x080174a0
 800ebb8:	080174b0 	.word	0x080174b0
 800ebbc:	080174d8 	.word	0x080174d8
 800ebc0:	080174e4 	.word	0x080174e4
 800ebc4:	20003f64 	.word	0x20003f64
 800ebc8:	20003f68 	.word	0x20003f68
 800ebcc:	20003f70 	.word	0x20003f70
 800ebd0:	20003f6e 	.word	0x20003f6e
 800ebd4:	20007738 	.word	0x20007738
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	7d1b      	ldrb	r3, [r3, #20]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d105      	bne.n	800ebec <tcp_input+0x268>
 800ebe0:	4b8f      	ldr	r3, [pc, #572]	; (800ee20 <tcp_input+0x49c>)
 800ebe2:	22e2      	movs	r2, #226	; 0xe2
 800ebe4:	498f      	ldr	r1, [pc, #572]	; (800ee24 <tcp_input+0x4a0>)
 800ebe6:	4890      	ldr	r0, [pc, #576]	; (800ee28 <tcp_input+0x4a4>)
 800ebe8:	f005 fbf0 	bl	80143cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	7d1b      	ldrb	r3, [r3, #20]
 800ebf0:	2b0a      	cmp	r3, #10
 800ebf2:	d105      	bne.n	800ec00 <tcp_input+0x27c>
 800ebf4:	4b8a      	ldr	r3, [pc, #552]	; (800ee20 <tcp_input+0x49c>)
 800ebf6:	22e3      	movs	r2, #227	; 0xe3
 800ebf8:	498c      	ldr	r1, [pc, #560]	; (800ee2c <tcp_input+0x4a8>)
 800ebfa:	488b      	ldr	r0, [pc, #556]	; (800ee28 <tcp_input+0x4a4>)
 800ebfc:	f005 fbe6 	bl	80143cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	7d1b      	ldrb	r3, [r3, #20]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d105      	bne.n	800ec14 <tcp_input+0x290>
 800ec08:	4b85      	ldr	r3, [pc, #532]	; (800ee20 <tcp_input+0x49c>)
 800ec0a:	22e4      	movs	r2, #228	; 0xe4
 800ec0c:	4988      	ldr	r1, [pc, #544]	; (800ee30 <tcp_input+0x4ac>)
 800ec0e:	4886      	ldr	r0, [pc, #536]	; (800ee28 <tcp_input+0x4a4>)
 800ec10:	f005 fbdc 	bl	80143cc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	8b1a      	ldrh	r2, [r3, #24]
 800ec18:	4b86      	ldr	r3, [pc, #536]	; (800ee34 <tcp_input+0x4b0>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	881b      	ldrh	r3, [r3, #0]
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d138      	bne.n	800ec96 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	8ada      	ldrh	r2, [r3, #22]
 800ec28:	4b82      	ldr	r3, [pc, #520]	; (800ee34 <tcp_input+0x4b0>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	885b      	ldrh	r3, [r3, #2]
 800ec2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d130      	bne.n	800ec96 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	685a      	ldr	r2, [r3, #4]
 800ec38:	4b7f      	ldr	r3, [pc, #508]	; (800ee38 <tcp_input+0x4b4>)
 800ec3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d12a      	bne.n	800ec96 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	4b7c      	ldr	r3, [pc, #496]	; (800ee38 <tcp_input+0x4b4>)
 800ec46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d124      	bne.n	800ec96 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	68da      	ldr	r2, [r3, #12]
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d105      	bne.n	800ec62 <tcp_input+0x2de>
 800ec56:	4b72      	ldr	r3, [pc, #456]	; (800ee20 <tcp_input+0x49c>)
 800ec58:	22ec      	movs	r2, #236	; 0xec
 800ec5a:	4978      	ldr	r1, [pc, #480]	; (800ee3c <tcp_input+0x4b8>)
 800ec5c:	4872      	ldr	r0, [pc, #456]	; (800ee28 <tcp_input+0x4a4>)
 800ec5e:	f005 fbb5 	bl	80143cc <iprintf>
      if (prev != NULL) {
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00a      	beq.n	800ec7e <tcp_input+0x2fa>
        prev->next = pcb->next;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	68da      	ldr	r2, [r3, #12]
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ec70:	4b73      	ldr	r3, [pc, #460]	; (800ee40 <tcp_input+0x4bc>)
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ec78:	4a71      	ldr	r2, [pc, #452]	; (800ee40 <tcp_input+0x4bc>)
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	68da      	ldr	r2, [r3, #12]
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d10f      	bne.n	800eca8 <tcp_input+0x324>
 800ec88:	4b65      	ldr	r3, [pc, #404]	; (800ee20 <tcp_input+0x49c>)
 800ec8a:	22f4      	movs	r2, #244	; 0xf4
 800ec8c:	496d      	ldr	r1, [pc, #436]	; (800ee44 <tcp_input+0x4c0>)
 800ec8e:	4866      	ldr	r0, [pc, #408]	; (800ee28 <tcp_input+0x4a4>)
 800ec90:	f005 fb9c 	bl	80143cc <iprintf>
      break;
 800ec94:	e008      	b.n	800eca8 <tcp_input+0x324>
    }
    prev = pcb;
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	61fb      	str	r3, [r7, #28]
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d198      	bne.n	800ebd8 <tcp_input+0x254>
 800eca6:	e000      	b.n	800ecaa <tcp_input+0x326>
      break;
 800eca8:	bf00      	nop
  }

  if (pcb == NULL) {
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d173      	bne.n	800ed98 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecb0:	4b65      	ldr	r3, [pc, #404]	; (800ee48 <tcp_input+0x4c4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	61fb      	str	r3, [r7, #28]
 800ecb6:	e02f      	b.n	800ed18 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	7d1b      	ldrb	r3, [r3, #20]
 800ecbc:	2b0a      	cmp	r3, #10
 800ecbe:	d005      	beq.n	800eccc <tcp_input+0x348>
 800ecc0:	4b57      	ldr	r3, [pc, #348]	; (800ee20 <tcp_input+0x49c>)
 800ecc2:	22fe      	movs	r2, #254	; 0xfe
 800ecc4:	4961      	ldr	r1, [pc, #388]	; (800ee4c <tcp_input+0x4c8>)
 800ecc6:	4858      	ldr	r0, [pc, #352]	; (800ee28 <tcp_input+0x4a4>)
 800ecc8:	f005 fb80 	bl	80143cc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	8b1a      	ldrh	r2, [r3, #24]
 800ecd0:	4b58      	ldr	r3, [pc, #352]	; (800ee34 <tcp_input+0x4b0>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d11a      	bne.n	800ed12 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	8ada      	ldrh	r2, [r3, #22]
 800ece0:	4b54      	ldr	r3, [pc, #336]	; (800ee34 <tcp_input+0x4b0>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	885b      	ldrh	r3, [r3, #2]
 800ece6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d112      	bne.n	800ed12 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	685a      	ldr	r2, [r3, #4]
 800ecf0:	4b51      	ldr	r3, [pc, #324]	; (800ee38 <tcp_input+0x4b4>)
 800ecf2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d10c      	bne.n	800ed12 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	4b4e      	ldr	r3, [pc, #312]	; (800ee38 <tcp_input+0x4b4>)
 800ecfe:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d106      	bne.n	800ed12 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800ed04:	69f8      	ldr	r0, [r7, #28]
 800ed06:	f000 fb11 	bl	800f32c <tcp_timewait_input>
        pbuf_free(p);
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7fd ff5e 	bl	800cbcc <pbuf_free>
        return;
 800ed10:	e1d6      	b.n	800f0c0 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	61fb      	str	r3, [r7, #28]
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1cc      	bne.n	800ecb8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed22:	4b4b      	ldr	r3, [pc, #300]	; (800ee50 <tcp_input+0x4cc>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	617b      	str	r3, [r7, #20]
 800ed28:	e019      	b.n	800ed5e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	8ada      	ldrh	r2, [r3, #22]
 800ed2e:	4b41      	ldr	r3, [pc, #260]	; (800ee34 <tcp_input+0x4b0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	885b      	ldrh	r3, [r3, #2]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d10c      	bne.n	800ed54 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	4b3e      	ldr	r3, [pc, #248]	; (800ee38 <tcp_input+0x4b4>)
 800ed40:	695b      	ldr	r3, [r3, #20]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d00f      	beq.n	800ed66 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00d      	beq.n	800ed68 <tcp_input+0x3e4>
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d009      	beq.n	800ed68 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	617b      	str	r3, [r7, #20]
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1e2      	bne.n	800ed2a <tcp_input+0x3a6>
 800ed64:	e000      	b.n	800ed68 <tcp_input+0x3e4>
            break;
 800ed66:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d014      	beq.n	800ed98 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00a      	beq.n	800ed8a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	68da      	ldr	r2, [r3, #12]
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ed7c:	4b34      	ldr	r3, [pc, #208]	; (800ee50 <tcp_input+0x4cc>)
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ed84:	4a32      	ldr	r2, [pc, #200]	; (800ee50 <tcp_input+0x4cc>)
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800ed8a:	6978      	ldr	r0, [r7, #20]
 800ed8c:	f000 f9ec 	bl	800f168 <tcp_listen_input>
      pbuf_free(p);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7fd ff1b 	bl	800cbcc <pbuf_free>
      return;
 800ed96:	e193      	b.n	800f0c0 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 8162 	beq.w	800f064 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800eda0:	4b2c      	ldr	r3, [pc, #176]	; (800ee54 <tcp_input+0x4d0>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	891a      	ldrh	r2, [r3, #8]
 800edaa:	4b2a      	ldr	r3, [pc, #168]	; (800ee54 <tcp_input+0x4d0>)
 800edac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800edae:	4a29      	ldr	r2, [pc, #164]	; (800ee54 <tcp_input+0x4d0>)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800edb4:	4b1f      	ldr	r3, [pc, #124]	; (800ee34 <tcp_input+0x4b0>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a26      	ldr	r2, [pc, #152]	; (800ee54 <tcp_input+0x4d0>)
 800edba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800edbc:	4b26      	ldr	r3, [pc, #152]	; (800ee58 <tcp_input+0x4d4>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800edc2:	4b26      	ldr	r3, [pc, #152]	; (800ee5c <tcp_input+0x4d8>)
 800edc4:	2200      	movs	r2, #0
 800edc6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800edc8:	4b25      	ldr	r3, [pc, #148]	; (800ee60 <tcp_input+0x4dc>)
 800edca:	2200      	movs	r2, #0
 800edcc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800edce:	4b25      	ldr	r3, [pc, #148]	; (800ee64 <tcp_input+0x4e0>)
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	f003 0308 	and.w	r3, r3, #8
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d006      	beq.n	800ede8 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	7b5b      	ldrb	r3, [r3, #13]
 800edde:	f043 0301 	orr.w	r3, r3, #1
 800ede2:	b2da      	uxtb	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edec:	2b00      	cmp	r3, #0
 800edee:	d03d      	beq.n	800ee6c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800edf0:	69f8      	ldr	r0, [r7, #28]
 800edf2:	f7ff f999 	bl	800e128 <tcp_process_refused_data>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f113 0f0d 	cmn.w	r3, #13
 800edfc:	d007      	beq.n	800ee0e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d032      	beq.n	800ee6c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ee06:	4b18      	ldr	r3, [pc, #96]	; (800ee68 <tcp_input+0x4e4>)
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d02e      	beq.n	800ee6c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f040 8108 	bne.w	800f028 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ee18:	69f8      	ldr	r0, [r7, #28]
 800ee1a:	f002 fe3f 	bl	8011a9c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ee1e:	e103      	b.n	800f028 <tcp_input+0x6a4>
 800ee20:	0801746c 	.word	0x0801746c
 800ee24:	08017504 	.word	0x08017504
 800ee28:	080174b0 	.word	0x080174b0
 800ee2c:	0801752c 	.word	0x0801752c
 800ee30:	08017558 	.word	0x08017558
 800ee34:	20003f54 	.word	0x20003f54
 800ee38:	20003fe0 	.word	0x20003fe0
 800ee3c:	08017580 	.word	0x08017580
 800ee40:	20007738 	.word	0x20007738
 800ee44:	080175ac 	.word	0x080175ac
 800ee48:	20007748 	.word	0x20007748
 800ee4c:	080175d8 	.word	0x080175d8
 800ee50:	20007740 	.word	0x20007740
 800ee54:	20003f44 	.word	0x20003f44
 800ee58:	20003f74 	.word	0x20003f74
 800ee5c:	20003f71 	.word	0x20003f71
 800ee60:	20003f6c 	.word	0x20003f6c
 800ee64:	20003f70 	.word	0x20003f70
 800ee68:	20003f6e 	.word	0x20003f6e
      }
    }
    tcp_input_pcb = pcb;
 800ee6c:	4a96      	ldr	r2, [pc, #600]	; (800f0c8 <tcp_input+0x744>)
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ee72:	69f8      	ldr	r0, [r7, #28]
 800ee74:	f000 fac2 	bl	800f3fc <tcp_process>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ee7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee80:	f113 0f0d 	cmn.w	r3, #13
 800ee84:	f000 80db 	beq.w	800f03e <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 800ee88:	4b90      	ldr	r3, [pc, #576]	; (800f0cc <tcp_input+0x748>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0308 	and.w	r3, r3, #8
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d016      	beq.n	800eec2 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d008      	beq.n	800eeb0 <tcp_input+0x52c>
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eea4:	69fa      	ldr	r2, [r7, #28]
 800eea6:	6912      	ldr	r2, [r2, #16]
 800eea8:	f06f 010d 	mvn.w	r1, #13
 800eeac:	4610      	mov	r0, r2
 800eeae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eeb0:	69f9      	ldr	r1, [r7, #28]
 800eeb2:	4887      	ldr	r0, [pc, #540]	; (800f0d0 <tcp_input+0x74c>)
 800eeb4:	f7ff fc4c 	bl	800e750 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800eeb8:	69f9      	ldr	r1, [r7, #28]
 800eeba:	2001      	movs	r0, #1
 800eebc:	f7fd f924 	bl	800c108 <memp_free>
 800eec0:	e0bd      	b.n	800f03e <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eec6:	4b83      	ldr	r3, [pc, #524]	; (800f0d4 <tcp_input+0x750>)
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d01b      	beq.n	800ef06 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eece:	4b81      	ldr	r3, [pc, #516]	; (800f0d4 <tcp_input+0x750>)
 800eed0:	881b      	ldrh	r3, [r3, #0]
 800eed2:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d009      	beq.n	800eef0 <tcp_input+0x56c>
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eee0:	69fa      	ldr	r2, [r7, #28]
 800eee2:	6910      	ldr	r0, [r2, #16]
 800eee4:	89fa      	ldrh	r2, [r7, #14]
 800eee6:	69f9      	ldr	r1, [r7, #28]
 800eee8:	4798      	blx	r3
 800eeea:	4603      	mov	r3, r0
 800eeec:	74fb      	strb	r3, [r7, #19]
 800eeee:	e001      	b.n	800eef4 <tcp_input+0x570>
 800eef0:	2300      	movs	r3, #0
 800eef2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eef8:	f113 0f0d 	cmn.w	r3, #13
 800eefc:	f000 8096 	beq.w	800f02c <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ef00:	4b74      	ldr	r3, [pc, #464]	; (800f0d4 <tcp_input+0x750>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ef06:	69f8      	ldr	r0, [r7, #28]
 800ef08:	f000 f8fc 	bl	800f104 <tcp_input_delayed_close>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f040 808e 	bne.w	800f030 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ef14:	4b70      	ldr	r3, [pc, #448]	; (800f0d8 <tcp_input+0x754>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d041      	beq.n	800efa0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d006      	beq.n	800ef32 <tcp_input+0x5ae>
 800ef24:	4b6d      	ldr	r3, [pc, #436]	; (800f0dc <tcp_input+0x758>)
 800ef26:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800ef2a:	496d      	ldr	r1, [pc, #436]	; (800f0e0 <tcp_input+0x75c>)
 800ef2c:	486d      	ldr	r0, [pc, #436]	; (800f0e4 <tcp_input+0x760>)
 800ef2e:	f005 fa4d 	bl	80143cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	7e9b      	ldrb	r3, [r3, #26]
 800ef36:	f003 0310 	and.w	r3, r3, #16
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d008      	beq.n	800ef50 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ef3e:	4b66      	ldr	r3, [pc, #408]	; (800f0d8 <tcp_input+0x754>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd fe42 	bl	800cbcc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ef48:	69f8      	ldr	r0, [r7, #28]
 800ef4a:	f7fe fb95 	bl	800d678 <tcp_abort>
            goto aborted;
 800ef4e:	e076      	b.n	800f03e <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00c      	beq.n	800ef74 <tcp_input+0x5f0>
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	6918      	ldr	r0, [r3, #16]
 800ef64:	4b5c      	ldr	r3, [pc, #368]	; (800f0d8 <tcp_input+0x754>)
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	2300      	movs	r3, #0
 800ef6a:	69f9      	ldr	r1, [r7, #28]
 800ef6c:	47a0      	blx	r4
 800ef6e:	4603      	mov	r3, r0
 800ef70:	74fb      	strb	r3, [r7, #19]
 800ef72:	e008      	b.n	800ef86 <tcp_input+0x602>
 800ef74:	4b58      	ldr	r3, [pc, #352]	; (800f0d8 <tcp_input+0x754>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	69f9      	ldr	r1, [r7, #28]
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	f7ff f984 	bl	800e28a <tcp_recv_null>
 800ef82:	4603      	mov	r3, r0
 800ef84:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ef86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef8a:	f113 0f0d 	cmn.w	r3, #13
 800ef8e:	d051      	beq.n	800f034 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ef90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d003      	beq.n	800efa0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ef98:	4b4f      	ldr	r3, [pc, #316]	; (800f0d8 <tcp_input+0x754>)
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800efa0:	4b4a      	ldr	r3, [pc, #296]	; (800f0cc <tcp_input+0x748>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	f003 0320 	and.w	r3, r3, #32
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d030      	beq.n	800f00e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d009      	beq.n	800efc8 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb8:	69fa      	ldr	r2, [r7, #28]
 800efba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800efbc:	7b52      	ldrb	r2, [r2, #13]
 800efbe:	f042 0220 	orr.w	r2, r2, #32
 800efc2:	b2d2      	uxtb	r2, r2
 800efc4:	735a      	strb	r2, [r3, #13]
 800efc6:	e022      	b.n	800f00e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efcc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efd0:	d005      	beq.n	800efde <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efd6:	3301      	adds	r3, #1
 800efd8:	b29a      	uxth	r2, r3
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00b      	beq.n	800f000 <tcp_input+0x67c>
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	6918      	ldr	r0, [r3, #16]
 800eff2:	2300      	movs	r3, #0
 800eff4:	2200      	movs	r2, #0
 800eff6:	69f9      	ldr	r1, [r7, #28]
 800eff8:	47a0      	blx	r4
 800effa:	4603      	mov	r3, r0
 800effc:	74fb      	strb	r3, [r7, #19]
 800effe:	e001      	b.n	800f004 <tcp_input+0x680>
 800f000:	2300      	movs	r3, #0
 800f002:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f004:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f008:	f113 0f0d 	cmn.w	r3, #13
 800f00c:	d014      	beq.n	800f038 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f00e:	4b2e      	ldr	r3, [pc, #184]	; (800f0c8 <tcp_input+0x744>)
 800f010:	2200      	movs	r2, #0
 800f012:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f014:	69f8      	ldr	r0, [r7, #28]
 800f016:	f000 f875 	bl	800f104 <tcp_input_delayed_close>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10d      	bne.n	800f03c <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f020:	69f8      	ldr	r0, [r7, #28]
 800f022:	f002 fd97 	bl	8011b54 <tcp_output>
 800f026:	e00a      	b.n	800f03e <tcp_input+0x6ba>
        goto aborted;
 800f028:	bf00      	nop
 800f02a:	e008      	b.n	800f03e <tcp_input+0x6ba>
              goto aborted;
 800f02c:	bf00      	nop
 800f02e:	e006      	b.n	800f03e <tcp_input+0x6ba>
          goto aborted;
 800f030:	bf00      	nop
 800f032:	e004      	b.n	800f03e <tcp_input+0x6ba>
            goto aborted;
 800f034:	bf00      	nop
 800f036:	e002      	b.n	800f03e <tcp_input+0x6ba>
              goto aborted;
 800f038:	bf00      	nop
 800f03a:	e000      	b.n	800f03e <tcp_input+0x6ba>
          goto aborted;
 800f03c:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800f03e:	4b22      	ldr	r3, [pc, #136]	; (800f0c8 <tcp_input+0x744>)
 800f040:	2200      	movs	r2, #0
 800f042:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f044:	4b24      	ldr	r3, [pc, #144]	; (800f0d8 <tcp_input+0x754>)
 800f046:	2200      	movs	r2, #0
 800f048:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800f04a:	4b27      	ldr	r3, [pc, #156]	; (800f0e8 <tcp_input+0x764>)
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d035      	beq.n	800f0be <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 800f052:	4b25      	ldr	r3, [pc, #148]	; (800f0e8 <tcp_input+0x764>)
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	4618      	mov	r0, r3
 800f058:	f7fd fdb8 	bl	800cbcc <pbuf_free>
      inseg.p = NULL;
 800f05c:	4b22      	ldr	r3, [pc, #136]	; (800f0e8 <tcp_input+0x764>)
 800f05e:	2200      	movs	r2, #0
 800f060:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f062:	e02c      	b.n	800f0be <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f064:	4b21      	ldr	r3, [pc, #132]	; (800f0ec <tcp_input+0x768>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	899b      	ldrh	r3, [r3, #12]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7f8 fc09 	bl	8007884 <lwip_htons>
 800f072:	4603      	mov	r3, r0
 800f074:	f003 0304 	and.w	r3, r3, #4
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d115      	bne.n	800f0a8 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f07c:	4b1c      	ldr	r3, [pc, #112]	; (800f0f0 <tcp_input+0x76c>)
 800f07e:	6818      	ldr	r0, [r3, #0]
 800f080:	4b1c      	ldr	r3, [pc, #112]	; (800f0f4 <tcp_input+0x770>)
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	461a      	mov	r2, r3
 800f086:	4b1c      	ldr	r3, [pc, #112]	; (800f0f8 <tcp_input+0x774>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f08c:	4b17      	ldr	r3, [pc, #92]	; (800f0ec <tcp_input+0x768>)
 800f08e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f090:	885b      	ldrh	r3, [r3, #2]
 800f092:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f094:	4a15      	ldr	r2, [pc, #84]	; (800f0ec <tcp_input+0x768>)
 800f096:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f098:	8812      	ldrh	r2, [r2, #0]
 800f09a:	b292      	uxth	r2, r2
 800f09c:	9201      	str	r2, [sp, #4]
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	4b16      	ldr	r3, [pc, #88]	; (800f0fc <tcp_input+0x778>)
 800f0a2:	4a17      	ldr	r2, [pc, #92]	; (800f100 <tcp_input+0x77c>)
 800f0a4:	f002 ffde 	bl	8012064 <tcp_rst>
    pbuf_free(p);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7fd fd8f 	bl	800cbcc <pbuf_free>
  return;
 800f0ae:	e006      	b.n	800f0be <tcp_input+0x73a>
    goto dropped;
 800f0b0:	bf00      	nop
 800f0b2:	e000      	b.n	800f0b6 <tcp_input+0x732>
      goto dropped;
 800f0b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7fd fd88 	bl	800cbcc <pbuf_free>
 800f0bc:	e000      	b.n	800f0c0 <tcp_input+0x73c>
  return;
 800f0be:	bf00      	nop
}
 800f0c0:	3724      	adds	r7, #36	; 0x24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd90      	pop	{r4, r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	2000774c 	.word	0x2000774c
 800f0cc:	20003f71 	.word	0x20003f71
 800f0d0:	20007738 	.word	0x20007738
 800f0d4:	20003f6c 	.word	0x20003f6c
 800f0d8:	20003f74 	.word	0x20003f74
 800f0dc:	0801746c 	.word	0x0801746c
 800f0e0:	08017608 	.word	0x08017608
 800f0e4:	080174b0 	.word	0x080174b0
 800f0e8:	20003f44 	.word	0x20003f44
 800f0ec:	20003f54 	.word	0x20003f54
 800f0f0:	20003f68 	.word	0x20003f68
 800f0f4:	20003f6e 	.word	0x20003f6e
 800f0f8:	20003f64 	.word	0x20003f64
 800f0fc:	20003ff0 	.word	0x20003ff0
 800f100:	20003ff4 	.word	0x20003ff4

0800f104 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800f10c:	4b14      	ldr	r3, [pc, #80]	; (800f160 <tcp_input_delayed_close+0x5c>)
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	f003 0310 	and.w	r3, r3, #16
 800f114:	2b00      	cmp	r3, #0
 800f116:	d01d      	beq.n	800f154 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	7e9b      	ldrb	r3, [r3, #26]
 800f11c:	f003 0310 	and.w	r3, r3, #16
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10d      	bne.n	800f140 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d008      	beq.n	800f140 <tcp_input_delayed_close+0x3c>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	6912      	ldr	r2, [r2, #16]
 800f138:	f06f 010e 	mvn.w	r1, #14
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f140:	6879      	ldr	r1, [r7, #4]
 800f142:	4808      	ldr	r0, [pc, #32]	; (800f164 <tcp_input_delayed_close+0x60>)
 800f144:	f7ff fb04 	bl	800e750 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800f148:	6879      	ldr	r1, [r7, #4]
 800f14a:	2001      	movs	r0, #1
 800f14c:	f7fc ffdc 	bl	800c108 <memp_free>
    return 1;
 800f150:	2301      	movs	r3, #1
 800f152:	e000      	b.n	800f156 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20003f71 	.word	0x20003f71
 800f164:	20007738 	.word	0x20007738

0800f168 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b088      	sub	sp, #32
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f170:	4b64      	ldr	r3, [pc, #400]	; (800f304 <tcp_listen_input+0x19c>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f040 80bc 	bne.w	800f2f6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f17e:	4b61      	ldr	r3, [pc, #388]	; (800f304 <tcp_listen_input+0x19c>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	f003 0310 	and.w	r3, r3, #16
 800f186:	2b00      	cmp	r3, #0
 800f188:	d016      	beq.n	800f1b8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f18a:	4b5f      	ldr	r3, [pc, #380]	; (800f308 <tcp_listen_input+0x1a0>)
 800f18c:	6818      	ldr	r0, [r3, #0]
 800f18e:	4b5f      	ldr	r3, [pc, #380]	; (800f30c <tcp_listen_input+0x1a4>)
 800f190:	881b      	ldrh	r3, [r3, #0]
 800f192:	461a      	mov	r2, r3
 800f194:	4b5e      	ldr	r3, [pc, #376]	; (800f310 <tcp_listen_input+0x1a8>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f19a:	4b5e      	ldr	r3, [pc, #376]	; (800f314 <tcp_listen_input+0x1ac>)
 800f19c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f19e:	885b      	ldrh	r3, [r3, #2]
 800f1a0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f1a2:	4a5c      	ldr	r2, [pc, #368]	; (800f314 <tcp_listen_input+0x1ac>)
 800f1a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f1a6:	8812      	ldrh	r2, [r2, #0]
 800f1a8:	b292      	uxth	r2, r2
 800f1aa:	9201      	str	r2, [sp, #4]
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	4b5a      	ldr	r3, [pc, #360]	; (800f318 <tcp_listen_input+0x1b0>)
 800f1b0:	4a5a      	ldr	r2, [pc, #360]	; (800f31c <tcp_listen_input+0x1b4>)
 800f1b2:	f002 ff57 	bl	8012064 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f1b6:	e0a0      	b.n	800f2fa <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800f1b8:	4b52      	ldr	r3, [pc, #328]	; (800f304 <tcp_listen_input+0x19c>)
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	f003 0302 	and.w	r3, r3, #2
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f000 809a 	beq.w	800f2fa <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	7d5b      	ldrb	r3, [r3, #21]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff f93c 	bl	800e448 <tcp_alloc>
 800f1d0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d111      	bne.n	800f1fc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00a      	beq.n	800f1f6 <tcp_listen_input+0x8e>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	6910      	ldr	r0, [r2, #16]
 800f1e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	4798      	blx	r3
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	74fb      	strb	r3, [r7, #19]
      return;
 800f1f4:	e082      	b.n	800f2fc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f1f6:	23f0      	movs	r3, #240	; 0xf0
 800f1f8:	74fb      	strb	r3, [r7, #19]
      return;
 800f1fa:	e07f      	b.n	800f2fc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f1fc:	4b48      	ldr	r3, [pc, #288]	; (800f320 <tcp_listen_input+0x1b8>)
 800f1fe:	695a      	ldr	r2, [r3, #20]
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f204:	4b46      	ldr	r3, [pc, #280]	; (800f320 <tcp_listen_input+0x1b8>)
 800f206:	691a      	ldr	r2, [r3, #16]
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	8ada      	ldrh	r2, [r3, #22]
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f214:	4b3f      	ldr	r3, [pc, #252]	; (800f314 <tcp_listen_input+0x1ac>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	b29a      	uxth	r2, r3
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	2203      	movs	r2, #3
 800f224:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f226:	4b3a      	ldr	r3, [pc, #232]	; (800f310 <tcp_listen_input+0x1a8>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	1c5a      	adds	r2, r3, #1
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f238:	6978      	ldr	r0, [r7, #20]
 800f23a:	f7ff fb05 	bl	800e848 <tcp_next_iss>
 800f23e:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f258:	4b2d      	ldr	r3, [pc, #180]	; (800f310 <tcp_listen_input+0x1a8>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	1e5a      	subs	r2, r3, #1
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	691a      	ldr	r2, [r3, #16]
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7a1b      	ldrb	r3, [r3, #8]
 800f274:	f003 030c 	and.w	r3, r3, #12
 800f278:	b2da      	uxtb	r2, r3
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f27e:	4b29      	ldr	r3, [pc, #164]	; (800f324 <tcp_listen_input+0x1bc>)
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	60da      	str	r2, [r3, #12]
 800f286:	4a27      	ldr	r2, [pc, #156]	; (800f324 <tcp_listen_input+0x1bc>)
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	f003 f93a 	bl	8012504 <tcp_timer_needed>
 800f290:	4b25      	ldr	r3, [pc, #148]	; (800f328 <tcp_listen_input+0x1c0>)
 800f292:	2201      	movs	r2, #1
 800f294:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f296:	6978      	ldr	r0, [r7, #20]
 800f298:	f001 fd16 	bl	8010cc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f29c:	4b1d      	ldr	r3, [pc, #116]	; (800f314 <tcp_listen_input+0x1ac>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	89db      	ldrh	r3, [r3, #14]
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	3304      	adds	r3, #4
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	f7ff fad9 	bl	800e878 <tcp_eff_send_mss_impl>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f2ce:	2112      	movs	r1, #18
 800f2d0:	6978      	ldr	r0, [r7, #20]
 800f2d2:	f002 fae5 	bl	80118a0 <tcp_enqueue_flags>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800f2da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d004      	beq.n	800f2ec <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	6978      	ldr	r0, [r7, #20]
 800f2e6:	f7fe f915 	bl	800d514 <tcp_abandon>
      return;
 800f2ea:	e007      	b.n	800f2fc <tcp_listen_input+0x194>
    tcp_output(npcb);
 800f2ec:	6978      	ldr	r0, [r7, #20]
 800f2ee:	f002 fc31 	bl	8011b54 <tcp_output>
  return;
 800f2f2:	bf00      	nop
 800f2f4:	e001      	b.n	800f2fa <tcp_listen_input+0x192>
    return;
 800f2f6:	bf00      	nop
 800f2f8:	e000      	b.n	800f2fc <tcp_listen_input+0x194>
  return;
 800f2fa:	bf00      	nop
}
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	20003f70 	.word	0x20003f70
 800f308:	20003f68 	.word	0x20003f68
 800f30c:	20003f6e 	.word	0x20003f6e
 800f310:	20003f64 	.word	0x20003f64
 800f314:	20003f54 	.word	0x20003f54
 800f318:	20003ff0 	.word	0x20003ff0
 800f31c:	20003ff4 	.word	0x20003ff4
 800f320:	20003fe0 	.word	0x20003fe0
 800f324:	20007738 	.word	0x20007738
 800f328:	20007734 	.word	0x20007734

0800f32c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af02      	add	r7, sp, #8
 800f332:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f334:	4b29      	ldr	r3, [pc, #164]	; (800f3dc <tcp_timewait_input+0xb0>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	f003 0304 	and.w	r3, r3, #4
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d147      	bne.n	800f3d0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f340:	4b26      	ldr	r3, [pc, #152]	; (800f3dc <tcp_timewait_input+0xb0>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f003 0302 	and.w	r3, r3, #2
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d027      	beq.n	800f39c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f34c:	4b24      	ldr	r3, [pc, #144]	; (800f3e0 <tcp_timewait_input+0xb4>)
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	db2a      	blt.n	800f3b0 <tcp_timewait_input+0x84>
 800f35a:	4b21      	ldr	r3, [pc, #132]	; (800f3e0 <tcp_timewait_input+0xb4>)
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f366:	440b      	add	r3, r1
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	dc20      	bgt.n	800f3b0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f36e:	4b1d      	ldr	r3, [pc, #116]	; (800f3e4 <tcp_timewait_input+0xb8>)
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	4b1d      	ldr	r3, [pc, #116]	; (800f3e8 <tcp_timewait_input+0xbc>)
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	4b19      	ldr	r3, [pc, #100]	; (800f3e0 <tcp_timewait_input+0xb4>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f37e:	4b1b      	ldr	r3, [pc, #108]	; (800f3ec <tcp_timewait_input+0xc0>)
 800f380:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f382:	885b      	ldrh	r3, [r3, #2]
 800f384:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f386:	4a19      	ldr	r2, [pc, #100]	; (800f3ec <tcp_timewait_input+0xc0>)
 800f388:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38a:	8812      	ldrh	r2, [r2, #0]
 800f38c:	b292      	uxth	r2, r2
 800f38e:	9201      	str	r2, [sp, #4]
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	4b17      	ldr	r3, [pc, #92]	; (800f3f0 <tcp_timewait_input+0xc4>)
 800f394:	4a17      	ldr	r2, [pc, #92]	; (800f3f4 <tcp_timewait_input+0xc8>)
 800f396:	f002 fe65 	bl	8012064 <tcp_rst>
      return;
 800f39a:	e01c      	b.n	800f3d6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800f39c:	4b0f      	ldr	r3, [pc, #60]	; (800f3dc <tcp_timewait_input+0xb0>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d003      	beq.n	800f3b0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f3a8:	4b13      	ldr	r3, [pc, #76]	; (800f3f8 <tcp_timewait_input+0xcc>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f3b0:	4b0d      	ldr	r3, [pc, #52]	; (800f3e8 <tcp_timewait_input+0xbc>)
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00d      	beq.n	800f3d4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	7e9b      	ldrb	r3, [r3, #26]
 800f3bc:	f043 0302 	orr.w	r3, r3, #2
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f002 fbc4 	bl	8011b54 <tcp_output>
  }
  return;
 800f3cc:	bf00      	nop
 800f3ce:	e001      	b.n	800f3d4 <tcp_timewait_input+0xa8>
    return;
 800f3d0:	bf00      	nop
 800f3d2:	e000      	b.n	800f3d6 <tcp_timewait_input+0xaa>
  return;
 800f3d4:	bf00      	nop
}
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	20003f70 	.word	0x20003f70
 800f3e0:	20003f64 	.word	0x20003f64
 800f3e4:	20003f68 	.word	0x20003f68
 800f3e8:	20003f6e 	.word	0x20003f6e
 800f3ec:	20003f54 	.word	0x20003f54
 800f3f0:	20003ff0 	.word	0x20003ff0
 800f3f4:	20003ff4 	.word	0x20003ff4
 800f3f8:	2000773c 	.word	0x2000773c

0800f3fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	; 0x28
 800f400:	af02      	add	r7, sp, #8
 800f402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f408:	2300      	movs	r3, #0
 800f40a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f40c:	4ba4      	ldr	r3, [pc, #656]	; (800f6a0 <tcp_process+0x2a4>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b00      	cmp	r3, #0
 800f416:	d04e      	beq.n	800f4b6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	7d1b      	ldrb	r3, [r3, #20]
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d108      	bne.n	800f432 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f424:	4b9f      	ldr	r3, [pc, #636]	; (800f6a4 <tcp_process+0x2a8>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d123      	bne.n	800f474 <tcp_process+0x78>
        acceptable = 1;
 800f42c:	2301      	movs	r3, #1
 800f42e:	76fb      	strb	r3, [r7, #27]
 800f430:	e020      	b.n	800f474 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f436:	4b9c      	ldr	r3, [pc, #624]	; (800f6a8 <tcp_process+0x2ac>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d102      	bne.n	800f444 <tcp_process+0x48>
        acceptable = 1;
 800f43e:	2301      	movs	r3, #1
 800f440:	76fb      	strb	r3, [r7, #27]
 800f442:	e017      	b.n	800f474 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f444:	4b98      	ldr	r3, [pc, #608]	; (800f6a8 <tcp_process+0x2ac>)
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	db10      	blt.n	800f474 <tcp_process+0x78>
 800f452:	4b95      	ldr	r3, [pc, #596]	; (800f6a8 <tcp_process+0x2ac>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f45e:	440b      	add	r3, r1
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	dc06      	bgt.n	800f474 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	7e9b      	ldrb	r3, [r3, #26]
 800f46a:	f043 0302 	orr.w	r3, r3, #2
 800f46e:	b2da      	uxtb	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f474:	7efb      	ldrb	r3, [r7, #27]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d01b      	beq.n	800f4b2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	7d1b      	ldrb	r3, [r3, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d106      	bne.n	800f490 <tcp_process+0x94>
 800f482:	4b8a      	ldr	r3, [pc, #552]	; (800f6ac <tcp_process+0x2b0>)
 800f484:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f488:	4989      	ldr	r1, [pc, #548]	; (800f6b0 <tcp_process+0x2b4>)
 800f48a:	488a      	ldr	r0, [pc, #552]	; (800f6b4 <tcp_process+0x2b8>)
 800f48c:	f004 ff9e 	bl	80143cc <iprintf>
      recv_flags |= TF_RESET;
 800f490:	4b89      	ldr	r3, [pc, #548]	; (800f6b8 <tcp_process+0x2bc>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	f043 0308 	orr.w	r3, r3, #8
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	4b87      	ldr	r3, [pc, #540]	; (800f6b8 <tcp_process+0x2bc>)
 800f49c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	7e9b      	ldrb	r3, [r3, #26]
 800f4a2:	f023 0301 	bic.w	r3, r3, #1
 800f4a6:	b2da      	uxtb	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800f4ac:	f06f 030d 	mvn.w	r3, #13
 800f4b0:	e34d      	b.n	800fb4e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e34b      	b.n	800fb4e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f4b6:	4b7a      	ldr	r3, [pc, #488]	; (800f6a0 <tcp_process+0x2a4>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	f003 0302 	and.w	r3, r3, #2
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d010      	beq.n	800f4e4 <tcp_process+0xe8>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	7d1b      	ldrb	r3, [r3, #20]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d00c      	beq.n	800f4e4 <tcp_process+0xe8>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	7d1b      	ldrb	r3, [r3, #20]
 800f4ce:	2b03      	cmp	r3, #3
 800f4d0:	d008      	beq.n	800f4e4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	7e9b      	ldrb	r3, [r3, #26]
 800f4d6:	f043 0302 	orr.w	r3, r3, #2
 800f4da:	b2da      	uxtb	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	e334      	b.n	800fb4e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	7e9b      	ldrb	r3, [r3, #26]
 800f4e8:	f003 0310 	and.w	r3, r3, #16
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d103      	bne.n	800f4f8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f4f0:	4b72      	ldr	r3, [pc, #456]	; (800f6bc <tcp_process+0x2c0>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f001 fbe1 	bl	8010cc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	7d1b      	ldrb	r3, [r3, #20]
 800f50a:	3b02      	subs	r3, #2
 800f50c:	2b07      	cmp	r3, #7
 800f50e:	f200 830e 	bhi.w	800fb2e <tcp_process+0x732>
 800f512:	a201      	add	r2, pc, #4	; (adr r2, 800f518 <tcp_process+0x11c>)
 800f514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f518:	0800f539 	.word	0x0800f539
 800f51c:	0800f731 	.word	0x0800f731
 800f520:	0800f889 	.word	0x0800f889
 800f524:	0800f8b3 	.word	0x0800f8b3
 800f528:	0800f9dd 	.word	0x0800f9dd
 800f52c:	0800f889 	.word	0x0800f889
 800f530:	0800fa69 	.word	0x0800fa69
 800f534:	0800faf9 	.word	0x0800faf9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f538:	4b59      	ldr	r3, [pc, #356]	; (800f6a0 <tcp_process+0x2a4>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f003 0310 	and.w	r3, r3, #16
 800f540:	2b00      	cmp	r3, #0
 800f542:	f000 80cb 	beq.w	800f6dc <tcp_process+0x2e0>
 800f546:	4b56      	ldr	r3, [pc, #344]	; (800f6a0 <tcp_process+0x2a4>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 0302 	and.w	r3, r3, #2
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 80c4 	beq.w	800f6dc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f558:	1c5a      	adds	r2, r3, #1
 800f55a:	4b52      	ldr	r3, [pc, #328]	; (800f6a4 <tcp_process+0x2a8>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	429a      	cmp	r2, r3
 800f560:	f040 80bc 	bne.w	800f6dc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800f564:	4b50      	ldr	r3, [pc, #320]	; (800f6a8 <tcp_process+0x2ac>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800f576:	4b4b      	ldr	r3, [pc, #300]	; (800f6a4 <tcp_process+0x2a8>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800f57e:	4b50      	ldr	r3, [pc, #320]	; (800f6c0 <tcp_process+0x2c4>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	89db      	ldrh	r3, [r3, #14]
 800f584:	b29a      	uxth	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f598:	4b43      	ldr	r3, [pc, #268]	; (800f6a8 <tcp_process+0x2ac>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	1e5a      	subs	r2, r3, #1
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2204      	movs	r2, #4
 800f5a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	4610      	mov	r0, r2
 800f5b4:	f7ff f960 	bl	800e878 <tcp_eff_send_mss_impl>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	bf38      	it	cc
 800f5ce:	461a      	movcc	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	bf28      	it	cs
 800f5da:	4613      	movcs	r3, r2
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d106      	bne.n	800f5fc <tcp_process+0x200>
 800f5ee:	4b2f      	ldr	r3, [pc, #188]	; (800f6ac <tcp_process+0x2b0>)
 800f5f0:	f240 321a 	movw	r2, #794	; 0x31a
 800f5f4:	4933      	ldr	r1, [pc, #204]	; (800f6c4 <tcp_process+0x2c8>)
 800f5f6:	482f      	ldr	r0, [pc, #188]	; (800f6b4 <tcp_process+0x2b8>)
 800f5f8:	f004 fee8 	bl	80143cc <iprintf>
      --pcb->snd_queuelen;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f602:	3b01      	subs	r3, #1
 800f604:	b29a      	uxth	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f610:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d111      	bne.n	800f63c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f61c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d106      	bne.n	800f632 <tcp_process+0x236>
 800f624:	4b21      	ldr	r3, [pc, #132]	; (800f6ac <tcp_process+0x2b0>)
 800f626:	f240 3222 	movw	r2, #802	; 0x322
 800f62a:	4927      	ldr	r1, [pc, #156]	; (800f6c8 <tcp_process+0x2cc>)
 800f62c:	4821      	ldr	r0, [pc, #132]	; (800f6b4 <tcp_process+0x2b8>)
 800f62e:	f004 fecd 	bl	80143cc <iprintf>
        pcb->unsent = rseg->next;
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	669a      	str	r2, [r3, #104]	; 0x68
 800f63a:	e003      	b.n	800f644 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f644:	69f8      	ldr	r0, [r7, #28]
 800f646:	f7fe fdec 	bl	800e222 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d104      	bne.n	800f65c <tcp_process+0x260>
        pcb->rtime = -1;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f658:	861a      	strh	r2, [r3, #48]	; 0x30
 800f65a:	e006      	b.n	800f66a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00a      	beq.n	800f68a <tcp_process+0x28e>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	6910      	ldr	r0, [r2, #16]
 800f67e:	2200      	movs	r2, #0
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	4798      	blx	r3
 800f684:	4603      	mov	r3, r0
 800f686:	76bb      	strb	r3, [r7, #26]
 800f688:	e001      	b.n	800f68e <tcp_process+0x292>
 800f68a:	2300      	movs	r3, #0
 800f68c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f68e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f692:	f113 0f0d 	cmn.w	r3, #13
 800f696:	d119      	bne.n	800f6cc <tcp_process+0x2d0>
        return ERR_ABRT;
 800f698:	f06f 030c 	mvn.w	r3, #12
 800f69c:	e257      	b.n	800fb4e <tcp_process+0x752>
 800f69e:	bf00      	nop
 800f6a0:	20003f70 	.word	0x20003f70
 800f6a4:	20003f68 	.word	0x20003f68
 800f6a8:	20003f64 	.word	0x20003f64
 800f6ac:	0801746c 	.word	0x0801746c
 800f6b0:	08017624 	.word	0x08017624
 800f6b4:	080174b0 	.word	0x080174b0
 800f6b8:	20003f71 	.word	0x20003f71
 800f6bc:	2000773c 	.word	0x2000773c
 800f6c0:	20003f54 	.word	0x20003f54
 800f6c4:	08017644 	.word	0x08017644
 800f6c8:	0801765c 	.word	0x0801765c
      }
      tcp_ack_now(pcb);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7e9b      	ldrb	r3, [r3, #26]
 800f6d0:	f043 0302 	orr.w	r3, r3, #2
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f6da:	e22a      	b.n	800fb32 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f6dc:	4b9f      	ldr	r3, [pc, #636]	; (800f95c <tcp_process+0x560>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f003 0310 	and.w	r3, r3, #16
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	f000 8224 	beq.w	800fb32 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6ea:	4b9d      	ldr	r3, [pc, #628]	; (800f960 <tcp_process+0x564>)
 800f6ec:	6818      	ldr	r0, [r3, #0]
 800f6ee:	4b9d      	ldr	r3, [pc, #628]	; (800f964 <tcp_process+0x568>)
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	4b9c      	ldr	r3, [pc, #624]	; (800f968 <tcp_process+0x56c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6fa:	4b9c      	ldr	r3, [pc, #624]	; (800f96c <tcp_process+0x570>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6fe:	885b      	ldrh	r3, [r3, #2]
 800f700:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f702:	4a9a      	ldr	r2, [pc, #616]	; (800f96c <tcp_process+0x570>)
 800f704:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f706:	8812      	ldrh	r2, [r2, #0]
 800f708:	b292      	uxth	r2, r2
 800f70a:	9201      	str	r2, [sp, #4]
 800f70c:	9300      	str	r3, [sp, #0]
 800f70e:	4b98      	ldr	r3, [pc, #608]	; (800f970 <tcp_process+0x574>)
 800f710:	4a98      	ldr	r2, [pc, #608]	; (800f974 <tcp_process+0x578>)
 800f712:	f002 fca7 	bl	8012064 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f71c:	2b05      	cmp	r3, #5
 800f71e:	f200 8208 	bhi.w	800fb32 <tcp_process+0x736>
        pcb->rtime = 0;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f002 fd11 	bl	8012150 <tcp_rexmit_rto>
    break;
 800f72e:	e200      	b.n	800fb32 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f730:	4b8a      	ldr	r3, [pc, #552]	; (800f95c <tcp_process+0x560>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	f003 0310 	and.w	r3, r3, #16
 800f738:	2b00      	cmp	r3, #0
 800f73a:	f000 8091 	beq.w	800f860 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f73e:	4b88      	ldr	r3, [pc, #544]	; (800f960 <tcp_process+0x564>)
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f746:	1ad3      	subs	r3, r2, r3
 800f748:	3b01      	subs	r3, #1
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	db71      	blt.n	800f832 <tcp_process+0x436>
 800f74e:	4b84      	ldr	r3, [pc, #528]	; (800f960 <tcp_process+0x564>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dc6a      	bgt.n	800f832 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2204      	movs	r2, #4
 800f760:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00b      	beq.n	800f782 <tcp_process+0x386>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d106      	bne.n	800f782 <tcp_process+0x386>
 800f774:	4b80      	ldr	r3, [pc, #512]	; (800f978 <tcp_process+0x57c>)
 800f776:	f240 3251 	movw	r2, #849	; 0x351
 800f77a:	4980      	ldr	r1, [pc, #512]	; (800f97c <tcp_process+0x580>)
 800f77c:	4880      	ldr	r0, [pc, #512]	; (800f980 <tcp_process+0x584>)
 800f77e:	f004 fe25 	bl	80143cc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f786:	2b00      	cmp	r3, #0
 800f788:	d102      	bne.n	800f790 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f78a:	23fa      	movs	r3, #250	; 0xfa
 800f78c:	76bb      	strb	r3, [r7, #26]
 800f78e:	e011      	b.n	800f7b4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f794:	699b      	ldr	r3, [r3, #24]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00a      	beq.n	800f7b0 <tcp_process+0x3b4>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f79e:	699b      	ldr	r3, [r3, #24]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	6910      	ldr	r0, [r2, #16]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	6879      	ldr	r1, [r7, #4]
 800f7a8:	4798      	blx	r3
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	76bb      	strb	r3, [r7, #26]
 800f7ae:	e001      	b.n	800f7b4 <tcp_process+0x3b8>
 800f7b0:	23f0      	movs	r3, #240	; 0xf0
 800f7b2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f7b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00a      	beq.n	800f7d2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f7bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f7c0:	f113 0f0d 	cmn.w	r3, #13
 800f7c4:	d002      	beq.n	800f7cc <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7fd ff56 	bl	800d678 <tcp_abort>
          }
          return ERR_ABRT;
 800f7cc:	f06f 030c 	mvn.w	r3, #12
 800f7d0:	e1bd      	b.n	800fb4e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fa42 	bl	800fc5c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f7d8:	4b6a      	ldr	r3, [pc, #424]	; (800f984 <tcp_process+0x588>)
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d005      	beq.n	800f7ec <tcp_process+0x3f0>
          recv_acked--;
 800f7e0:	4b68      	ldr	r3, [pc, #416]	; (800f984 <tcp_process+0x588>)
 800f7e2:	881b      	ldrh	r3, [r3, #0]
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	4b66      	ldr	r3, [pc, #408]	; (800f984 <tcp_process+0x588>)
 800f7ea:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7f0:	005b      	lsls	r3, r3, #1
 800f7f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	bf38      	it	cc
 800f7fa:	461a      	movcc	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4293      	cmp	r3, r2
 800f804:	bf28      	it	cs
 800f806:	4613      	movcs	r3, r2
 800f808:	b29a      	uxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f810:	4b5d      	ldr	r3, [pc, #372]	; (800f988 <tcp_process+0x58c>)
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	f003 0320 	and.w	r3, r3, #32
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d034      	beq.n	800f886 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	7e9b      	ldrb	r3, [r3, #26]
 800f820:	f043 0302 	orr.w	r3, r3, #2
 800f824:	b2da      	uxtb	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2207      	movs	r2, #7
 800f82e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f830:	e029      	b.n	800f886 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f832:	4b4b      	ldr	r3, [pc, #300]	; (800f960 <tcp_process+0x564>)
 800f834:	6818      	ldr	r0, [r3, #0]
 800f836:	4b4b      	ldr	r3, [pc, #300]	; (800f964 <tcp_process+0x568>)
 800f838:	881b      	ldrh	r3, [r3, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	4b4a      	ldr	r3, [pc, #296]	; (800f968 <tcp_process+0x56c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f842:	4b4a      	ldr	r3, [pc, #296]	; (800f96c <tcp_process+0x570>)
 800f844:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f846:	885b      	ldrh	r3, [r3, #2]
 800f848:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f84a:	4a48      	ldr	r2, [pc, #288]	; (800f96c <tcp_process+0x570>)
 800f84c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f84e:	8812      	ldrh	r2, [r2, #0]
 800f850:	b292      	uxth	r2, r2
 800f852:	9201      	str	r2, [sp, #4]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4b46      	ldr	r3, [pc, #280]	; (800f970 <tcp_process+0x574>)
 800f858:	4a46      	ldr	r2, [pc, #280]	; (800f974 <tcp_process+0x578>)
 800f85a:	f002 fc03 	bl	8012064 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f85e:	e16a      	b.n	800fb36 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f860:	4b3e      	ldr	r3, [pc, #248]	; (800f95c <tcp_process+0x560>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	f003 0302 	and.w	r3, r3, #2
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f000 8164 	beq.w	800fb36 <tcp_process+0x73a>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f872:	1e5a      	subs	r2, r3, #1
 800f874:	4b3c      	ldr	r3, [pc, #240]	; (800f968 <tcp_process+0x56c>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	429a      	cmp	r2, r3
 800f87a:	f040 815c 	bne.w	800fb36 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f002 fc9c 	bl	80121bc <tcp_rexmit>
    break;
 800f884:	e157      	b.n	800fb36 <tcp_process+0x73a>
 800f886:	e156      	b.n	800fb36 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f9e7 	bl	800fc5c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f88e:	4b3e      	ldr	r3, [pc, #248]	; (800f988 <tcp_process+0x58c>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	f003 0320 	and.w	r3, r3, #32
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 814f 	beq.w	800fb3a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	7e9b      	ldrb	r3, [r3, #26]
 800f8a0:	f043 0302 	orr.w	r3, r3, #2
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2207      	movs	r2, #7
 800f8ae:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f8b0:	e143      	b.n	800fb3a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 f9d2 	bl	800fc5c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f8b8:	4b33      	ldr	r3, [pc, #204]	; (800f988 <tcp_process+0x58c>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	f003 0320 	and.w	r3, r3, #32
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d074      	beq.n	800f9ae <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8c4:	4b25      	ldr	r3, [pc, #148]	; (800f95c <tcp_process+0x560>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 0310 	and.w	r3, r3, #16
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d063      	beq.n	800f998 <tcp_process+0x59c>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8d4:	4b22      	ldr	r3, [pc, #136]	; (800f960 <tcp_process+0x564>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d15d      	bne.n	800f998 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d159      	bne.n	800f998 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7e9b      	ldrb	r3, [r3, #26]
 800f8e8:	f043 0302 	orr.w	r3, r3, #2
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7fe feea 	bl	800e6cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f8f8:	4b24      	ldr	r3, [pc, #144]	; (800f98c <tcp_process+0x590>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d105      	bne.n	800f90e <tcp_process+0x512>
 800f902:	4b22      	ldr	r3, [pc, #136]	; (800f98c <tcp_process+0x590>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	4a20      	ldr	r2, [pc, #128]	; (800f98c <tcp_process+0x590>)
 800f90a:	6013      	str	r3, [r2, #0]
 800f90c:	e013      	b.n	800f936 <tcp_process+0x53a>
 800f90e:	4b1f      	ldr	r3, [pc, #124]	; (800f98c <tcp_process+0x590>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	617b      	str	r3, [r7, #20]
 800f914:	e00c      	b.n	800f930 <tcp_process+0x534>
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	68da      	ldr	r2, [r3, #12]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d104      	bne.n	800f92a <tcp_process+0x52e>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68da      	ldr	r2, [r3, #12]
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	60da      	str	r2, [r3, #12]
 800f928:	e005      	b.n	800f936 <tcp_process+0x53a>
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	617b      	str	r3, [r7, #20]
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1ef      	bne.n	800f916 <tcp_process+0x51a>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	60da      	str	r2, [r3, #12]
 800f93c:	4b14      	ldr	r3, [pc, #80]	; (800f990 <tcp_process+0x594>)
 800f93e:	2201      	movs	r2, #1
 800f940:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	220a      	movs	r2, #10
 800f946:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f948:	4b12      	ldr	r3, [pc, #72]	; (800f994 <tcp_process+0x598>)
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	60da      	str	r2, [r3, #12]
 800f950:	4a10      	ldr	r2, [pc, #64]	; (800f994 <tcp_process+0x598>)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6013      	str	r3, [r2, #0]
 800f956:	f002 fdd5 	bl	8012504 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f95a:	e0f0      	b.n	800fb3e <tcp_process+0x742>
 800f95c:	20003f70 	.word	0x20003f70
 800f960:	20003f68 	.word	0x20003f68
 800f964:	20003f6e 	.word	0x20003f6e
 800f968:	20003f64 	.word	0x20003f64
 800f96c:	20003f54 	.word	0x20003f54
 800f970:	20003ff0 	.word	0x20003ff0
 800f974:	20003ff4 	.word	0x20003ff4
 800f978:	0801746c 	.word	0x0801746c
 800f97c:	08017670 	.word	0x08017670
 800f980:	080174b0 	.word	0x080174b0
 800f984:	20003f6c 	.word	0x20003f6c
 800f988:	20003f71 	.word	0x20003f71
 800f98c:	20007738 	.word	0x20007738
 800f990:	20007734 	.word	0x20007734
 800f994:	20007748 	.word	0x20007748
        tcp_ack_now(pcb);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	7e9b      	ldrb	r3, [r3, #26]
 800f99c:	f043 0302 	orr.w	r3, r3, #2
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2208      	movs	r2, #8
 800f9aa:	751a      	strb	r2, [r3, #20]
    break;
 800f9ac:	e0c7      	b.n	800fb3e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f9ae:	4b6a      	ldr	r3, [pc, #424]	; (800fb58 <tcp_process+0x75c>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	f003 0310 	and.w	r3, r3, #16
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f000 80c1 	beq.w	800fb3e <tcp_process+0x742>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9c0:	4b66      	ldr	r3, [pc, #408]	; (800fb5c <tcp_process+0x760>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	f040 80ba 	bne.w	800fb3e <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f040 80b5 	bne.w	800fb3e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2206      	movs	r2, #6
 800f9d8:	751a      	strb	r2, [r3, #20]
    break;
 800f9da:	e0b0      	b.n	800fb3e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 f93d 	bl	800fc5c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f9e2:	4b5f      	ldr	r3, [pc, #380]	; (800fb60 <tcp_process+0x764>)
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	f003 0320 	and.w	r3, r3, #32
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 80a9 	beq.w	800fb42 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7e9b      	ldrb	r3, [r3, #26]
 800f9f4:	f043 0302 	orr.w	r3, r3, #2
 800f9f8:	b2da      	uxtb	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fe fe64 	bl	800e6cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fa04:	4b57      	ldr	r3, [pc, #348]	; (800fb64 <tcp_process+0x768>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d105      	bne.n	800fa1a <tcp_process+0x61e>
 800fa0e:	4b55      	ldr	r3, [pc, #340]	; (800fb64 <tcp_process+0x768>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	4a53      	ldr	r2, [pc, #332]	; (800fb64 <tcp_process+0x768>)
 800fa16:	6013      	str	r3, [r2, #0]
 800fa18:	e013      	b.n	800fa42 <tcp_process+0x646>
 800fa1a:	4b52      	ldr	r3, [pc, #328]	; (800fb64 <tcp_process+0x768>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	613b      	str	r3, [r7, #16]
 800fa20:	e00c      	b.n	800fa3c <tcp_process+0x640>
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	68da      	ldr	r2, [r3, #12]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d104      	bne.n	800fa36 <tcp_process+0x63a>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	68da      	ldr	r2, [r3, #12]
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	60da      	str	r2, [r3, #12]
 800fa34:	e005      	b.n	800fa42 <tcp_process+0x646>
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	613b      	str	r3, [r7, #16]
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1ef      	bne.n	800fa22 <tcp_process+0x626>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	60da      	str	r2, [r3, #12]
 800fa48:	4b47      	ldr	r3, [pc, #284]	; (800fb68 <tcp_process+0x76c>)
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	220a      	movs	r2, #10
 800fa52:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800fa54:	4b45      	ldr	r3, [pc, #276]	; (800fb6c <tcp_process+0x770>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	60da      	str	r2, [r3, #12]
 800fa5c:	4a43      	ldr	r2, [pc, #268]	; (800fb6c <tcp_process+0x770>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6013      	str	r3, [r2, #0]
 800fa62:	f002 fd4f 	bl	8012504 <tcp_timer_needed>
    }
    break;
 800fa66:	e06c      	b.n	800fb42 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f8f7 	bl	800fc5c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fa6e:	4b3a      	ldr	r3, [pc, #232]	; (800fb58 <tcp_process+0x75c>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	f003 0310 	and.w	r3, r3, #16
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d065      	beq.n	800fb46 <tcp_process+0x74a>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa7e:	4b37      	ldr	r3, [pc, #220]	; (800fb5c <tcp_process+0x760>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d15f      	bne.n	800fb46 <tcp_process+0x74a>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d15b      	bne.n	800fb46 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7fe fe1c 	bl	800e6cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fa94:	4b33      	ldr	r3, [pc, #204]	; (800fb64 <tcp_process+0x768>)
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d105      	bne.n	800faaa <tcp_process+0x6ae>
 800fa9e:	4b31      	ldr	r3, [pc, #196]	; (800fb64 <tcp_process+0x768>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	4a2f      	ldr	r2, [pc, #188]	; (800fb64 <tcp_process+0x768>)
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	e013      	b.n	800fad2 <tcp_process+0x6d6>
 800faaa:	4b2e      	ldr	r3, [pc, #184]	; (800fb64 <tcp_process+0x768>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	60fb      	str	r3, [r7, #12]
 800fab0:	e00c      	b.n	800facc <tcp_process+0x6d0>
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	68da      	ldr	r2, [r3, #12]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d104      	bne.n	800fac6 <tcp_process+0x6ca>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	60da      	str	r2, [r3, #12]
 800fac4:	e005      	b.n	800fad2 <tcp_process+0x6d6>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	60fb      	str	r3, [r7, #12]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1ef      	bne.n	800fab2 <tcp_process+0x6b6>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	60da      	str	r2, [r3, #12]
 800fad8:	4b23      	ldr	r3, [pc, #140]	; (800fb68 <tcp_process+0x76c>)
 800fada:	2201      	movs	r2, #1
 800fadc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	220a      	movs	r2, #10
 800fae2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800fae4:	4b21      	ldr	r3, [pc, #132]	; (800fb6c <tcp_process+0x770>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	60da      	str	r2, [r3, #12]
 800faec:	4a1f      	ldr	r2, [pc, #124]	; (800fb6c <tcp_process+0x770>)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6013      	str	r3, [r2, #0]
 800faf2:	f002 fd07 	bl	8012504 <tcp_timer_needed>
    }
    break;
 800faf6:	e026      	b.n	800fb46 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f000 f8af 	bl	800fc5c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fafe:	4b16      	ldr	r3, [pc, #88]	; (800fb58 <tcp_process+0x75c>)
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	f003 0310 	and.w	r3, r3, #16
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d01f      	beq.n	800fb4a <tcp_process+0x74e>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb0e:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <tcp_process+0x760>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d119      	bne.n	800fb4a <tcp_process+0x74e>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d115      	bne.n	800fb4a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800fb1e:	4b10      	ldr	r3, [pc, #64]	; (800fb60 <tcp_process+0x764>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f043 0310 	orr.w	r3, r3, #16
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	4b0d      	ldr	r3, [pc, #52]	; (800fb60 <tcp_process+0x764>)
 800fb2a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800fb2c:	e00d      	b.n	800fb4a <tcp_process+0x74e>
  default:
    break;
 800fb2e:	bf00      	nop
 800fb30:	e00c      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb32:	bf00      	nop
 800fb34:	e00a      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb36:	bf00      	nop
 800fb38:	e008      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb3a:	bf00      	nop
 800fb3c:	e006      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb3e:	bf00      	nop
 800fb40:	e004      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb42:	bf00      	nop
 800fb44:	e002      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb46:	bf00      	nop
 800fb48:	e000      	b.n	800fb4c <tcp_process+0x750>
    break;
 800fb4a:	bf00      	nop
  }
  return ERR_OK;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3720      	adds	r7, #32
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	20003f70 	.word	0x20003f70
 800fb5c:	20003f68 	.word	0x20003f68
 800fb60:	20003f71 	.word	0x20003f71
 800fb64:	20007738 	.word	0x20007738
 800fb68:	20007734 	.word	0x20007734
 800fb6c:	20007748 	.word	0x20007748

0800fb70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fb70:	b5b0      	push	{r4, r5, r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	899b      	ldrh	r3, [r3, #12]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7f7 fe7e 	bl	8007884 <lwip_htons>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	f003 0301 	and.w	r3, r3, #1
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d026      	beq.n	800fbe0 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fb92:	6838      	ldr	r0, [r7, #0]
 800fb94:	f7fe fb31 	bl	800e1fa <tcp_segs_free>
    next = NULL;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	e054      	b.n	800fc48 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	899b      	ldrh	r3, [r3, #12]
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7f7 fe6c 	bl	8007884 <lwip_htons>
 800fbac:	4603      	mov	r3, r0
 800fbae:	f003 0301 	and.w	r3, r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d00c      	beq.n	800fbd0 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	68dc      	ldr	r4, [r3, #12]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	899b      	ldrh	r3, [r3, #12]
 800fbc0:	b29d      	uxth	r5, r3
 800fbc2:	2001      	movs	r0, #1
 800fbc4:	f7f7 fe5e 	bl	8007884 <lwip_htons>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	432b      	orrs	r3, r5
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f7fe fb21 	bl	800e222 <tcp_seg_free>
    while (next &&
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00e      	beq.n	800fc04 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	891b      	ldrh	r3, [r3, #8]
 800fbea:	461a      	mov	r2, r3
 800fbec:	4b1a      	ldr	r3, [pc, #104]	; (800fc58 <tcp_oos_insert_segment+0xe8>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	441a      	add	r2, r3
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	6839      	ldr	r1, [r7, #0]
 800fbfa:	8909      	ldrh	r1, [r1, #8]
 800fbfc:	440b      	add	r3, r1
 800fbfe:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dacc      	bge.n	800fb9e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d01e      	beq.n	800fc48 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	891b      	ldrh	r3, [r3, #8]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4b11      	ldr	r3, [pc, #68]	; (800fc58 <tcp_oos_insert_segment+0xe8>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	441a      	add	r2, r3
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	dd12      	ble.n	800fc48 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	; (800fc58 <tcp_oos_insert_segment+0xe8>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	891b      	ldrh	r3, [r3, #8]
 800fc40:	4619      	mov	r1, r3
 800fc42:	4610      	mov	r0, r2
 800fc44:	f7fc fe4e 	bl	800c8e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	601a      	str	r2, [r3, #0]
}
 800fc4e:	bf00      	nop
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bdb0      	pop	{r4, r5, r7, pc}
 800fc56:	bf00      	nop
 800fc58:	20003f64 	.word	0x20003f64

0800fc5c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc5e:	b08d      	sub	sp, #52	; 0x34
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800fc64:	2300      	movs	r3, #0
 800fc66:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	7d1b      	ldrb	r3, [r3, #20]
 800fc6c:	2b03      	cmp	r3, #3
 800fc6e:	d806      	bhi.n	800fc7e <tcp_receive+0x22>
 800fc70:	4b9a      	ldr	r3, [pc, #616]	; (800fedc <tcp_receive+0x280>)
 800fc72:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800fc76:	499a      	ldr	r1, [pc, #616]	; (800fee0 <tcp_receive+0x284>)
 800fc78:	489a      	ldr	r0, [pc, #616]	; (800fee4 <tcp_receive+0x288>)
 800fc7a:	f004 fba7 	bl	80143cc <iprintf>

  if (flags & TCP_ACK) {
 800fc7e:	4b9a      	ldr	r3, [pc, #616]	; (800fee8 <tcp_receive+0x28c>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	f003 0310 	and.w	r3, r3, #16
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f000 82c5 	beq.w	8010216 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc92:	461a      	mov	r2, r3
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc98:	4413      	add	r3, r2
 800fc9a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fca0:	4b92      	ldr	r3, [pc, #584]	; (800feec <tcp_receive+0x290>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	db1b      	blt.n	800fce2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcae:	4b8f      	ldr	r3, [pc, #572]	; (800feec <tcp_receive+0x290>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d106      	bne.n	800fcc4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcba:	4b8d      	ldr	r3, [pc, #564]	; (800fef0 <tcp_receive+0x294>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	db0e      	blt.n	800fce2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcc8:	4b89      	ldr	r3, [pc, #548]	; (800fef0 <tcp_receive+0x294>)
 800fcca:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d141      	bne.n	800fd54 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fcd0:	4b88      	ldr	r3, [pc, #544]	; (800fef4 <tcp_receive+0x298>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	89db      	ldrh	r3, [r3, #14]
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d938      	bls.n	800fd54 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fce2:	4b84      	ldr	r3, [pc, #528]	; (800fef4 <tcp_receive+0x298>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	89db      	ldrh	r3, [r3, #14]
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d205      	bcs.n	800fd0c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800fd0c:	4b77      	ldr	r3, [pc, #476]	; (800feec <tcp_receive+0x290>)
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800fd14:	4b76      	ldr	r3, [pc, #472]	; (800fef0 <tcp_receive+0x294>)
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d10d      	bne.n	800fd42 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d111      	bne.n	800fd54 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800fd40:	e008      	b.n	800fd54 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d003      	beq.n	800fd54 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fd54:	4b66      	ldr	r3, [pc, #408]	; (800fef0 <tcp_receive+0x294>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	dc58      	bgt.n	800fe14 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 800fd62:	4b65      	ldr	r3, [pc, #404]	; (800fef8 <tcp_receive+0x29c>)
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d14b      	bne.n	800fe02 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800fd74:	441a      	add	r2, r3
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d142      	bne.n	800fe02 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	db3d      	blt.n	800fe02 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd8a:	4b59      	ldr	r3, [pc, #356]	; (800fef0 <tcp_receive+0x294>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d137      	bne.n	800fe02 <tcp_receive+0x1a6>
              found_dupack = 1;
 800fd92:	2301      	movs	r3, #1
 800fd94:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d907      	bls.n	800fdba <tcp_receive+0x15e>
                ++pcb->dupacks;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdc0:	2b03      	cmp	r3, #3
 800fdc2:	d916      	bls.n	800fdf2 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdce:	4413      	add	r3, r2
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d912      	bls.n	800fe02 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde6:	4413      	add	r3, r2
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fdf0:	e007      	b.n	800fe02 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdf8:	2b03      	cmp	r3, #3
 800fdfa:	d102      	bne.n	800fe02 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f002 fa2d 	bl	801225c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f040 8169 	bne.w	80100dc <tcp_receive+0x480>
        pcb->dupacks = 0;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe12:	e163      	b.n	80100dc <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fe14:	4b36      	ldr	r3, [pc, #216]	; (800fef0 <tcp_receive+0x294>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f2c0 8107 	blt.w	8010034 <tcp_receive+0x3d8>
 800fe26:	4b32      	ldr	r3, [pc, #200]	; (800fef0 <tcp_receive+0x294>)
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe2e:	1ad3      	subs	r3, r2, r3
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f300 80ff 	bgt.w	8010034 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7e9b      	ldrb	r3, [r3, #26]
 800fe3a:	f003 0304 	and.w	r3, r3, #4
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00c      	beq.n	800fe5c <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7e9b      	ldrb	r3, [r3, #26]
 800fe46:	f023 0304 	bic.w	r3, r3, #4
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe6a:	10db      	asrs	r3, r3, #3
 800fe6c:	b21b      	sxth	r3, r3
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	4413      	add	r3, r2
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	b21a      	sxth	r2, r3
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fe8c:	4b18      	ldr	r3, [pc, #96]	; (800fef0 <tcp_receive+0x294>)
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	7d1b      	ldrb	r3, [r3, #20]
 800fe98:	2b03      	cmp	r3, #3
 800fe9a:	f240 8094 	bls.w	800ffc6 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800feaa:	429a      	cmp	r2, r3
 800feac:	d226      	bcs.n	800fefc <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feb8:	4413      	add	r3, r2
 800feba:	b29a      	uxth	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d97f      	bls.n	800ffc6 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fed0:	4413      	add	r3, r2
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800feda:	e074      	b.n	800ffc6 <tcp_receive+0x36a>
 800fedc:	0801746c 	.word	0x0801746c
 800fee0:	08017690 	.word	0x08017690
 800fee4:	080174b0 	.word	0x080174b0
 800fee8:	20003f70 	.word	0x20003f70
 800feec:	20003f64 	.word	0x20003f64
 800fef0:	20003f68 	.word	0x20003f68
 800fef4:	20003f54 	.word	0x20003f54
 800fef8:	20003f6e 	.word	0x20003f6e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff06:	4619      	mov	r1, r3
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff0c:	fb03 f301 	mul.w	r3, r3, r1
 800ff10:	6879      	ldr	r1, [r7, #4]
 800ff12:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800ff16:	fb93 f3f1 	sdiv	r3, r3, r1
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	4413      	add	r3, r2
 800ff1e:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff26:	8a7a      	ldrh	r2, [r7, #18]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d94c      	bls.n	800ffc6 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	8a7a      	ldrh	r2, [r7, #18]
 800ff30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800ff34:	e047      	b.n	800ffc6 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fc fed5 	bl	800cd00 <pbuf_clen>
 800ff56:	4603      	mov	r3, r0
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	d206      	bcs.n	800ff6a <tcp_receive+0x30e>
 800ff5c:	4b70      	ldr	r3, [pc, #448]	; (8010120 <tcp_receive+0x4c4>)
 800ff5e:	f240 429e 	movw	r2, #1182	; 0x49e
 800ff62:	4970      	ldr	r1, [pc, #448]	; (8010124 <tcp_receive+0x4c8>)
 800ff64:	4870      	ldr	r0, [pc, #448]	; (8010128 <tcp_receive+0x4cc>)
 800ff66:	f004 fa31 	bl	80143cc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800ff6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fc fec6 	bl	800cd00 <pbuf_clen>
 800ff74:	4603      	mov	r3, r0
 800ff76:	461a      	mov	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff7e:	1a9b      	subs	r3, r3, r2
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800ff88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8a:	891a      	ldrh	r2, [r3, #8]
 800ff8c:	4b67      	ldr	r3, [pc, #412]	; (801012c <tcp_receive+0x4d0>)
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	4413      	add	r3, r2
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	4b65      	ldr	r3, [pc, #404]	; (801012c <tcp_receive+0x4d0>)
 800ff96:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800ff98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff9a:	f7fe f942 	bl	800e222 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00e      	beq.n	800ffc6 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10a      	bne.n	800ffc6 <tcp_receive+0x36a>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d106      	bne.n	800ffc6 <tcp_receive+0x36a>
 800ffb8:	4b59      	ldr	r3, [pc, #356]	; (8010120 <tcp_receive+0x4c4>)
 800ffba:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800ffbe:	495c      	ldr	r1, [pc, #368]	; (8010130 <tcp_receive+0x4d4>)
 800ffc0:	4859      	ldr	r0, [pc, #356]	; (8010128 <tcp_receive+0x4cc>)
 800ffc2:	f004 fa03 	bl	80143cc <iprintf>
      while (pcb->unacked != NULL &&
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d022      	beq.n	8010014 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7f7 fc62 	bl	80078a0 <lwip_htonl>
 800ffdc:	4604      	mov	r4, r0
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffe2:	891b      	ldrh	r3, [r3, #8]
 800ffe4:	461d      	mov	r5, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	899b      	ldrh	r3, [r3, #12]
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7f7 fc47 	bl	8007884 <lwip_htons>
 800fff6:	4603      	mov	r3, r0
 800fff8:	f003 0303 	and.w	r3, r3, #3
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d001      	beq.n	8010004 <tcp_receive+0x3a8>
 8010000:	2301      	movs	r3, #1
 8010002:	e000      	b.n	8010006 <tcp_receive+0x3aa>
 8010004:	2300      	movs	r3, #0
 8010006:	442b      	add	r3, r5
 8010008:	18e2      	adds	r2, r4, r3
 801000a:	4b4a      	ldr	r3, [pc, #296]	; (8010134 <tcp_receive+0x4d8>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010010:	2b00      	cmp	r3, #0
 8010012:	dd90      	ble.n	800ff36 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010018:	2b00      	cmp	r3, #0
 801001a:	d104      	bne.n	8010026 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010022:	861a      	strh	r2, [r3, #48]	; 0x30
 8010024:	e002      	b.n	801002c <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	76da      	strb	r2, [r3, #27]
 8010032:	e002      	b.n	801003a <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f001 fd31 	bl	8011a9c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 801003a:	e04f      	b.n	80100dc <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010040:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010050:	2b00      	cmp	r3, #0
 8010052:	d103      	bne.n	801005c <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	f7fc fe4a 	bl	800cd00 <pbuf_clen>
 801006c:	4603      	mov	r3, r0
 801006e:	429c      	cmp	r4, r3
 8010070:	d206      	bcs.n	8010080 <tcp_receive+0x424>
 8010072:	4b2b      	ldr	r3, [pc, #172]	; (8010120 <tcp_receive+0x4c4>)
 8010074:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010078:	492a      	ldr	r1, [pc, #168]	; (8010124 <tcp_receive+0x4c8>)
 801007a:	482b      	ldr	r0, [pc, #172]	; (8010128 <tcp_receive+0x4cc>)
 801007c:	f004 f9a6 	bl	80143cc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	f7fc fe3b 	bl	800cd00 <pbuf_clen>
 801008a:	4603      	mov	r3, r0
 801008c:	461a      	mov	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010094:	1a9b      	subs	r3, r3, r2
 8010096:	b29a      	uxth	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 801009e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a0:	891a      	ldrh	r2, [r3, #8]
 80100a2:	4b22      	ldr	r3, [pc, #136]	; (801012c <tcp_receive+0x4d0>)
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	4413      	add	r3, r2
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	4b20      	ldr	r3, [pc, #128]	; (801012c <tcp_receive+0x4d0>)
 80100ac:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80100ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100b0:	f7fe f8b7 	bl	800e222 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00e      	beq.n	80100dc <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d10a      	bne.n	80100dc <tcp_receive+0x480>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d106      	bne.n	80100dc <tcp_receive+0x480>
 80100ce:	4b14      	ldr	r3, [pc, #80]	; (8010120 <tcp_receive+0x4c4>)
 80100d0:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80100d4:	4916      	ldr	r1, [pc, #88]	; (8010130 <tcp_receive+0x4d4>)
 80100d6:	4814      	ldr	r0, [pc, #80]	; (8010128 <tcp_receive+0x4cc>)
 80100d8:	f004 f978 	bl	80143cc <iprintf>
    while (pcb->unsent != NULL &&
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d037      	beq.n	8010154 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80100e4:	4b13      	ldr	r3, [pc, #76]	; (8010134 <tcp_receive+0x4d8>)
 80100e6:	681c      	ldr	r4, [r3, #0]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f7 fbd5 	bl	80078a0 <lwip_htonl>
 80100f6:	4605      	mov	r5, r0
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100fc:	891b      	ldrh	r3, [r3, #8]
 80100fe:	461e      	mov	r6, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4618      	mov	r0, r3
 801010c:	f7f7 fbba 	bl	8007884 <lwip_htons>
 8010110:	4603      	mov	r3, r0
 8010112:	f003 0303 	and.w	r3, r3, #3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00e      	beq.n	8010138 <tcp_receive+0x4dc>
 801011a:	2301      	movs	r3, #1
 801011c:	e00d      	b.n	801013a <tcp_receive+0x4de>
 801011e:	bf00      	nop
 8010120:	0801746c 	.word	0x0801746c
 8010124:	080176ac 	.word	0x080176ac
 8010128:	080174b0 	.word	0x080174b0
 801012c:	20003f6c 	.word	0x20003f6c
 8010130:	080176d4 	.word	0x080176d4
 8010134:	20003f68 	.word	0x20003f68
 8010138:	2300      	movs	r3, #0
 801013a:	4433      	add	r3, r6
 801013c:	442b      	add	r3, r5
 801013e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010140:	2b00      	cmp	r3, #0
 8010142:	db07      	blt.n	8010154 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010144:	4b8d      	ldr	r3, [pc, #564]	; (801037c <tcp_receive+0x720>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	f77f af74 	ble.w	801003c <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801015a:	4b89      	ldr	r3, [pc, #548]	; (8010380 <tcp_receive+0x724>)
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	4413      	add	r3, r2
 8010160:	b29a      	uxth	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801016c:	2b00      	cmp	r3, #0
 801016e:	d052      	beq.n	8010216 <tcp_receive+0x5ba>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010174:	4b81      	ldr	r3, [pc, #516]	; (801037c <tcp_receive+0x720>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	da4b      	bge.n	8010216 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801017e:	4b81      	ldr	r3, [pc, #516]	; (8010384 <tcp_receive+0x728>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	b29a      	uxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010188:	b29b      	uxth	r3, r3
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	b29b      	uxth	r3, r3
 801018e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010190:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010198:	10db      	asrs	r3, r3, #3
 801019a:	b21b      	sxth	r3, r3
 801019c:	b29b      	uxth	r3, r3
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101ae:	4413      	add	r3, r2
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	b21a      	sxth	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80101b8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80101bc:	2b00      	cmp	r3, #0
 80101be:	da03      	bge.n	80101c8 <tcp_receive+0x56c>
        m = -m;
 80101c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101c2:	425b      	negs	r3, r3
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80101c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80101d0:	109b      	asrs	r3, r3, #2
 80101d2:	b21b      	sxth	r3, r3
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	b29b      	uxth	r3, r3
 80101da:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101e6:	4413      	add	r3, r2
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	b21a      	sxth	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80101f6:	10db      	asrs	r3, r3, #3
 80101f8:	b21b      	sxth	r3, r3
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010202:	b29b      	uxth	r3, r3
 8010204:	4413      	add	r3, r2
 8010206:	b29b      	uxth	r3, r3
 8010208:	b21a      	sxth	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010216:	4b5c      	ldr	r3, [pc, #368]	; (8010388 <tcp_receive+0x72c>)
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 84ee 	beq.w	8010bfc <tcp_receive+0xfa0>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	7d1b      	ldrb	r3, [r3, #20]
 8010224:	2b06      	cmp	r3, #6
 8010226:	f200 84e9 	bhi.w	8010bfc <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801022e:	4b57      	ldr	r3, [pc, #348]	; (801038c <tcp_receive+0x730>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	3b01      	subs	r3, #1
 8010236:	2b00      	cmp	r3, #0
 8010238:	f2c0 80b8 	blt.w	80103ac <tcp_receive+0x750>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010240:	4b51      	ldr	r3, [pc, #324]	; (8010388 <tcp_receive+0x72c>)
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	4619      	mov	r1, r3
 8010246:	4b51      	ldr	r3, [pc, #324]	; (801038c <tcp_receive+0x730>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	440b      	add	r3, r1
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	3301      	adds	r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	f300 80ab 	bgt.w	80103ac <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010256:	4b4e      	ldr	r3, [pc, #312]	; (8010390 <tcp_receive+0x734>)
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010260:	4b4a      	ldr	r3, [pc, #296]	; (801038c <tcp_receive+0x730>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010268:	4b49      	ldr	r3, [pc, #292]	; (8010390 <tcp_receive+0x734>)
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d106      	bne.n	801027e <tcp_receive+0x622>
 8010270:	4b48      	ldr	r3, [pc, #288]	; (8010394 <tcp_receive+0x738>)
 8010272:	f240 523c 	movw	r2, #1340	; 0x53c
 8010276:	4948      	ldr	r1, [pc, #288]	; (8010398 <tcp_receive+0x73c>)
 8010278:	4848      	ldr	r0, [pc, #288]	; (801039c <tcp_receive+0x740>)
 801027a:	f004 f8a7 	bl	80143cc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010280:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010284:	4293      	cmp	r3, r2
 8010286:	dd06      	ble.n	8010296 <tcp_receive+0x63a>
 8010288:	4b42      	ldr	r3, [pc, #264]	; (8010394 <tcp_receive+0x738>)
 801028a:	f240 523d 	movw	r2, #1341	; 0x53d
 801028e:	4944      	ldr	r1, [pc, #272]	; (80103a0 <tcp_receive+0x744>)
 8010290:	4842      	ldr	r0, [pc, #264]	; (801039c <tcp_receive+0x740>)
 8010292:	f004 f89b 	bl	80143cc <iprintf>
      if (inseg.p->len < off) {
 8010296:	4b3e      	ldr	r3, [pc, #248]	; (8010390 <tcp_receive+0x734>)
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	895b      	ldrh	r3, [r3, #10]
 801029c:	461a      	mov	r2, r3
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	429a      	cmp	r2, r3
 80102a2:	da3e      	bge.n	8010322 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80102a4:	4b3a      	ldr	r3, [pc, #232]	; (8010390 <tcp_receive+0x734>)
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	891b      	ldrh	r3, [r3, #8]
 80102aa:	461a      	mov	r2, r3
 80102ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ae:	429a      	cmp	r2, r3
 80102b0:	da06      	bge.n	80102c0 <tcp_receive+0x664>
 80102b2:	4b38      	ldr	r3, [pc, #224]	; (8010394 <tcp_receive+0x738>)
 80102b4:	f240 523f 	movw	r2, #1343	; 0x53f
 80102b8:	493a      	ldr	r1, [pc, #232]	; (80103a4 <tcp_receive+0x748>)
 80102ba:	4838      	ldr	r0, [pc, #224]	; (801039c <tcp_receive+0x740>)
 80102bc:	f004 f886 	bl	80143cc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80102c0:	4b33      	ldr	r3, [pc, #204]	; (8010390 <tcp_receive+0x734>)
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	891a      	ldrh	r2, [r3, #8]
 80102c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80102ce:	e00e      	b.n	80102ee <tcp_receive+0x692>
          off -= p->len;
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	895b      	ldrh	r3, [r3, #10]
 80102d4:	461a      	mov	r2, r3
 80102d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d8:	1a9b      	subs	r3, r3, r2
 80102da:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	8a3a      	ldrh	r2, [r7, #16]
 80102e0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	2200      	movs	r2, #0
 80102e6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	895b      	ldrh	r3, [r3, #10]
 80102f2:	461a      	mov	r2, r3
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	429a      	cmp	r2, r3
 80102f8:	dbea      	blt.n	80102d0 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	425b      	negs	r3, r3
 8010300:	b29b      	uxth	r3, r3
 8010302:	b21b      	sxth	r3, r3
 8010304:	4619      	mov	r1, r3
 8010306:	69b8      	ldr	r0, [r7, #24]
 8010308:	f7fc fc3c 	bl	800cb84 <pbuf_header>
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d01c      	beq.n	801034c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010312:	4b20      	ldr	r3, [pc, #128]	; (8010394 <tcp_receive+0x738>)
 8010314:	f240 524c 	movw	r2, #1356	; 0x54c
 8010318:	4923      	ldr	r1, [pc, #140]	; (80103a8 <tcp_receive+0x74c>)
 801031a:	4820      	ldr	r0, [pc, #128]	; (801039c <tcp_receive+0x740>)
 801031c:	f004 f856 	bl	80143cc <iprintf>
 8010320:	e014      	b.n	801034c <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010322:	4b1b      	ldr	r3, [pc, #108]	; (8010390 <tcp_receive+0x734>)
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010328:	b292      	uxth	r2, r2
 801032a:	4252      	negs	r2, r2
 801032c:	b292      	uxth	r2, r2
 801032e:	b212      	sxth	r2, r2
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f7fc fc26 	bl	800cb84 <pbuf_header>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d006      	beq.n	801034c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801033e:	4b15      	ldr	r3, [pc, #84]	; (8010394 <tcp_receive+0x738>)
 8010340:	f240 5251 	movw	r2, #1361	; 0x551
 8010344:	4918      	ldr	r1, [pc, #96]	; (80103a8 <tcp_receive+0x74c>)
 8010346:	4815      	ldr	r0, [pc, #84]	; (801039c <tcp_receive+0x740>)
 8010348:	f004 f840 	bl	80143cc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801034c:	4b10      	ldr	r3, [pc, #64]	; (8010390 <tcp_receive+0x734>)
 801034e:	891a      	ldrh	r2, [r3, #8]
 8010350:	4b0e      	ldr	r3, [pc, #56]	; (801038c <tcp_receive+0x730>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	b299      	uxth	r1, r3
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035a:	b29b      	uxth	r3, r3
 801035c:	1acb      	subs	r3, r1, r3
 801035e:	b29b      	uxth	r3, r3
 8010360:	4413      	add	r3, r2
 8010362:	b29a      	uxth	r2, r3
 8010364:	4b0a      	ldr	r3, [pc, #40]	; (8010390 <tcp_receive+0x734>)
 8010366:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010368:	4b09      	ldr	r3, [pc, #36]	; (8010390 <tcp_receive+0x734>)
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010370:	4906      	ldr	r1, [pc, #24]	; (801038c <tcp_receive+0x730>)
 8010372:	600a      	str	r2, [r1, #0]
 8010374:	4a05      	ldr	r2, [pc, #20]	; (801038c <tcp_receive+0x730>)
 8010376:	6812      	ldr	r2, [r2, #0]
 8010378:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801037a:	e025      	b.n	80103c8 <tcp_receive+0x76c>
 801037c:	20003f68 	.word	0x20003f68
 8010380:	20003f6c 	.word	0x20003f6c
 8010384:	2000773c 	.word	0x2000773c
 8010388:	20003f6e 	.word	0x20003f6e
 801038c:	20003f64 	.word	0x20003f64
 8010390:	20003f44 	.word	0x20003f44
 8010394:	0801746c 	.word	0x0801746c
 8010398:	080176f4 	.word	0x080176f4
 801039c:	080174b0 	.word	0x080174b0
 80103a0:	08017704 	.word	0x08017704
 80103a4:	08017714 	.word	0x08017714
 80103a8:	08017724 	.word	0x08017724
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80103ac:	4b86      	ldr	r3, [pc, #536]	; (80105c8 <tcp_receive+0x96c>)
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	da06      	bge.n	80103c8 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	7e9b      	ldrb	r3, [r3, #26]
 80103be:	f043 0302 	orr.w	r3, r3, #2
 80103c2:	b2da      	uxtb	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80103c8:	4b7f      	ldr	r3, [pc, #508]	; (80105c8 <tcp_receive+0x96c>)
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f2c0 840d 	blt.w	8010bf2 <tcp_receive+0xf96>
 80103d8:	4b7b      	ldr	r3, [pc, #492]	; (80105c8 <tcp_receive+0x96c>)
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e0:	6879      	ldr	r1, [r7, #4]
 80103e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103e4:	440b      	add	r3, r1
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	3301      	adds	r3, #1
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f300 8401 	bgt.w	8010bf2 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103f4:	4b74      	ldr	r3, [pc, #464]	; (80105c8 <tcp_receive+0x96c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	f040 8285 	bne.w	8010908 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80103fe:	4b73      	ldr	r3, [pc, #460]	; (80105cc <tcp_receive+0x970>)
 8010400:	891c      	ldrh	r4, [r3, #8]
 8010402:	4b72      	ldr	r3, [pc, #456]	; (80105cc <tcp_receive+0x970>)
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	899b      	ldrh	r3, [r3, #12]
 8010408:	b29b      	uxth	r3, r3
 801040a:	4618      	mov	r0, r3
 801040c:	f7f7 fa3a 	bl	8007884 <lwip_htons>
 8010410:	4603      	mov	r3, r0
 8010412:	f003 0303 	and.w	r3, r3, #3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <tcp_receive+0x7c2>
 801041a:	2301      	movs	r3, #1
 801041c:	e000      	b.n	8010420 <tcp_receive+0x7c4>
 801041e:	2300      	movs	r3, #0
 8010420:	4423      	add	r3, r4
 8010422:	b29a      	uxth	r2, r3
 8010424:	4b6a      	ldr	r3, [pc, #424]	; (80105d0 <tcp_receive+0x974>)
 8010426:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801042c:	4b68      	ldr	r3, [pc, #416]	; (80105d0 <tcp_receive+0x974>)
 801042e:	881b      	ldrh	r3, [r3, #0]
 8010430:	429a      	cmp	r2, r3
 8010432:	d26d      	bcs.n	8010510 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010434:	4b65      	ldr	r3, [pc, #404]	; (80105cc <tcp_receive+0x970>)
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	899b      	ldrh	r3, [r3, #12]
 801043a:	b29b      	uxth	r3, r3
 801043c:	4618      	mov	r0, r3
 801043e:	f7f7 fa21 	bl	8007884 <lwip_htons>
 8010442:	4603      	mov	r3, r0
 8010444:	f003 0301 	and.w	r3, r3, #1
 8010448:	2b00      	cmp	r3, #0
 801044a:	d01a      	beq.n	8010482 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801044c:	4b5f      	ldr	r3, [pc, #380]	; (80105cc <tcp_receive+0x970>)
 801044e:	68dc      	ldr	r4, [r3, #12]
 8010450:	4b5e      	ldr	r3, [pc, #376]	; (80105cc <tcp_receive+0x970>)
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	899b      	ldrh	r3, [r3, #12]
 8010456:	b29b      	uxth	r3, r3
 8010458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801045c:	b29d      	uxth	r5, r3
 801045e:	4b5b      	ldr	r3, [pc, #364]	; (80105cc <tcp_receive+0x970>)
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	899b      	ldrh	r3, [r3, #12]
 8010464:	b29b      	uxth	r3, r3
 8010466:	4618      	mov	r0, r3
 8010468:	f7f7 fa0c 	bl	8007884 <lwip_htons>
 801046c:	4603      	mov	r3, r0
 801046e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010472:	b29b      	uxth	r3, r3
 8010474:	4618      	mov	r0, r3
 8010476:	f7f7 fa05 	bl	8007884 <lwip_htons>
 801047a:	4603      	mov	r3, r0
 801047c:	432b      	orrs	r3, r5
 801047e:	b29b      	uxth	r3, r3
 8010480:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010486:	4b51      	ldr	r3, [pc, #324]	; (80105cc <tcp_receive+0x970>)
 8010488:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801048a:	4b50      	ldr	r3, [pc, #320]	; (80105cc <tcp_receive+0x970>)
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	899b      	ldrh	r3, [r3, #12]
 8010490:	b29b      	uxth	r3, r3
 8010492:	4618      	mov	r0, r3
 8010494:	f7f7 f9f6 	bl	8007884 <lwip_htons>
 8010498:	4603      	mov	r3, r0
 801049a:	f003 0302 	and.w	r3, r3, #2
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d005      	beq.n	80104ae <tcp_receive+0x852>
            inseg.len -= 1;
 80104a2:	4b4a      	ldr	r3, [pc, #296]	; (80105cc <tcp_receive+0x970>)
 80104a4:	891b      	ldrh	r3, [r3, #8]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	4b48      	ldr	r3, [pc, #288]	; (80105cc <tcp_receive+0x970>)
 80104ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80104ae:	4b47      	ldr	r3, [pc, #284]	; (80105cc <tcp_receive+0x970>)
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	4b46      	ldr	r3, [pc, #280]	; (80105cc <tcp_receive+0x970>)
 80104b4:	891b      	ldrh	r3, [r3, #8]
 80104b6:	4619      	mov	r1, r3
 80104b8:	4610      	mov	r0, r2
 80104ba:	f7fc fa13 	bl	800c8e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80104be:	4b43      	ldr	r3, [pc, #268]	; (80105cc <tcp_receive+0x970>)
 80104c0:	891c      	ldrh	r4, [r3, #8]
 80104c2:	4b42      	ldr	r3, [pc, #264]	; (80105cc <tcp_receive+0x970>)
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	899b      	ldrh	r3, [r3, #12]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f7 f9da 	bl	8007884 <lwip_htons>
 80104d0:	4603      	mov	r3, r0
 80104d2:	f003 0303 	and.w	r3, r3, #3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <tcp_receive+0x882>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <tcp_receive+0x884>
 80104de:	2300      	movs	r3, #0
 80104e0:	4423      	add	r3, r4
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	4b3a      	ldr	r3, [pc, #232]	; (80105d0 <tcp_receive+0x974>)
 80104e6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80104e8:	4b39      	ldr	r3, [pc, #228]	; (80105d0 <tcp_receive+0x974>)
 80104ea:	881b      	ldrh	r3, [r3, #0]
 80104ec:	461a      	mov	r2, r3
 80104ee:	4b36      	ldr	r3, [pc, #216]	; (80105c8 <tcp_receive+0x96c>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	441a      	add	r2, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f8:	6879      	ldr	r1, [r7, #4]
 80104fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104fc:	440b      	add	r3, r1
 80104fe:	429a      	cmp	r2, r3
 8010500:	d006      	beq.n	8010510 <tcp_receive+0x8b4>
 8010502:	4b34      	ldr	r3, [pc, #208]	; (80105d4 <tcp_receive+0x978>)
 8010504:	f240 527f 	movw	r2, #1407	; 0x57f
 8010508:	4933      	ldr	r1, [pc, #204]	; (80105d8 <tcp_receive+0x97c>)
 801050a:	4834      	ldr	r0, [pc, #208]	; (80105dc <tcp_receive+0x980>)
 801050c:	f003 ff5e 	bl	80143cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010514:	2b00      	cmp	r3, #0
 8010516:	f000 80e0 	beq.w	80106da <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801051a:	4b2c      	ldr	r3, [pc, #176]	; (80105cc <tcp_receive+0x970>)
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	899b      	ldrh	r3, [r3, #12]
 8010520:	b29b      	uxth	r3, r3
 8010522:	4618      	mov	r0, r3
 8010524:	f7f7 f9ae 	bl	8007884 <lwip_htons>
 8010528:	4603      	mov	r3, r0
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	d010      	beq.n	8010554 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010532:	e00a      	b.n	801054a <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010538:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f7fd fe6c 	bl	800e222 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1f0      	bne.n	8010534 <tcp_receive+0x8d8>
 8010552:	e0c2      	b.n	80106da <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010558:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801055a:	e04e      	b.n	80105fa <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	899b      	ldrh	r3, [r3, #12]
 8010562:	b29b      	uxth	r3, r3
 8010564:	4618      	mov	r0, r3
 8010566:	f7f7 f98d 	bl	8007884 <lwip_htons>
 801056a:	4603      	mov	r3, r0
 801056c:	f003 0301 	and.w	r3, r3, #1
 8010570:	2b00      	cmp	r3, #0
 8010572:	d03a      	beq.n	80105ea <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010574:	4b15      	ldr	r3, [pc, #84]	; (80105cc <tcp_receive+0x970>)
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	899b      	ldrh	r3, [r3, #12]
 801057a:	b29b      	uxth	r3, r3
 801057c:	4618      	mov	r0, r3
 801057e:	f7f7 f981 	bl	8007884 <lwip_htons>
 8010582:	4603      	mov	r3, r0
 8010584:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010588:	2b00      	cmp	r3, #0
 801058a:	d12e      	bne.n	80105ea <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801058c:	4b0f      	ldr	r3, [pc, #60]	; (80105cc <tcp_receive+0x970>)
 801058e:	68dc      	ldr	r4, [r3, #12]
 8010590:	4b0e      	ldr	r3, [pc, #56]	; (80105cc <tcp_receive+0x970>)
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	899b      	ldrh	r3, [r3, #12]
 8010596:	b29d      	uxth	r5, r3
 8010598:	2001      	movs	r0, #1
 801059a:	f7f7 f973 	bl	8007884 <lwip_htons>
 801059e:	4603      	mov	r3, r0
 80105a0:	432b      	orrs	r3, r5
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80105a6:	4b09      	ldr	r3, [pc, #36]	; (80105cc <tcp_receive+0x970>)
 80105a8:	891c      	ldrh	r4, [r3, #8]
 80105aa:	4b08      	ldr	r3, [pc, #32]	; (80105cc <tcp_receive+0x970>)
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	899b      	ldrh	r3, [r3, #12]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7f7 f966 	bl	8007884 <lwip_htons>
 80105b8:	4603      	mov	r3, r0
 80105ba:	f003 0303 	and.w	r3, r3, #3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00e      	beq.n	80105e0 <tcp_receive+0x984>
 80105c2:	2301      	movs	r3, #1
 80105c4:	e00d      	b.n	80105e2 <tcp_receive+0x986>
 80105c6:	bf00      	nop
 80105c8:	20003f64 	.word	0x20003f64
 80105cc:	20003f44 	.word	0x20003f44
 80105d0:	20003f6e 	.word	0x20003f6e
 80105d4:	0801746c 	.word	0x0801746c
 80105d8:	08017738 	.word	0x08017738
 80105dc:	080174b0 	.word	0x080174b0
 80105e0:	2300      	movs	r3, #0
 80105e2:	4423      	add	r3, r4
 80105e4:	b29a      	uxth	r2, r3
 80105e6:	4b95      	ldr	r3, [pc, #596]	; (801083c <tcp_receive+0xbe0>)
 80105e8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80105ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ec:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80105f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105f6:	f7fd fe14 	bl	800e222 <tcp_seg_free>
            while (next &&
 80105fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00e      	beq.n	801061e <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010600:	4b8e      	ldr	r3, [pc, #568]	; (801083c <tcp_receive+0xbe0>)
 8010602:	881b      	ldrh	r3, [r3, #0]
 8010604:	461a      	mov	r2, r3
 8010606:	4b8e      	ldr	r3, [pc, #568]	; (8010840 <tcp_receive+0xbe4>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	441a      	add	r2, r3
 801060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010614:	8909      	ldrh	r1, [r1, #8]
 8010616:	440b      	add	r3, r1
 8010618:	1ad3      	subs	r3, r2, r3
            while (next &&
 801061a:	2b00      	cmp	r3, #0
 801061c:	da9e      	bge.n	801055c <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d057      	beq.n	80106d4 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 8010624:	4b85      	ldr	r3, [pc, #532]	; (801083c <tcp_receive+0xbe0>)
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	461a      	mov	r2, r3
 801062a:	4b85      	ldr	r3, [pc, #532]	; (8010840 <tcp_receive+0xbe4>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	441a      	add	r2, r3
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010638:	2b00      	cmp	r3, #0
 801063a:	dd4b      	ble.n	80106d4 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801063c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	b29a      	uxth	r2, r3
 8010644:	4b7e      	ldr	r3, [pc, #504]	; (8010840 <tcp_receive+0xbe4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	b29b      	uxth	r3, r3
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	b29a      	uxth	r2, r3
 801064e:	4b7d      	ldr	r3, [pc, #500]	; (8010844 <tcp_receive+0xbe8>)
 8010650:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010652:	4b7c      	ldr	r3, [pc, #496]	; (8010844 <tcp_receive+0xbe8>)
 8010654:	68db      	ldr	r3, [r3, #12]
 8010656:	899b      	ldrh	r3, [r3, #12]
 8010658:	b29b      	uxth	r3, r3
 801065a:	4618      	mov	r0, r3
 801065c:	f7f7 f912 	bl	8007884 <lwip_htons>
 8010660:	4603      	mov	r3, r0
 8010662:	f003 0302 	and.w	r3, r3, #2
 8010666:	2b00      	cmp	r3, #0
 8010668:	d005      	beq.n	8010676 <tcp_receive+0xa1a>
                inseg.len -= 1;
 801066a:	4b76      	ldr	r3, [pc, #472]	; (8010844 <tcp_receive+0xbe8>)
 801066c:	891b      	ldrh	r3, [r3, #8]
 801066e:	3b01      	subs	r3, #1
 8010670:	b29a      	uxth	r2, r3
 8010672:	4b74      	ldr	r3, [pc, #464]	; (8010844 <tcp_receive+0xbe8>)
 8010674:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010676:	4b73      	ldr	r3, [pc, #460]	; (8010844 <tcp_receive+0xbe8>)
 8010678:	685a      	ldr	r2, [r3, #4]
 801067a:	4b72      	ldr	r3, [pc, #456]	; (8010844 <tcp_receive+0xbe8>)
 801067c:	891b      	ldrh	r3, [r3, #8]
 801067e:	4619      	mov	r1, r3
 8010680:	4610      	mov	r0, r2
 8010682:	f7fc f92f 	bl	800c8e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010686:	4b6f      	ldr	r3, [pc, #444]	; (8010844 <tcp_receive+0xbe8>)
 8010688:	891c      	ldrh	r4, [r3, #8]
 801068a:	4b6e      	ldr	r3, [pc, #440]	; (8010844 <tcp_receive+0xbe8>)
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	899b      	ldrh	r3, [r3, #12]
 8010690:	b29b      	uxth	r3, r3
 8010692:	4618      	mov	r0, r3
 8010694:	f7f7 f8f6 	bl	8007884 <lwip_htons>
 8010698:	4603      	mov	r3, r0
 801069a:	f003 0303 	and.w	r3, r3, #3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <tcp_receive+0xa4a>
 80106a2:	2301      	movs	r3, #1
 80106a4:	e000      	b.n	80106a8 <tcp_receive+0xa4c>
 80106a6:	2300      	movs	r3, #0
 80106a8:	4423      	add	r3, r4
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	4b63      	ldr	r3, [pc, #396]	; (801083c <tcp_receive+0xbe0>)
 80106ae:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80106b0:	4b62      	ldr	r3, [pc, #392]	; (801083c <tcp_receive+0xbe0>)
 80106b2:	881b      	ldrh	r3, [r3, #0]
 80106b4:	461a      	mov	r2, r3
 80106b6:	4b62      	ldr	r3, [pc, #392]	; (8010840 <tcp_receive+0xbe4>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	441a      	add	r2, r3
 80106bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d006      	beq.n	80106d4 <tcp_receive+0xa78>
 80106c6:	4b60      	ldr	r3, [pc, #384]	; (8010848 <tcp_receive+0xbec>)
 80106c8:	f240 52af 	movw	r2, #1455	; 0x5af
 80106cc:	495f      	ldr	r1, [pc, #380]	; (801084c <tcp_receive+0xbf0>)
 80106ce:	4860      	ldr	r0, [pc, #384]	; (8010850 <tcp_receive+0xbf4>)
 80106d0:	f003 fe7c 	bl	80143cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106d8:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80106da:	4b58      	ldr	r3, [pc, #352]	; (801083c <tcp_receive+0xbe0>)
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	4b57      	ldr	r3, [pc, #348]	; (8010840 <tcp_receive+0xbe4>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	441a      	add	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80106ee:	4b53      	ldr	r3, [pc, #332]	; (801083c <tcp_receive+0xbe0>)
 80106f0:	881b      	ldrh	r3, [r3, #0]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d206      	bcs.n	8010704 <tcp_receive+0xaa8>
 80106f6:	4b54      	ldr	r3, [pc, #336]	; (8010848 <tcp_receive+0xbec>)
 80106f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80106fc:	4955      	ldr	r1, [pc, #340]	; (8010854 <tcp_receive+0xbf8>)
 80106fe:	4854      	ldr	r0, [pc, #336]	; (8010850 <tcp_receive+0xbf4>)
 8010700:	f003 fe64 	bl	80143cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010708:	4b4c      	ldr	r3, [pc, #304]	; (801083c <tcp_receive+0xbe0>)
 801070a:	881b      	ldrh	r3, [r3, #0]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	b29a      	uxth	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7fd f8f5 	bl	800d904 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801071a:	4b4a      	ldr	r3, [pc, #296]	; (8010844 <tcp_receive+0xbe8>)
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	891b      	ldrh	r3, [r3, #8]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d006      	beq.n	8010732 <tcp_receive+0xad6>
          recv_data = inseg.p;
 8010724:	4b47      	ldr	r3, [pc, #284]	; (8010844 <tcp_receive+0xbe8>)
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	4a4b      	ldr	r2, [pc, #300]	; (8010858 <tcp_receive+0xbfc>)
 801072a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801072c:	4b45      	ldr	r3, [pc, #276]	; (8010844 <tcp_receive+0xbe8>)
 801072e:	2200      	movs	r2, #0
 8010730:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010732:	4b44      	ldr	r3, [pc, #272]	; (8010844 <tcp_receive+0xbe8>)
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	899b      	ldrh	r3, [r3, #12]
 8010738:	b29b      	uxth	r3, r3
 801073a:	4618      	mov	r0, r3
 801073c:	f7f7 f8a2 	bl	8007884 <lwip_htons>
 8010740:	4603      	mov	r3, r0
 8010742:	f003 0301 	and.w	r3, r3, #1
 8010746:	2b00      	cmp	r3, #0
 8010748:	f000 80b4 	beq.w	80108b4 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801074c:	4b43      	ldr	r3, [pc, #268]	; (801085c <tcp_receive+0xc00>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	f043 0320 	orr.w	r3, r3, #32
 8010754:	b2da      	uxtb	r2, r3
 8010756:	4b41      	ldr	r3, [pc, #260]	; (801085c <tcp_receive+0xc00>)
 8010758:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801075a:	e0ab      	b.n	80108b4 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010760:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	4a35      	ldr	r2, [pc, #212]	; (8010840 <tcp_receive+0xbe4>)
 801076c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	891b      	ldrh	r3, [r3, #8]
 8010772:	461c      	mov	r4, r3
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	899b      	ldrh	r3, [r3, #12]
 801077a:	b29b      	uxth	r3, r3
 801077c:	4618      	mov	r0, r3
 801077e:	f7f7 f881 	bl	8007884 <lwip_htons>
 8010782:	4603      	mov	r3, r0
 8010784:	f003 0303 	and.w	r3, r3, #3
 8010788:	2b00      	cmp	r3, #0
 801078a:	d001      	beq.n	8010790 <tcp_receive+0xb34>
 801078c:	2301      	movs	r3, #1
 801078e:	e000      	b.n	8010792 <tcp_receive+0xb36>
 8010790:	2300      	movs	r3, #0
 8010792:	4423      	add	r3, r4
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010798:	441a      	add	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107a2:	461c      	mov	r4, r3
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	891b      	ldrh	r3, [r3, #8]
 80107a8:	461d      	mov	r5, r3
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	899b      	ldrh	r3, [r3, #12]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f7 f866 	bl	8007884 <lwip_htons>
 80107b8:	4603      	mov	r3, r0
 80107ba:	f003 0303 	and.w	r3, r3, #3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d001      	beq.n	80107c6 <tcp_receive+0xb6a>
 80107c2:	2301      	movs	r3, #1
 80107c4:	e000      	b.n	80107c8 <tcp_receive+0xb6c>
 80107c6:	2300      	movs	r3, #0
 80107c8:	442b      	add	r3, r5
 80107ca:	429c      	cmp	r4, r3
 80107cc:	d206      	bcs.n	80107dc <tcp_receive+0xb80>
 80107ce:	4b1e      	ldr	r3, [pc, #120]	; (8010848 <tcp_receive+0xbec>)
 80107d0:	f240 52de 	movw	r2, #1502	; 0x5de
 80107d4:	4922      	ldr	r1, [pc, #136]	; (8010860 <tcp_receive+0xc04>)
 80107d6:	481e      	ldr	r0, [pc, #120]	; (8010850 <tcp_receive+0xbf4>)
 80107d8:	f003 fdf8 	bl	80143cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	891b      	ldrh	r3, [r3, #8]
 80107e0:	461c      	mov	r4, r3
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	899b      	ldrh	r3, [r3, #12]
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7f7 f84a 	bl	8007884 <lwip_htons>
 80107f0:	4603      	mov	r3, r0
 80107f2:	f003 0303 	and.w	r3, r3, #3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <tcp_receive+0xba2>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e000      	b.n	8010800 <tcp_receive+0xba4>
 80107fe:	2300      	movs	r3, #0
 8010800:	18e1      	adds	r1, r4, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010806:	b28b      	uxth	r3, r1
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	b29a      	uxth	r2, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7fd f877 	bl	800d904 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	891b      	ldrh	r3, [r3, #8]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d028      	beq.n	8010872 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010820:	4b0d      	ldr	r3, [pc, #52]	; (8010858 <tcp_receive+0xbfc>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d01d      	beq.n	8010864 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 8010828:	4b0b      	ldr	r3, [pc, #44]	; (8010858 <tcp_receive+0xbfc>)
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	4619      	mov	r1, r3
 8010832:	4610      	mov	r0, r2
 8010834:	f7fc faa4 	bl	800cd80 <pbuf_cat>
 8010838:	e018      	b.n	801086c <tcp_receive+0xc10>
 801083a:	bf00      	nop
 801083c:	20003f6e 	.word	0x20003f6e
 8010840:	20003f64 	.word	0x20003f64
 8010844:	20003f44 	.word	0x20003f44
 8010848:	0801746c 	.word	0x0801746c
 801084c:	08017770 	.word	0x08017770
 8010850:	080174b0 	.word	0x080174b0
 8010854:	080177ac 	.word	0x080177ac
 8010858:	20003f74 	.word	0x20003f74
 801085c:	20003f71 	.word	0x20003f71
 8010860:	080177cc 	.word	0x080177cc
            } else {
              recv_data = cseg->p;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	4a71      	ldr	r2, [pc, #452]	; (8010a30 <tcp_receive+0xdd4>)
 801086a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2200      	movs	r2, #0
 8010870:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	899b      	ldrh	r3, [r3, #12]
 8010878:	b29b      	uxth	r3, r3
 801087a:	4618      	mov	r0, r3
 801087c:	f7f7 f802 	bl	8007884 <lwip_htons>
 8010880:	4603      	mov	r3, r0
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00d      	beq.n	80108a6 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801088a:	4b6a      	ldr	r3, [pc, #424]	; (8010a34 <tcp_receive+0xdd8>)
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	f043 0320 	orr.w	r3, r3, #32
 8010892:	b2da      	uxtb	r2, r3
 8010894:	4b67      	ldr	r3, [pc, #412]	; (8010a34 <tcp_receive+0xdd8>)
 8010896:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	7d1b      	ldrb	r3, [r3, #20]
 801089c:	2b04      	cmp	r3, #4
 801089e:	d102      	bne.n	80108a6 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2207      	movs	r2, #7
 80108a4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80108ae:	68b8      	ldr	r0, [r7, #8]
 80108b0:	f7fd fcb7 	bl	800e222 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d008      	beq.n	80108ce <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	685a      	ldr	r2, [r3, #4]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80108c8:	429a      	cmp	r2, r3
 80108ca:	f43f af47 	beq.w	801075c <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	7e9b      	ldrb	r3, [r3, #26]
 80108d2:	f003 0301 	and.w	r3, r3, #1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00e      	beq.n	80108f8 <tcp_receive+0xc9c>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	7e9b      	ldrb	r3, [r3, #26]
 80108de:	f023 0301 	bic.w	r3, r3, #1
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	769a      	strb	r2, [r3, #26]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7e9b      	ldrb	r3, [r3, #26]
 80108ec:	f043 0302 	orr.w	r3, r3, #2
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80108f6:	e180      	b.n	8010bfa <tcp_receive+0xf9e>
        tcp_ack(pcb);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	7e9b      	ldrb	r3, [r3, #26]
 80108fc:	f043 0301 	orr.w	r3, r3, #1
 8010900:	b2da      	uxtb	r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010906:	e178      	b.n	8010bfa <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f001 f8c7 	bl	8011a9c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010912:	2b00      	cmp	r3, #0
 8010914:	d106      	bne.n	8010924 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010916:	4848      	ldr	r0, [pc, #288]	; (8010a38 <tcp_receive+0xddc>)
 8010918:	f7fd fc9b 	bl	800e252 <tcp_seg_copy>
 801091c:	4602      	mov	r2, r0
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8010922:	e16a      	b.n	8010bfa <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010924:	2300      	movs	r3, #0
 8010926:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801092c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801092e:	e14f      	b.n	8010bd0 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 8010930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	4b41      	ldr	r3, [pc, #260]	; (8010a3c <tcp_receive+0xde0>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	429a      	cmp	r2, r3
 801093c:	d11d      	bne.n	801097a <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801093e:	4b3e      	ldr	r3, [pc, #248]	; (8010a38 <tcp_receive+0xddc>)
 8010940:	891a      	ldrh	r2, [r3, #8]
 8010942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010944:	891b      	ldrh	r3, [r3, #8]
 8010946:	429a      	cmp	r2, r3
 8010948:	f240 8147 	bls.w	8010bda <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801094c:	483a      	ldr	r0, [pc, #232]	; (8010a38 <tcp_receive+0xddc>)
 801094e:	f7fd fc80 	bl	800e252 <tcp_seg_copy>
 8010952:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	2b00      	cmp	r3, #0
 8010958:	f000 8141 	beq.w	8010bde <tcp_receive+0xf82>
                  if (prev != NULL) {
 801095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095e:	2b00      	cmp	r3, #0
 8010960:	d003      	beq.n	801096a <tcp_receive+0xd0e>
                    prev->next = cseg;
 8010962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	601a      	str	r2, [r3, #0]
 8010968:	e002      	b.n	8010970 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68ba      	ldr	r2, [r7, #8]
 801096e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010972:	68b8      	ldr	r0, [r7, #8]
 8010974:	f7ff f8fc 	bl	800fb70 <tcp_oos_insert_segment>
                }
                break;
 8010978:	e131      	b.n	8010bde <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097c:	2b00      	cmp	r3, #0
 801097e:	d117      	bne.n	80109b0 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010980:	4b2e      	ldr	r3, [pc, #184]	; (8010a3c <tcp_receive+0xde0>)
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	1ad3      	subs	r3, r2, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	da57      	bge.n	8010a40 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8010990:	4829      	ldr	r0, [pc, #164]	; (8010a38 <tcp_receive+0xddc>)
 8010992:	f7fd fc5e 	bl	800e252 <tcp_seg_copy>
 8010996:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	2b00      	cmp	r3, #0
 801099c:	f000 8121 	beq.w	8010be2 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80109a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109a8:	68b8      	ldr	r0, [r7, #8]
 80109aa:	f7ff f8e1 	bl	800fb70 <tcp_oos_insert_segment>
                  }
                  break;
 80109ae:	e118      	b.n	8010be2 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80109b0:	4b22      	ldr	r3, [pc, #136]	; (8010a3c <tcp_receive+0xde0>)
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	3b01      	subs	r3, #1
 80109be:	2b00      	cmp	r3, #0
 80109c0:	db3e      	blt.n	8010a40 <tcp_receive+0xde4>
 80109c2:	4b1e      	ldr	r3, [pc, #120]	; (8010a3c <tcp_receive+0xde0>)
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	1ad3      	subs	r3, r2, r3
 80109ce:	3301      	adds	r3, #1
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	dc35      	bgt.n	8010a40 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80109d4:	4818      	ldr	r0, [pc, #96]	; (8010a38 <tcp_receive+0xddc>)
 80109d6:	f7fd fc3c 	bl	800e252 <tcp_seg_copy>
 80109da:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f000 8101 	beq.w	8010be6 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80109e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109ec:	8912      	ldrh	r2, [r2, #8]
 80109ee:	441a      	add	r2, r3
 80109f0:	4b12      	ldr	r3, [pc, #72]	; (8010a3c <tcp_receive+0xde0>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	dd12      	ble.n	8010a20 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80109fa:	4b10      	ldr	r3, [pc, #64]	; (8010a3c <tcp_receive+0xde0>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	891b      	ldrh	r3, [r3, #8]
 8010a18:	4619      	mov	r1, r3
 8010a1a:	4610      	mov	r0, r2
 8010a1c:	f7fb ff62 	bl	800c8e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a28:	68b8      	ldr	r0, [r7, #8]
 8010a2a:	f7ff f8a1 	bl	800fb70 <tcp_oos_insert_segment>
                  }
                  break;
 8010a2e:	e0da      	b.n	8010be6 <tcp_receive+0xf8a>
 8010a30:	20003f74 	.word	0x20003f74
 8010a34:	20003f71 	.word	0x20003f71
 8010a38:	20003f44 	.word	0x20003f44
 8010a3c:	20003f64 	.word	0x20003f64
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f040 80be 	bne.w	8010bc6 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010a4a:	4b7b      	ldr	r3, [pc, #492]	; (8010c38 <tcp_receive+0xfdc>)
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f340 80b5 	ble.w	8010bc6 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	899b      	ldrh	r3, [r3, #12]
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7f6 ff0d 	bl	8007884 <lwip_htons>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	f003 0301 	and.w	r3, r3, #1
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f040 80ba 	bne.w	8010bea <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010a76:	4871      	ldr	r0, [pc, #452]	; (8010c3c <tcp_receive+0xfe0>)
 8010a78:	f7fd fbeb 	bl	800e252 <tcp_seg_copy>
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a80:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f000 80b1 	beq.w	8010bee <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a94:	8912      	ldrh	r2, [r2, #8]
 8010a96:	441a      	add	r2, r3
 8010a98:	4b67      	ldr	r3, [pc, #412]	; (8010c38 <tcp_receive+0xfdc>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	dd12      	ble.n	8010ac8 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010aa2:	4b65      	ldr	r3, [pc, #404]	; (8010c38 <tcp_receive+0xfdc>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aba:	685a      	ldr	r2, [r3, #4]
 8010abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010abe:	891b      	ldrh	r3, [r3, #8]
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	f7fb ff0e 	bl	800c8e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010ac8:	4b5d      	ldr	r3, [pc, #372]	; (8010c40 <tcp_receive+0xfe4>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	4b5a      	ldr	r3, [pc, #360]	; (8010c38 <tcp_receive+0xfdc>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	441a      	add	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010adc:	440b      	add	r3, r1
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f340 8084 	ble.w	8010bee <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	899b      	ldrh	r3, [r3, #12]
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7f6 fec7 	bl	8007884 <lwip_htons>
 8010af6:	4603      	mov	r3, r0
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d01d      	beq.n	8010b3c <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	68dc      	ldr	r4, [r3, #12]
 8010b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	899b      	ldrh	r3, [r3, #12]
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b14:	b29d      	uxth	r5, r3
 8010b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	899b      	ldrh	r3, [r3, #12]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7f6 feaf 	bl	8007884 <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7f6 fea8 	bl	8007884 <lwip_htons>
 8010b34:	4603      	mov	r3, r0
 8010b36:	432b      	orrs	r3, r5
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010b44:	b291      	uxth	r1, r2
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010b4a:	440a      	add	r2, r1
 8010b4c:	b291      	uxth	r1, r2
 8010b4e:	4a3a      	ldr	r2, [pc, #232]	; (8010c38 <tcp_receive+0xfdc>)
 8010b50:	6812      	ldr	r2, [r2, #0]
 8010b52:	b292      	uxth	r2, r2
 8010b54:	1a8a      	subs	r2, r1, r2
 8010b56:	b292      	uxth	r2, r2
 8010b58:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	891b      	ldrh	r3, [r3, #8]
 8010b66:	4619      	mov	r1, r3
 8010b68:	4610      	mov	r0, r2
 8010b6a:	f7fb febb 	bl	800c8e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	891c      	ldrh	r4, [r3, #8]
 8010b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	899b      	ldrh	r3, [r3, #12]
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7f6 fe80 	bl	8007884 <lwip_htons>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f003 0303 	and.w	r3, r3, #3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d001      	beq.n	8010b92 <tcp_receive+0xf36>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <tcp_receive+0xf38>
 8010b92:	2300      	movs	r3, #0
 8010b94:	4423      	add	r3, r4
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	4b29      	ldr	r3, [pc, #164]	; (8010c40 <tcp_receive+0xfe4>)
 8010b9a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b9c:	4b28      	ldr	r3, [pc, #160]	; (8010c40 <tcp_receive+0xfe4>)
 8010b9e:	881b      	ldrh	r3, [r3, #0]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	4b25      	ldr	r3, [pc, #148]	; (8010c38 <tcp_receive+0xfdc>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	441a      	add	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bac:	6879      	ldr	r1, [r7, #4]
 8010bae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bb0:	440b      	add	r3, r1
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d01b      	beq.n	8010bee <tcp_receive+0xf92>
 8010bb6:	4b23      	ldr	r3, [pc, #140]	; (8010c44 <tcp_receive+0xfe8>)
 8010bb8:	f240 627b 	movw	r2, #1659	; 0x67b
 8010bbc:	4922      	ldr	r1, [pc, #136]	; (8010c48 <tcp_receive+0xfec>)
 8010bbe:	4823      	ldr	r0, [pc, #140]	; (8010c4c <tcp_receive+0xff0>)
 8010bc0:	f003 fc04 	bl	80143cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010bc4:	e013      	b.n	8010bee <tcp_receive+0xf92>
              }
            }
            prev = next;
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f47f aeac 	bne.w	8010930 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8010bd8:	e00f      	b.n	8010bfa <tcp_receive+0xf9e>
                break;
 8010bda:	bf00      	nop
 8010bdc:	e00d      	b.n	8010bfa <tcp_receive+0xf9e>
                break;
 8010bde:	bf00      	nop
 8010be0:	e00b      	b.n	8010bfa <tcp_receive+0xf9e>
                  break;
 8010be2:	bf00      	nop
 8010be4:	e009      	b.n	8010bfa <tcp_receive+0xf9e>
                  break;
 8010be6:	bf00      	nop
 8010be8:	e007      	b.n	8010bfa <tcp_receive+0xf9e>
                  break;
 8010bea:	bf00      	nop
 8010bec:	e005      	b.n	8010bfa <tcp_receive+0xf9e>
                break;
 8010bee:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8010bf0:	e003      	b.n	8010bfa <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 ff52 	bl	8011a9c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bf8:	e01a      	b.n	8010c30 <tcp_receive+0xfd4>
 8010bfa:	e019      	b.n	8010c30 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010bfc:	4b0e      	ldr	r3, [pc, #56]	; (8010c38 <tcp_receive+0xfdc>)
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	db0a      	blt.n	8010c20 <tcp_receive+0xfc4>
 8010c0a:	4b0b      	ldr	r3, [pc, #44]	; (8010c38 <tcp_receive+0xfdc>)
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c12:	6879      	ldr	r1, [r7, #4]
 8010c14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c16:	440b      	add	r3, r1
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	dd07      	ble.n	8010c30 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	7e9b      	ldrb	r3, [r3, #26]
 8010c24:	f043 0302 	orr.w	r3, r3, #2
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8010c2e:	e7ff      	b.n	8010c30 <tcp_receive+0xfd4>
 8010c30:	bf00      	nop
 8010c32:	3734      	adds	r7, #52	; 0x34
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c38:	20003f64 	.word	0x20003f64
 8010c3c:	20003f44 	.word	0x20003f44
 8010c40:	20003f6e 	.word	0x20003f6e
 8010c44:	0801746c 	.word	0x0801746c
 8010c48:	08017738 	.word	0x08017738
 8010c4c:	080174b0 	.word	0x080174b0

08010c50 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010c56:	4b18      	ldr	r3, [pc, #96]	; (8010cb8 <tcp_getoptbyte+0x68>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <tcp_getoptbyte+0x1a>
 8010c5e:	4b17      	ldr	r3, [pc, #92]	; (8010cbc <tcp_getoptbyte+0x6c>)
 8010c60:	881a      	ldrh	r2, [r3, #0]
 8010c62:	4b17      	ldr	r3, [pc, #92]	; (8010cc0 <tcp_getoptbyte+0x70>)
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d20e      	bcs.n	8010c88 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010c6a:	4b16      	ldr	r3, [pc, #88]	; (8010cc4 <tcp_getoptbyte+0x74>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	3314      	adds	r3, #20
 8010c70:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8010c72:	4b12      	ldr	r3, [pc, #72]	; (8010cbc <tcp_getoptbyte+0x6c>)
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	1c5a      	adds	r2, r3, #1
 8010c78:	b291      	uxth	r1, r2
 8010c7a:	4a10      	ldr	r2, [pc, #64]	; (8010cbc <tcp_getoptbyte+0x6c>)
 8010c7c:	8011      	strh	r1, [r2, #0]
 8010c7e:	461a      	mov	r2, r3
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	4413      	add	r3, r2
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	e010      	b.n	8010caa <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8010c88:	4b0c      	ldr	r3, [pc, #48]	; (8010cbc <tcp_getoptbyte+0x6c>)
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	1c5a      	adds	r2, r3, #1
 8010c8e:	b291      	uxth	r1, r2
 8010c90:	4a0a      	ldr	r2, [pc, #40]	; (8010cbc <tcp_getoptbyte+0x6c>)
 8010c92:	8011      	strh	r1, [r2, #0]
 8010c94:	b2da      	uxtb	r2, r3
 8010c96:	4b0a      	ldr	r3, [pc, #40]	; (8010cc0 <tcp_getoptbyte+0x70>)
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8010ca0:	4b05      	ldr	r3, [pc, #20]	; (8010cb8 <tcp_getoptbyte+0x68>)
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	79fb      	ldrb	r3, [r7, #7]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	370c      	adds	r7, #12
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	20003f5c 	.word	0x20003f5c
 8010cbc:	20003f60 	.word	0x20003f60
 8010cc0:	20003f5a 	.word	0x20003f5a
 8010cc4:	20003f54 	.word	0x20003f54

08010cc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010cd0:	4b2d      	ldr	r3, [pc, #180]	; (8010d88 <tcp_parseopt+0xc0>)
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d053      	beq.n	8010d80 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010cd8:	4b2c      	ldr	r3, [pc, #176]	; (8010d8c <tcp_parseopt+0xc4>)
 8010cda:	2200      	movs	r2, #0
 8010cdc:	801a      	strh	r2, [r3, #0]
 8010cde:	e043      	b.n	8010d68 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8010ce0:	f7ff ffb6 	bl	8010c50 <tcp_getoptbyte>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ce8:	7bfb      	ldrb	r3, [r7, #15]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d03c      	beq.n	8010d68 <tcp_parseopt+0xa0>
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	d002      	beq.n	8010cf8 <tcp_parseopt+0x30>
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d03f      	beq.n	8010d76 <tcp_parseopt+0xae>
 8010cf6:	e026      	b.n	8010d46 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010cf8:	f7ff ffaa 	bl	8010c50 <tcp_getoptbyte>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b04      	cmp	r3, #4
 8010d00:	d13b      	bne.n	8010d7a <tcp_parseopt+0xb2>
 8010d02:	4b22      	ldr	r3, [pc, #136]	; (8010d8c <tcp_parseopt+0xc4>)
 8010d04:	881b      	ldrh	r3, [r3, #0]
 8010d06:	3302      	adds	r3, #2
 8010d08:	4a1f      	ldr	r2, [pc, #124]	; (8010d88 <tcp_parseopt+0xc0>)
 8010d0a:	8812      	ldrh	r2, [r2, #0]
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	dc34      	bgt.n	8010d7a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010d10:	f7ff ff9e 	bl	8010c50 <tcp_getoptbyte>
 8010d14:	4603      	mov	r3, r0
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	021b      	lsls	r3, r3, #8
 8010d1a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8010d1c:	f7ff ff98 	bl	8010c50 <tcp_getoptbyte>
 8010d20:	4603      	mov	r3, r0
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	89bb      	ldrh	r3, [r7, #12]
 8010d26:	4313      	orrs	r3, r2
 8010d28:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010d2a:	89bb      	ldrh	r3, [r7, #12]
 8010d2c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010d30:	d804      	bhi.n	8010d3c <tcp_parseopt+0x74>
 8010d32:	89bb      	ldrh	r3, [r7, #12]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <tcp_parseopt+0x74>
 8010d38:	89ba      	ldrh	r2, [r7, #12]
 8010d3a:	e001      	b.n	8010d40 <tcp_parseopt+0x78>
 8010d3c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010d44:	e010      	b.n	8010d68 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8010d46:	f7ff ff83 	bl	8010c50 <tcp_getoptbyte>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8010d4e:	7afb      	ldrb	r3, [r7, #11]
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d914      	bls.n	8010d7e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010d54:	7afb      	ldrb	r3, [r7, #11]
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	4b0c      	ldr	r3, [pc, #48]	; (8010d8c <tcp_parseopt+0xc4>)
 8010d5a:	881b      	ldrh	r3, [r3, #0]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	3b02      	subs	r3, #2
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	4b09      	ldr	r3, [pc, #36]	; (8010d8c <tcp_parseopt+0xc4>)
 8010d66:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010d68:	4b08      	ldr	r3, [pc, #32]	; (8010d8c <tcp_parseopt+0xc4>)
 8010d6a:	881a      	ldrh	r2, [r3, #0]
 8010d6c:	4b06      	ldr	r3, [pc, #24]	; (8010d88 <tcp_parseopt+0xc0>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d3b5      	bcc.n	8010ce0 <tcp_parseopt+0x18>
 8010d74:	e004      	b.n	8010d80 <tcp_parseopt+0xb8>
        return;
 8010d76:	bf00      	nop
 8010d78:	e002      	b.n	8010d80 <tcp_parseopt+0xb8>
          return;
 8010d7a:	bf00      	nop
 8010d7c:	e000      	b.n	8010d80 <tcp_parseopt+0xb8>
          return;
 8010d7e:	bf00      	nop
      }
    }
  }
}
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20003f58 	.word	0x20003f58
 8010d8c:	20003f60 	.word	0x20003f60

08010d90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010d90:	b480      	push	{r7}
 8010d92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010d94:	4b05      	ldr	r3, [pc, #20]	; (8010dac <tcp_trigger_input_pcb_close+0x1c>)
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	f043 0310 	orr.w	r3, r3, #16
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	4b03      	ldr	r3, [pc, #12]	; (8010dac <tcp_trigger_input_pcb_close+0x1c>)
 8010da0:	701a      	strb	r2, [r3, #0]
}
 8010da2:	bf00      	nop
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr
 8010dac:	20003f71 	.word	0x20003f71

08010db0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b086      	sub	sp, #24
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	607b      	str	r3, [r7, #4]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	817b      	strh	r3, [r7, #10]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010dc2:	897a      	ldrh	r2, [r7, #10]
 8010dc4:	893b      	ldrh	r3, [r7, #8]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	3314      	adds	r3, #20
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	2200      	movs	r2, #0
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	2001      	movs	r0, #1
 8010dd4:	f7fb fb88 	bl	800c4e8 <pbuf_alloc>
 8010dd8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d057      	beq.n	8010e90 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	895b      	ldrh	r3, [r3, #10]
 8010de4:	461a      	mov	r2, r3
 8010de6:	897b      	ldrh	r3, [r7, #10]
 8010de8:	3314      	adds	r3, #20
 8010dea:	429a      	cmp	r2, r3
 8010dec:	da05      	bge.n	8010dfa <tcp_output_alloc_header+0x4a>
 8010dee:	4b2b      	ldr	r3, [pc, #172]	; (8010e9c <tcp_output_alloc_header+0xec>)
 8010df0:	2273      	movs	r2, #115	; 0x73
 8010df2:	492b      	ldr	r1, [pc, #172]	; (8010ea0 <tcp_output_alloc_header+0xf0>)
 8010df4:	482b      	ldr	r0, [pc, #172]	; (8010ea4 <tcp_output_alloc_header+0xf4>)
 8010df6:	f003 fae9 	bl	80143cc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	8adb      	ldrh	r3, [r3, #22]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7f6 fd3d 	bl	8007884 <lwip_htons>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	8b1b      	ldrh	r3, [r3, #24]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7f6 fd34 	bl	8007884 <lwip_htons>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	461a      	mov	r2, r3
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7f6 fd36 	bl	80078a0 <lwip_htonl>
 8010e34:	4602      	mov	r2, r0
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010e3a:	897b      	ldrh	r3, [r7, #10]
 8010e3c:	089b      	lsrs	r3, r3, #2
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	3305      	adds	r3, #5
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	031b      	lsls	r3, r3, #12
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	f043 0310 	orr.w	r3, r3, #16
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f6 fd18 	bl	8007884 <lwip_htons>
 8010e54:	4603      	mov	r3, r0
 8010e56:	461a      	mov	r2, r3
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7f6 fd0f 	bl	8007884 <lwip_htons>
 8010e66:	4603      	mov	r3, r0
 8010e68:	461a      	mov	r2, r3
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	2200      	movs	r2, #0
 8010e72:	741a      	strb	r2, [r3, #16]
 8010e74:	2200      	movs	r2, #0
 8010e76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	749a      	strb	r2, [r3, #18]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010e8a:	441a      	add	r2, r3
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010e90:	697b      	ldr	r3, [r7, #20]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3718      	adds	r7, #24
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	080177f4 	.word	0x080177f4
 8010ea0:	08017828 	.word	0x08017828
 8010ea4:	08017858 	.word	0x08017858

08010ea8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010ea8:	b5b0      	push	{r4, r5, r7, lr}
 8010eaa:	b084      	sub	sp, #16
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d02c      	beq.n	8010f12 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ebc:	60fb      	str	r3, [r7, #12]
 8010ebe:	e002      	b.n	8010ec6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1f8      	bne.n	8010ec0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	899b      	ldrh	r3, [r3, #12]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7f6 fcd4 	bl	8007884 <lwip_htons>
 8010edc:	4603      	mov	r3, r0
 8010ede:	f003 0307 	and.w	r3, r3, #7
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d115      	bne.n	8010f12 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	68dc      	ldr	r4, [r3, #12]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	899b      	ldrh	r3, [r3, #12]
 8010ef0:	b29d      	uxth	r5, r3
 8010ef2:	2001      	movs	r0, #1
 8010ef4:	f7f6 fcc6 	bl	8007884 <lwip_htons>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	432b      	orrs	r3, r5
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	7e9b      	ldrb	r3, [r3, #26]
 8010f04:	f043 0320 	orr.w	r3, r3, #32
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	e004      	b.n	8010f1c <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010f12:	2101      	movs	r1, #1
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 fcc3 	bl	80118a0 <tcp_enqueue_flags>
 8010f1a:	4603      	mov	r3, r0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bdb0      	pop	{r4, r5, r7, pc}

08010f24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b087      	sub	sp, #28
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	603b      	str	r3, [r7, #0]
 8010f30:	4613      	mov	r3, r2
 8010f32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f38:	f003 0301 	and.w	r3, r3, #1
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <tcp_create_segment+0x20>
 8010f40:	2304      	movs	r3, #4
 8010f42:	e000      	b.n	8010f46 <tcp_create_segment+0x22>
 8010f44:	2300      	movs	r3, #0
 8010f46:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010f48:	2003      	movs	r0, #3
 8010f4a:	f7fb f88b 	bl	800c064 <memp_malloc>
 8010f4e:	6138      	str	r0, [r7, #16]
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d104      	bne.n	8010f60 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010f56:	68b8      	ldr	r0, [r7, #8]
 8010f58:	f7fb fe38 	bl	800cbcc <pbuf_free>
    return NULL;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	e061      	b.n	8011024 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010f66:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	891a      	ldrh	r2, [r3, #8]
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d205      	bcs.n	8010f8c <tcp_create_segment+0x68>
 8010f80:	4b2a      	ldr	r3, [pc, #168]	; (801102c <tcp_create_segment+0x108>)
 8010f82:	22ba      	movs	r2, #186	; 0xba
 8010f84:	492a      	ldr	r1, [pc, #168]	; (8011030 <tcp_create_segment+0x10c>)
 8010f86:	482b      	ldr	r0, [pc, #172]	; (8011034 <tcp_create_segment+0x110>)
 8010f88:	f003 fa20 	bl	80143cc <iprintf>
  seg->len = p->tot_len - optlen;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	891a      	ldrh	r2, [r3, #8]
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	1ad3      	subs	r3, r2, r3
 8010f96:	b29a      	uxth	r2, r3
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010f9c:	2114      	movs	r1, #20
 8010f9e:	68b8      	ldr	r0, [r7, #8]
 8010fa0:	f7fb fdf0 	bl	800cb84 <pbuf_header>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d004      	beq.n	8010fb4 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010faa:	6938      	ldr	r0, [r7, #16]
 8010fac:	f7fd f939 	bl	800e222 <tcp_seg_free>
    return NULL;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	e037      	b.n	8011024 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	68dc      	ldr	r4, [r3, #12]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	8adb      	ldrh	r3, [r3, #22]
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7f6 fc5c 	bl	8007884 <lwip_htons>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	68dc      	ldr	r4, [r3, #12]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	8b1b      	ldrh	r3, [r3, #24]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7f6 fc53 	bl	8007884 <lwip_htons>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	68dc      	ldr	r4, [r3, #12]
 8010fe6:	6838      	ldr	r0, [r7, #0]
 8010fe8:	f7f6 fc5a 	bl	80078a0 <lwip_htonl>
 8010fec:	4603      	mov	r3, r0
 8010fee:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	68dc      	ldr	r4, [r3, #12]
 8010ff4:	7dfb      	ldrb	r3, [r7, #23]
 8010ff6:	089b      	lsrs	r3, r3, #2
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	3305      	adds	r3, #5
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	031b      	lsls	r3, r3, #12
 8011002:	b29a      	uxth	r2, r3
 8011004:	79fb      	ldrb	r3, [r7, #7]
 8011006:	b29b      	uxth	r3, r3
 8011008:	4313      	orrs	r3, r2
 801100a:	b29b      	uxth	r3, r3
 801100c:	4618      	mov	r0, r3
 801100e:	f7f6 fc39 	bl	8007884 <lwip_htons>
 8011012:	4603      	mov	r3, r0
 8011014:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	2200      	movs	r2, #0
 801101c:	749a      	strb	r2, [r3, #18]
 801101e:	2200      	movs	r2, #0
 8011020:	74da      	strb	r2, [r3, #19]
  return seg;
 8011022:	693b      	ldr	r3, [r7, #16]
}
 8011024:	4618      	mov	r0, r3
 8011026:	371c      	adds	r7, #28
 8011028:	46bd      	mov	sp, r7
 801102a:	bd90      	pop	{r4, r7, pc}
 801102c:	080177f4 	.word	0x080177f4
 8011030:	08017880 	.word	0x08017880
 8011034:	08017858 	.word	0x08017858

08011038 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	607b      	str	r3, [r7, #4]
 8011040:	4603      	mov	r3, r0
 8011042:	73fb      	strb	r3, [r7, #15]
 8011044:	460b      	mov	r3, r1
 8011046:	81bb      	strh	r3, [r7, #12]
 8011048:	4613      	mov	r3, r2
 801104a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801104c:	89bb      	ldrh	r3, [r7, #12]
 801104e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011050:	89ba      	ldrh	r2, [r7, #12]
 8011052:	897b      	ldrh	r3, [r7, #10]
 8011054:	429a      	cmp	r2, r3
 8011056:	d221      	bcs.n	801109c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011058:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801105c:	f003 0302 	and.w	r3, r3, #2
 8011060:	2b00      	cmp	r3, #0
 8011062:	d111      	bne.n	8011088 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	7e9b      	ldrb	r3, [r3, #26]
 8011068:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801106c:	2b00      	cmp	r3, #0
 801106e:	d115      	bne.n	801109c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8011070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011074:	2b00      	cmp	r3, #0
 8011076:	d007      	beq.n	8011088 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011078:	6a3b      	ldr	r3, [r7, #32]
 801107a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801107c:	2b00      	cmp	r3, #0
 801107e:	d103      	bne.n	8011088 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8011080:	6a3b      	ldr	r3, [r7, #32]
 8011082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8011084:	2b00      	cmp	r3, #0
 8011086:	d009      	beq.n	801109c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011088:	89bb      	ldrh	r3, [r7, #12]
 801108a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801108e:	f023 0203 	bic.w	r2, r3, #3
 8011092:	897b      	ldrh	r3, [r7, #10]
 8011094:	4293      	cmp	r3, r2
 8011096:	bf28      	it	cs
 8011098:	4613      	movcs	r3, r2
 801109a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801109c:	8af9      	ldrh	r1, [r7, #22]
 801109e:	7bfb      	ldrb	r3, [r7, #15]
 80110a0:	2200      	movs	r2, #0
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fb fa20 	bl	800c4e8 <pbuf_alloc>
 80110a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d101      	bne.n	80110b4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80110b0:	2300      	movs	r3, #0
 80110b2:	e019      	b.n	80110e8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d006      	beq.n	80110ca <tcp_pbuf_prealloc+0x92>
 80110bc:	4b0c      	ldr	r3, [pc, #48]	; (80110f0 <tcp_pbuf_prealloc+0xb8>)
 80110be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80110c2:	490c      	ldr	r1, [pc, #48]	; (80110f4 <tcp_pbuf_prealloc+0xbc>)
 80110c4:	480c      	ldr	r0, [pc, #48]	; (80110f8 <tcp_pbuf_prealloc+0xc0>)
 80110c6:	f003 f981 	bl	80143cc <iprintf>
  *oversize = p->len - length;
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	895a      	ldrh	r2, [r3, #10]
 80110ce:	89bb      	ldrh	r3, [r7, #12]
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	89ba      	ldrh	r2, [r7, #12]
 80110dc:	811a      	strh	r2, [r3, #8]
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	891a      	ldrh	r2, [r3, #8]
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	815a      	strh	r2, [r3, #10]
  return p;
 80110e6:	693b      	ldr	r3, [r7, #16]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	080177f4 	.word	0x080177f4
 80110f4:	08017898 	.word	0x08017898
 80110f8:	08017858 	.word	0x08017858

080110fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b04      	cmp	r3, #4
 801110e:	d00e      	beq.n	801112e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011114:	2b07      	cmp	r3, #7
 8011116:	d00a      	beq.n	801112e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801111c:	2b02      	cmp	r3, #2
 801111e:	d006      	beq.n	801112e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011124:	2b03      	cmp	r3, #3
 8011126:	d002      	beq.n	801112e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011128:	f06f 030a 	mvn.w	r3, #10
 801112c:	e04f      	b.n	80111ce <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801112e:	887b      	ldrh	r3, [r7, #2]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <tcp_write_checks+0x3c>
    return ERR_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	e04a      	b.n	80111ce <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801113e:	887a      	ldrh	r2, [r7, #2]
 8011140:	429a      	cmp	r2, r3
 8011142:	d909      	bls.n	8011158 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	7e9b      	ldrb	r3, [r3, #26]
 8011148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801114c:	b2da      	uxtb	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011156:	e03a      	b.n	80111ce <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801115e:	2b08      	cmp	r3, #8
 8011160:	d806      	bhi.n	8011170 <tcp_write_checks+0x74>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011168:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801116c:	4293      	cmp	r3, r2
 801116e:	d909      	bls.n	8011184 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	7e9b      	ldrb	r3, [r3, #26]
 8011174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011178:	b2da      	uxtb	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011182:	e024      	b.n	80111ce <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00f      	beq.n	80111ae <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011192:	2b00      	cmp	r3, #0
 8011194:	d11a      	bne.n	80111cc <tcp_write_checks+0xd0>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801119a:	2b00      	cmp	r3, #0
 801119c:	d116      	bne.n	80111cc <tcp_write_checks+0xd0>
 801119e:	4b0e      	ldr	r3, [pc, #56]	; (80111d8 <tcp_write_checks+0xdc>)
 80111a0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80111a4:	490d      	ldr	r1, [pc, #52]	; (80111dc <tcp_write_checks+0xe0>)
 80111a6:	480e      	ldr	r0, [pc, #56]	; (80111e0 <tcp_write_checks+0xe4>)
 80111a8:	f003 f910 	bl	80143cc <iprintf>
 80111ac:	e00e      	b.n	80111cc <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d103      	bne.n	80111be <tcp_write_checks+0xc2>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d006      	beq.n	80111cc <tcp_write_checks+0xd0>
 80111be:	4b06      	ldr	r3, [pc, #24]	; (80111d8 <tcp_write_checks+0xdc>)
 80111c0:	f240 1259 	movw	r2, #345	; 0x159
 80111c4:	4907      	ldr	r1, [pc, #28]	; (80111e4 <tcp_write_checks+0xe8>)
 80111c6:	4806      	ldr	r0, [pc, #24]	; (80111e0 <tcp_write_checks+0xe4>)
 80111c8:	f003 f900 	bl	80143cc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	080177f4 	.word	0x080177f4
 80111dc:	080178ac 	.word	0x080178ac
 80111e0:	08017858 	.word	0x08017858
 80111e4:	080178e8 	.word	0x080178e8

080111e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80111e8:	b5b0      	push	{r4, r5, r7, lr}
 80111ea:	b09a      	sub	sp, #104	; 0x68
 80111ec:	af04      	add	r7, sp, #16
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	4611      	mov	r1, r2
 80111f4:	461a      	mov	r2, r3
 80111f6:	460b      	mov	r3, r1
 80111f8:	80fb      	strh	r3, [r7, #6]
 80111fa:	4613      	mov	r3, r2
 80111fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80111fe:	2300      	movs	r3, #0
 8011200:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011202:	2300      	movs	r3, #0
 8011204:	653b      	str	r3, [r7, #80]	; 0x50
 8011206:	2300      	movs	r3, #0
 8011208:	64fb      	str	r3, [r7, #76]	; 0x4c
 801120a:	2300      	movs	r3, #0
 801120c:	64bb      	str	r3, [r7, #72]	; 0x48
 801120e:	2300      	movs	r3, #0
 8011210:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011212:	2300      	movs	r3, #0
 8011214:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8011218:	2300      	movs	r3, #0
 801121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801121e:	2300      	movs	r3, #0
 8011220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011224:	2300      	movs	r3, #0
 8011226:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011228:	2300      	movs	r3, #0
 801122a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801122c:	2300      	movs	r3, #0
 801122e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011236:	085b      	lsrs	r3, r3, #1
 8011238:	b29a      	uxth	r2, r3
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801123e:	4293      	cmp	r3, r2
 8011240:	bf28      	it	cs
 8011242:	4613      	movcs	r3, r2
 8011244:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011248:	2b00      	cmp	r3, #0
 801124a:	d102      	bne.n	8011252 <tcp_write+0x6a>
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011250:	e000      	b.n	8011254 <tcp_write+0x6c>
 8011252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011254:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d109      	bne.n	8011270 <tcp_write+0x88>
 801125c:	4b94      	ldr	r3, [pc, #592]	; (80114b0 <tcp_write+0x2c8>)
 801125e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8011262:	4994      	ldr	r1, [pc, #592]	; (80114b4 <tcp_write+0x2cc>)
 8011264:	4894      	ldr	r0, [pc, #592]	; (80114b8 <tcp_write+0x2d0>)
 8011266:	f003 f8b1 	bl	80143cc <iprintf>
 801126a:	f06f 030f 	mvn.w	r3, #15
 801126e:	e30d      	b.n	801188c <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011270:	88fb      	ldrh	r3, [r7, #6]
 8011272:	4619      	mov	r1, r3
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f7ff ff41 	bl	80110fc <tcp_write_checks>
 801127a:	4603      	mov	r3, r0
 801127c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011280:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011284:	2b00      	cmp	r3, #0
 8011286:	d002      	beq.n	801128e <tcp_write+0xa6>
    return err;
 8011288:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801128c:	e2fe      	b.n	801188c <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011294:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801129c:	2b00      	cmp	r3, #0
 801129e:	f000 80f8 	beq.w	8011492 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112a6:	653b      	str	r3, [r7, #80]	; 0x50
 80112a8:	e002      	b.n	80112b0 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80112aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80112b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d1f8      	bne.n	80112aa <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80112b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ba:	7a9b      	ldrb	r3, [r3, #10]
 80112bc:	f003 0301 	and.w	r3, r3, #1
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d001      	beq.n	80112c8 <tcp_write+0xe0>
 80112c4:	2304      	movs	r3, #4
 80112c6:	e000      	b.n	80112ca <tcp_write+0xe2>
 80112c8:	2300      	movs	r3, #0
 80112ca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80112cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80112ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112d0:	891b      	ldrh	r3, [r3, #8]
 80112d2:	4619      	mov	r1, r3
 80112d4:	8c3b      	ldrh	r3, [r7, #32]
 80112d6:	440b      	add	r3, r1
 80112d8:	429a      	cmp	r2, r3
 80112da:	da06      	bge.n	80112ea <tcp_write+0x102>
 80112dc:	4b74      	ldr	r3, [pc, #464]	; (80114b0 <tcp_write+0x2c8>)
 80112de:	f240 12c7 	movw	r2, #455	; 0x1c7
 80112e2:	4976      	ldr	r1, [pc, #472]	; (80114bc <tcp_write+0x2d4>)
 80112e4:	4874      	ldr	r0, [pc, #464]	; (80114b8 <tcp_write+0x2d0>)
 80112e6:	f003 f871 	bl	80143cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80112ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ec:	891a      	ldrh	r2, [r3, #8]
 80112ee:	8c3b      	ldrh	r3, [r7, #32]
 80112f0:	4413      	add	r3, r2
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011300:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011302:	8a7b      	ldrh	r3, [r7, #18]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d027      	beq.n	8011358 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011308:	8a7b      	ldrh	r3, [r7, #18]
 801130a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801130c:	429a      	cmp	r2, r3
 801130e:	d206      	bcs.n	801131e <tcp_write+0x136>
 8011310:	4b67      	ldr	r3, [pc, #412]	; (80114b0 <tcp_write+0x2c8>)
 8011312:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011316:	496a      	ldr	r1, [pc, #424]	; (80114c0 <tcp_write+0x2d8>)
 8011318:	4867      	ldr	r0, [pc, #412]	; (80114b8 <tcp_write+0x2d0>)
 801131a:	f003 f857 	bl	80143cc <iprintf>
      seg = last_unsent;
 801131e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011320:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011322:	8a7b      	ldrh	r3, [r7, #18]
 8011324:	88fa      	ldrh	r2, [r7, #6]
 8011326:	429a      	cmp	r2, r3
 8011328:	d901      	bls.n	801132e <tcp_write+0x146>
 801132a:	8a7b      	ldrh	r3, [r7, #18]
 801132c:	e000      	b.n	8011330 <tcp_write+0x148>
 801132e:	88fb      	ldrh	r3, [r7, #6]
 8011330:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011332:	4293      	cmp	r3, r2
 8011334:	bfa8      	it	ge
 8011336:	4613      	movge	r3, r2
 8011338:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801133a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801133e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011340:	4413      	add	r3, r2
 8011342:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011346:	8a7a      	ldrh	r2, [r7, #18]
 8011348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	b29b      	uxth	r3, r3
 801134e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011350:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011352:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011358:	8a7b      	ldrh	r3, [r7, #18]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00b      	beq.n	8011376 <tcp_write+0x18e>
 801135e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011362:	88fb      	ldrh	r3, [r7, #6]
 8011364:	429a      	cmp	r2, r3
 8011366:	d006      	beq.n	8011376 <tcp_write+0x18e>
 8011368:	4b51      	ldr	r3, [pc, #324]	; (80114b0 <tcp_write+0x2c8>)
 801136a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801136e:	4955      	ldr	r1, [pc, #340]	; (80114c4 <tcp_write+0x2dc>)
 8011370:	4851      	ldr	r0, [pc, #324]	; (80114b8 <tcp_write+0x2d0>)
 8011372:	f003 f82b 	bl	80143cc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011376:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801137a:	88fb      	ldrh	r3, [r7, #6]
 801137c:	429a      	cmp	r2, r3
 801137e:	f080 8169 	bcs.w	8011654 <tcp_write+0x46c>
 8011382:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011384:	2b00      	cmp	r3, #0
 8011386:	f000 8165 	beq.w	8011654 <tcp_write+0x46c>
 801138a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801138c:	891b      	ldrh	r3, [r3, #8]
 801138e:	2b00      	cmp	r3, #0
 8011390:	f000 8160 	beq.w	8011654 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011394:	88fa      	ldrh	r2, [r7, #6]
 8011396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801139a:	1ad2      	subs	r2, r2, r3
 801139c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801139e:	4293      	cmp	r3, r2
 80113a0:	bfa8      	it	ge
 80113a2:	4613      	movge	r3, r2
 80113a4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80113a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80113aa:	797b      	ldrb	r3, [r7, #5]
 80113ac:	f003 0301 	and.w	r3, r3, #1
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d027      	beq.n	8011404 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80113b4:	f107 0012 	add.w	r0, r7, #18
 80113b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80113ba:	8bf9      	ldrh	r1, [r7, #30]
 80113bc:	2301      	movs	r3, #1
 80113be:	9302      	str	r3, [sp, #8]
 80113c0:	797b      	ldrb	r3, [r7, #5]
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	9300      	str	r3, [sp, #0]
 80113c8:	4603      	mov	r3, r0
 80113ca:	2004      	movs	r0, #4
 80113cc:	f7ff fe34 	bl	8011038 <tcp_pbuf_prealloc>
 80113d0:	6578      	str	r0, [r7, #84]	; 0x54
 80113d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	f000 8227 	beq.w	8011828 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80113da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113dc:	6858      	ldr	r0, [r3, #4]
 80113de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113e2:	68ba      	ldr	r2, [r7, #8]
 80113e4:	4413      	add	r3, r2
 80113e6:	8bfa      	ldrh	r2, [r7, #30]
 80113e8:	4619      	mov	r1, r3
 80113ea:	f002 ffdc 	bl	80143a6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80113ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113f0:	f7fb fc86 	bl	800cd00 <pbuf_clen>
 80113f4:	4603      	mov	r3, r0
 80113f6:	461a      	mov	r2, r3
 80113f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80113fc:	4413      	add	r3, r2
 80113fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011402:	e03f      	b.n	8011484 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	637b      	str	r3, [r7, #52]	; 0x34
 801140a:	e002      	b.n	8011412 <tcp_write+0x22a>
 801140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	637b      	str	r3, [r7, #52]	; 0x34
 8011412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d1f8      	bne.n	801140c <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801141a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141c:	7b1b      	ldrb	r3, [r3, #12]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d115      	bne.n	801144e <tcp_write+0x266>
 8011422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011428:	8952      	ldrh	r2, [r2, #10]
 801142a:	441a      	add	r2, r3
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	429a      	cmp	r2, r3
 8011430:	d10d      	bne.n	801144e <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011436:	2b00      	cmp	r3, #0
 8011438:	d006      	beq.n	8011448 <tcp_write+0x260>
 801143a:	4b1d      	ldr	r3, [pc, #116]	; (80114b0 <tcp_write+0x2c8>)
 801143c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011440:	4921      	ldr	r1, [pc, #132]	; (80114c8 <tcp_write+0x2e0>)
 8011442:	481d      	ldr	r0, [pc, #116]	; (80114b8 <tcp_write+0x2d0>)
 8011444:	f002 ffc2 	bl	80143cc <iprintf>
          extendlen = seglen;
 8011448:	8bfb      	ldrh	r3, [r7, #30]
 801144a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801144c:	e01a      	b.n	8011484 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801144e:	8bfb      	ldrh	r3, [r7, #30]
 8011450:	2201      	movs	r2, #1
 8011452:	4619      	mov	r1, r3
 8011454:	2004      	movs	r0, #4
 8011456:	f7fb f847 	bl	800c4e8 <pbuf_alloc>
 801145a:	6578      	str	r0, [r7, #84]	; 0x54
 801145c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 81e4 	beq.w	801182c <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8011464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011468:	68ba      	ldr	r2, [r7, #8]
 801146a:	441a      	add	r2, r3
 801146c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801146e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011470:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011472:	f7fb fc45 	bl	800cd00 <pbuf_clen>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
 801147a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801147e:	4413      	add	r3, r2
 8011480:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011484:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011488:	8bfb      	ldrh	r3, [r7, #30]
 801148a:	4413      	add	r3, r2
 801148c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011490:	e0e0      	b.n	8011654 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 80db 	beq.w	8011654 <tcp_write+0x46c>
 801149e:	4b04      	ldr	r3, [pc, #16]	; (80114b0 <tcp_write+0x2c8>)
 80114a0:	f240 2225 	movw	r2, #549	; 0x225
 80114a4:	4909      	ldr	r1, [pc, #36]	; (80114cc <tcp_write+0x2e4>)
 80114a6:	4804      	ldr	r0, [pc, #16]	; (80114b8 <tcp_write+0x2d0>)
 80114a8:	f002 ff90 	bl	80143cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80114ac:	e0d2      	b.n	8011654 <tcp_write+0x46c>
 80114ae:	bf00      	nop
 80114b0:	080177f4 	.word	0x080177f4
 80114b4:	0801791c 	.word	0x0801791c
 80114b8:	08017858 	.word	0x08017858
 80114bc:	08017950 	.word	0x08017950
 80114c0:	08017968 	.word	0x08017968
 80114c4:	08017988 	.word	0x08017988
 80114c8:	080179a8 	.word	0x080179a8
 80114cc:	080179d4 	.word	0x080179d4
    struct pbuf *p;
    u16_t left = len - pos;
 80114d0:	88fa      	ldrh	r2, [r7, #6]
 80114d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114d6:	1ad3      	subs	r3, r2, r3
 80114d8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80114da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114de:	b29b      	uxth	r3, r3
 80114e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80114e6:	8b7a      	ldrh	r2, [r7, #26]
 80114e8:	8bbb      	ldrh	r3, [r7, #28]
 80114ea:	4293      	cmp	r3, r2
 80114ec:	bf28      	it	cs
 80114ee:	4613      	movcs	r3, r2
 80114f0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80114f2:	797b      	ldrb	r3, [r7, #5]
 80114f4:	f003 0301 	and.w	r3, r3, #1
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d036      	beq.n	801156a <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80114fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011500:	b29a      	uxth	r2, r3
 8011502:	8b3b      	ldrh	r3, [r7, #24]
 8011504:	4413      	add	r3, r2
 8011506:	b299      	uxth	r1, r3
 8011508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150a:	2b00      	cmp	r3, #0
 801150c:	bf0c      	ite	eq
 801150e:	2301      	moveq	r3, #1
 8011510:	2300      	movne	r3, #0
 8011512:	b2db      	uxtb	r3, r3
 8011514:	f107 0012 	add.w	r0, r7, #18
 8011518:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801151a:	9302      	str	r3, [sp, #8]
 801151c:	797b      	ldrb	r3, [r7, #5]
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	9300      	str	r3, [sp, #0]
 8011524:	4603      	mov	r3, r0
 8011526:	2000      	movs	r0, #0
 8011528:	f7ff fd86 	bl	8011038 <tcp_pbuf_prealloc>
 801152c:	6338      	str	r0, [r7, #48]	; 0x30
 801152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 817d 	beq.w	8011830 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	895b      	ldrh	r3, [r3, #10]
 801153a:	8b3a      	ldrh	r2, [r7, #24]
 801153c:	429a      	cmp	r2, r3
 801153e:	d906      	bls.n	801154e <tcp_write+0x366>
 8011540:	4b8f      	ldr	r3, [pc, #572]	; (8011780 <tcp_write+0x598>)
 8011542:	f240 2241 	movw	r2, #577	; 0x241
 8011546:	498f      	ldr	r1, [pc, #572]	; (8011784 <tcp_write+0x59c>)
 8011548:	488f      	ldr	r0, [pc, #572]	; (8011788 <tcp_write+0x5a0>)
 801154a:	f002 ff3f 	bl	80143cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011550:	685a      	ldr	r2, [r3, #4]
 8011552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011556:	18d0      	adds	r0, r2, r3
 8011558:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	4413      	add	r3, r2
 8011560:	8b3a      	ldrh	r2, [r7, #24]
 8011562:	4619      	mov	r1, r3
 8011564:	f002 ff1f 	bl	80143a6 <memcpy>
 8011568:	e02e      	b.n	80115c8 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801156a:	8a7b      	ldrh	r3, [r7, #18]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d006      	beq.n	801157e <tcp_write+0x396>
 8011570:	4b83      	ldr	r3, [pc, #524]	; (8011780 <tcp_write+0x598>)
 8011572:	f240 224b 	movw	r2, #587	; 0x24b
 8011576:	4985      	ldr	r1, [pc, #532]	; (801178c <tcp_write+0x5a4>)
 8011578:	4883      	ldr	r0, [pc, #524]	; (8011788 <tcp_write+0x5a0>)
 801157a:	f002 ff27 	bl	80143cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801157e:	8b3b      	ldrh	r3, [r7, #24]
 8011580:	2201      	movs	r2, #1
 8011582:	4619      	mov	r1, r3
 8011584:	2000      	movs	r0, #0
 8011586:	f7fa ffaf 	bl	800c4e8 <pbuf_alloc>
 801158a:	6178      	str	r0, [r7, #20]
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2b00      	cmp	r3, #0
 8011590:	f000 8150 	beq.w	8011834 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011594:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011598:	68ba      	ldr	r2, [r7, #8]
 801159a:	441a      	add	r2, r3
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80115a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	2200      	movs	r2, #0
 80115a8:	4619      	mov	r1, r3
 80115aa:	2000      	movs	r0, #0
 80115ac:	f7fa ff9c 	bl	800c4e8 <pbuf_alloc>
 80115b0:	6338      	str	r0, [r7, #48]	; 0x30
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d103      	bne.n	80115c0 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80115b8:	6978      	ldr	r0, [r7, #20]
 80115ba:	f7fb fb07 	bl	800cbcc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80115be:	e13c      	b.n	801183a <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80115c0:	6979      	ldr	r1, [r7, #20]
 80115c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115c4:	f7fb fbdc 	bl	800cd80 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80115c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115ca:	f7fb fb99 	bl	800cd00 <pbuf_clen>
 80115ce:	4603      	mov	r3, r0
 80115d0:	461a      	mov	r2, r3
 80115d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80115d6:	4413      	add	r3, r2
 80115d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80115dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80115e0:	2b09      	cmp	r3, #9
 80115e2:	d805      	bhi.n	80115f0 <tcp_write+0x408>
 80115e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80115e8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d903      	bls.n	80115f8 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80115f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115f2:	f7fb faeb 	bl	800cbcc <pbuf_free>
      goto memerr;
 80115f6:	e120      	b.n	801183a <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011600:	441a      	add	r2, r3
 8011602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	4613      	mov	r3, r2
 801160a:	2200      	movs	r2, #0
 801160c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f7ff fc88 	bl	8010f24 <tcp_create_segment>
 8011614:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011618:	2b00      	cmp	r3, #0
 801161a:	f000 810d 	beq.w	8011838 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801161e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011620:	2b00      	cmp	r3, #0
 8011622:	d102      	bne.n	801162a <tcp_write+0x442>
      queue = seg;
 8011624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011626:	647b      	str	r3, [r7, #68]	; 0x44
 8011628:	e00c      	b.n	8011644 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801162c:	2b00      	cmp	r3, #0
 801162e:	d106      	bne.n	801163e <tcp_write+0x456>
 8011630:	4b53      	ldr	r3, [pc, #332]	; (8011780 <tcp_write+0x598>)
 8011632:	f240 2285 	movw	r2, #645	; 0x285
 8011636:	4956      	ldr	r1, [pc, #344]	; (8011790 <tcp_write+0x5a8>)
 8011638:	4853      	ldr	r0, [pc, #332]	; (8011788 <tcp_write+0x5a0>)
 801163a:	f002 fec7 	bl	80143cc <iprintf>
      prev_seg->next = seg;
 801163e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011642:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011646:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011648:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801164c:	8b3b      	ldrh	r3, [r7, #24]
 801164e:	4413      	add	r3, r2
 8011650:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011658:	88fb      	ldrh	r3, [r7, #6]
 801165a:	429a      	cmp	r2, r3
 801165c:	f4ff af38 	bcc.w	80114d0 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011660:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011662:	2b00      	cmp	r3, #0
 8011664:	d02c      	beq.n	80116c0 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801166c:	e01e      	b.n	80116ac <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 801166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011670:	891a      	ldrh	r2, [r3, #8]
 8011672:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011674:	4413      	add	r3, r2
 8011676:	b29a      	uxth	r2, r3
 8011678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d110      	bne.n	80116a6 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801168a:	8952      	ldrh	r2, [r2, #10]
 801168c:	4413      	add	r3, r2
 801168e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011690:	68b9      	ldr	r1, [r7, #8]
 8011692:	4618      	mov	r0, r3
 8011694:	f002 fe87 	bl	80143a6 <memcpy>
        p->len += oversize_used;
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	895a      	ldrh	r2, [r3, #10]
 801169c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801169e:	4413      	add	r3, r2
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80116a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1dd      	bne.n	801166e <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 80116b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116b4:	891a      	ldrh	r2, [r3, #8]
 80116b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80116b8:	4413      	add	r3, r2
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116be:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80116c0:	8a7a      	ldrh	r2, [r7, #18]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80116c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d018      	beq.n	8011700 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80116ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d106      	bne.n	80116e2 <tcp_write+0x4fa>
 80116d4:	4b2a      	ldr	r3, [pc, #168]	; (8011780 <tcp_write+0x598>)
 80116d6:	f240 22bb 	movw	r2, #699	; 0x2bb
 80116da:	492e      	ldr	r1, [pc, #184]	; (8011794 <tcp_write+0x5ac>)
 80116dc:	482a      	ldr	r0, [pc, #168]	; (8011788 <tcp_write+0x5a0>)
 80116de:	f002 fe75 	bl	80143cc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80116e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fb fb49 	bl	800cd80 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80116ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f0:	891a      	ldrh	r2, [r3, #8]
 80116f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f4:	891b      	ldrh	r3, [r3, #8]
 80116f6:	4413      	add	r3, r2
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116fc:	811a      	strh	r2, [r3, #8]
 80116fe:	e037      	b.n	8011770 <tcp_write+0x588>
  } else if (extendlen > 0) {
 8011700:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011702:	2b00      	cmp	r3, #0
 8011704:	d034      	beq.n	8011770 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011708:	2b00      	cmp	r3, #0
 801170a:	d003      	beq.n	8011714 <tcp_write+0x52c>
 801170c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d106      	bne.n	8011722 <tcp_write+0x53a>
 8011714:	4b1a      	ldr	r3, [pc, #104]	; (8011780 <tcp_write+0x598>)
 8011716:	f240 22c1 	movw	r2, #705	; 0x2c1
 801171a:	491f      	ldr	r1, [pc, #124]	; (8011798 <tcp_write+0x5b0>)
 801171c:	481a      	ldr	r0, [pc, #104]	; (8011788 <tcp_write+0x5a0>)
 801171e:	f002 fe55 	bl	80143cc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	62bb      	str	r3, [r7, #40]	; 0x28
 8011728:	e009      	b.n	801173e <tcp_write+0x556>
      p->tot_len += extendlen;
 801172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172c:	891a      	ldrh	r2, [r3, #8]
 801172e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011730:	4413      	add	r3, r2
 8011732:	b29a      	uxth	r2, r3
 8011734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011736:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	62bb      	str	r3, [r7, #40]	; 0x28
 801173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d1f1      	bne.n	801172a <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 8011746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011748:	891a      	ldrh	r2, [r3, #8]
 801174a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801174c:	4413      	add	r3, r2
 801174e:	b29a      	uxth	r2, r3
 8011750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011752:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011756:	895a      	ldrh	r2, [r3, #10]
 8011758:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801175a:	4413      	add	r3, r2
 801175c:	b29a      	uxth	r2, r3
 801175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011760:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011764:	891a      	ldrh	r2, [r3, #8]
 8011766:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011768:	4413      	add	r3, r2
 801176a:	b29a      	uxth	r2, r3
 801176c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801176e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011772:	2b00      	cmp	r3, #0
 8011774:	d112      	bne.n	801179c <tcp_write+0x5b4>
    pcb->unsent = queue;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801177a:	669a      	str	r2, [r3, #104]	; 0x68
 801177c:	e011      	b.n	80117a2 <tcp_write+0x5ba>
 801177e:	bf00      	nop
 8011780:	080177f4 	.word	0x080177f4
 8011784:	08017a04 	.word	0x08017a04
 8011788:	08017858 	.word	0x08017858
 801178c:	08017a44 	.word	0x08017a44
 8011790:	08017a54 	.word	0x08017a54
 8011794:	08017a68 	.word	0x08017a68
 8011798:	08017aa0 	.word	0x08017aa0
  } else {
    last_unsent->next = queue;
 801179c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801179e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117a6:	88fb      	ldrh	r3, [r7, #6]
 80117a8:	441a      	add	r2, r3
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80117b4:	88fb      	ldrh	r3, [r7, #6]
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80117c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00e      	beq.n	80117f2 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d10a      	bne.n	80117f2 <tcp_write+0x60a>
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d106      	bne.n	80117f2 <tcp_write+0x60a>
 80117e4:	4b2b      	ldr	r3, [pc, #172]	; (8011894 <tcp_write+0x6ac>)
 80117e6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80117ea:	492b      	ldr	r1, [pc, #172]	; (8011898 <tcp_write+0x6b0>)
 80117ec:	482b      	ldr	r0, [pc, #172]	; (801189c <tcp_write+0x6b4>)
 80117ee:	f002 fded 	bl	80143cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80117f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d015      	beq.n	8011824 <tcp_write+0x63c>
 80117f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d011      	beq.n	8011824 <tcp_write+0x63c>
 8011800:	797b      	ldrb	r3, [r7, #5]
 8011802:	f003 0302 	and.w	r3, r3, #2
 8011806:	2b00      	cmp	r3, #0
 8011808:	d10c      	bne.n	8011824 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801180a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801180c:	68dc      	ldr	r4, [r3, #12]
 801180e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	899b      	ldrh	r3, [r3, #12]
 8011814:	b29d      	uxth	r5, r3
 8011816:	2008      	movs	r0, #8
 8011818:	f7f6 f834 	bl	8007884 <lwip_htons>
 801181c:	4603      	mov	r3, r0
 801181e:	432b      	orrs	r3, r5
 8011820:	b29b      	uxth	r3, r3
 8011822:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8011824:	2300      	movs	r3, #0
 8011826:	e031      	b.n	801188c <tcp_write+0x6a4>
          goto memerr;
 8011828:	bf00      	nop
 801182a:	e006      	b.n	801183a <tcp_write+0x652>
            goto memerr;
 801182c:	bf00      	nop
 801182e:	e004      	b.n	801183a <tcp_write+0x652>
        goto memerr;
 8011830:	bf00      	nop
 8011832:	e002      	b.n	801183a <tcp_write+0x652>
        goto memerr;
 8011834:	bf00      	nop
 8011836:	e000      	b.n	801183a <tcp_write+0x652>
      goto memerr;
 8011838:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	7e9b      	ldrb	r3, [r3, #26]
 801183e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011842:	b2da      	uxtb	r2, r3
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801184a:	2b00      	cmp	r3, #0
 801184c:	d002      	beq.n	8011854 <tcp_write+0x66c>
    pbuf_free(concat_p);
 801184e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011850:	f7fb f9bc 	bl	800cbcc <pbuf_free>
  }
  if (queue != NULL) {
 8011854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011856:	2b00      	cmp	r3, #0
 8011858:	d002      	beq.n	8011860 <tcp_write+0x678>
    tcp_segs_free(queue);
 801185a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801185c:	f7fc fccd 	bl	800e1fa <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00e      	beq.n	8011888 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10a      	bne.n	8011888 <tcp_write+0x6a0>
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011876:	2b00      	cmp	r3, #0
 8011878:	d106      	bne.n	8011888 <tcp_write+0x6a0>
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <tcp_write+0x6ac>)
 801187c:	f240 3202 	movw	r2, #770	; 0x302
 8011880:	4905      	ldr	r1, [pc, #20]	; (8011898 <tcp_write+0x6b0>)
 8011882:	4806      	ldr	r0, [pc, #24]	; (801189c <tcp_write+0x6b4>)
 8011884:	f002 fda2 	bl	80143cc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801188c:	4618      	mov	r0, r3
 801188e:	3758      	adds	r7, #88	; 0x58
 8011890:	46bd      	mov	sp, r7
 8011892:	bdb0      	pop	{r4, r5, r7, pc}
 8011894:	080177f4 	.word	0x080177f4
 8011898:	08017ad8 	.word	0x08017ad8
 801189c:	08017858 	.word	0x08017858

080118a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b08a      	sub	sp, #40	; 0x28
 80118a4:	af02      	add	r7, sp, #8
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	460b      	mov	r3, r1
 80118aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80118ac:	2300      	movs	r3, #0
 80118ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80118b0:	2300      	movs	r3, #0
 80118b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80118b4:	78fb      	ldrb	r3, [r7, #3]
 80118b6:	f003 0303 	and.w	r3, r3, #3
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d106      	bne.n	80118cc <tcp_enqueue_flags+0x2c>
 80118be:	4b70      	ldr	r3, [pc, #448]	; (8011a80 <tcp_enqueue_flags+0x1e0>)
 80118c0:	f240 321b 	movw	r2, #795	; 0x31b
 80118c4:	496f      	ldr	r1, [pc, #444]	; (8011a84 <tcp_enqueue_flags+0x1e4>)
 80118c6:	4870      	ldr	r0, [pc, #448]	; (8011a88 <tcp_enqueue_flags+0x1e8>)
 80118c8:	f002 fd80 	bl	80143cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80118d2:	2b08      	cmp	r3, #8
 80118d4:	d806      	bhi.n	80118e4 <tcp_enqueue_flags+0x44>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80118dc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d90e      	bls.n	8011902 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80118e4:	78fb      	ldrb	r3, [r7, #3]
 80118e6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d109      	bne.n	8011902 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	7e9b      	ldrb	r3, [r3, #26]
 80118f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80118fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011900:	e0ba      	b.n	8011a78 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 8011902:	78fb      	ldrb	r3, [r7, #3]
 8011904:	f003 0302 	and.w	r3, r3, #2
 8011908:	2b00      	cmp	r3, #0
 801190a:	d001      	beq.n	8011910 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 801190c:	2301      	movs	r3, #1
 801190e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011910:	7ffb      	ldrb	r3, [r7, #31]
 8011912:	f003 0301 	and.w	r3, r3, #1
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <tcp_enqueue_flags+0x7e>
 801191a:	2304      	movs	r3, #4
 801191c:	e000      	b.n	8011920 <tcp_enqueue_flags+0x80>
 801191e:	2300      	movs	r3, #0
 8011920:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011922:	7dfb      	ldrb	r3, [r7, #23]
 8011924:	b29b      	uxth	r3, r3
 8011926:	2200      	movs	r2, #0
 8011928:	4619      	mov	r1, r3
 801192a:	2000      	movs	r0, #0
 801192c:	f7fa fddc 	bl	800c4e8 <pbuf_alloc>
 8011930:	6138      	str	r0, [r7, #16]
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d109      	bne.n	801194c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	7e9b      	ldrb	r3, [r3, #26]
 801193c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011940:	b2da      	uxtb	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801194a:	e095      	b.n	8011a78 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	895a      	ldrh	r2, [r3, #10]
 8011950:	7dfb      	ldrb	r3, [r7, #23]
 8011952:	b29b      	uxth	r3, r3
 8011954:	429a      	cmp	r2, r3
 8011956:	d206      	bcs.n	8011966 <tcp_enqueue_flags+0xc6>
 8011958:	4b49      	ldr	r3, [pc, #292]	; (8011a80 <tcp_enqueue_flags+0x1e0>)
 801195a:	f240 3241 	movw	r2, #833	; 0x341
 801195e:	494b      	ldr	r1, [pc, #300]	; (8011a8c <tcp_enqueue_flags+0x1ec>)
 8011960:	4849      	ldr	r0, [pc, #292]	; (8011a88 <tcp_enqueue_flags+0x1e8>)
 8011962:	f002 fd33 	bl	80143cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801196a:	78fa      	ldrb	r2, [r7, #3]
 801196c:	7ffb      	ldrb	r3, [r7, #31]
 801196e:	9300      	str	r3, [sp, #0]
 8011970:	460b      	mov	r3, r1
 8011972:	6939      	ldr	r1, [r7, #16]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7ff fad5 	bl	8010f24 <tcp_create_segment>
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d109      	bne.n	8011996 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	7e9b      	ldrb	r3, [r3, #26]
 8011986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801198a:	b2da      	uxtb	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011994:	e070      	b.n	8011a78 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	f003 0303 	and.w	r3, r3, #3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d006      	beq.n	80119b0 <tcp_enqueue_flags+0x110>
 80119a2:	4b37      	ldr	r3, [pc, #220]	; (8011a80 <tcp_enqueue_flags+0x1e0>)
 80119a4:	f240 3249 	movw	r2, #841	; 0x349
 80119a8:	4939      	ldr	r1, [pc, #228]	; (8011a90 <tcp_enqueue_flags+0x1f0>)
 80119aa:	4837      	ldr	r0, [pc, #220]	; (8011a88 <tcp_enqueue_flags+0x1e8>)
 80119ac:	f002 fd0e 	bl	80143cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	891b      	ldrh	r3, [r3, #8]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d006      	beq.n	80119c6 <tcp_enqueue_flags+0x126>
 80119b8:	4b31      	ldr	r3, [pc, #196]	; (8011a80 <tcp_enqueue_flags+0x1e0>)
 80119ba:	f240 324a 	movw	r2, #842	; 0x34a
 80119be:	4935      	ldr	r1, [pc, #212]	; (8011a94 <tcp_enqueue_flags+0x1f4>)
 80119c0:	4831      	ldr	r0, [pc, #196]	; (8011a88 <tcp_enqueue_flags+0x1e8>)
 80119c2:	f002 fd03 	bl	80143cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d103      	bne.n	80119d6 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	669a      	str	r2, [r3, #104]	; 0x68
 80119d4:	e00d      	b.n	80119f2 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119da:	61bb      	str	r3, [r7, #24]
 80119dc:	e002      	b.n	80119e4 <tcp_enqueue_flags+0x144>
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	61bb      	str	r3, [r7, #24]
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d1f8      	bne.n	80119de <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2200      	movs	r2, #0
 80119f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80119fa:	78fb      	ldrb	r3, [r7, #3]
 80119fc:	f003 0302 	and.w	r3, r3, #2
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d104      	bne.n	8011a0e <tcp_enqueue_flags+0x16e>
 8011a04:	78fb      	ldrb	r3, [r7, #3]
 8011a06:	f003 0301 	and.w	r3, r3, #1
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d004      	beq.n	8011a18 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011a18:	78fb      	ldrb	r3, [r7, #3]
 8011a1a:	f003 0301 	and.w	r3, r3, #1
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d006      	beq.n	8011a30 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	7e9b      	ldrb	r3, [r3, #26]
 8011a26:	f043 0320 	orr.w	r3, r3, #32
 8011a2a:	b2da      	uxtb	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7fb f963 	bl	800cd00 <pbuf_clen>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a44:	4413      	add	r3, r2
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00e      	beq.n	8011a76 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d10a      	bne.n	8011a76 <tcp_enqueue_flags+0x1d6>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d106      	bne.n	8011a76 <tcp_enqueue_flags+0x1d6>
 8011a68:	4b05      	ldr	r3, [pc, #20]	; (8011a80 <tcp_enqueue_flags+0x1e0>)
 8011a6a:	f240 326d 	movw	r2, #877	; 0x36d
 8011a6e:	490a      	ldr	r1, [pc, #40]	; (8011a98 <tcp_enqueue_flags+0x1f8>)
 8011a70:	4805      	ldr	r0, [pc, #20]	; (8011a88 <tcp_enqueue_flags+0x1e8>)
 8011a72:	f002 fcab 	bl	80143cc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3720      	adds	r7, #32
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	080177f4 	.word	0x080177f4
 8011a84:	08017af8 	.word	0x08017af8
 8011a88:	08017858 	.word	0x08017858
 8011a8c:	08017b50 	.word	0x08017b50
 8011a90:	08017b8c 	.word	0x08017b8c
 8011a94:	08017ba4 	.word	0x08017ba4
 8011a98:	08017bd0 	.word	0x08017bd0

08011a9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011a9c:	b590      	push	{r4, r7, lr}
 8011a9e:	b08b      	sub	sp, #44	; 0x2c
 8011aa0:	af04      	add	r7, sp, #16
 8011aa2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011aa8:	7dbb      	ldrb	r3, [r7, #22]
 8011aaa:	b29c      	uxth	r4, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7f5 fef5 	bl	80078a0 <lwip_htonl>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2200      	movs	r2, #0
 8011aba:	4621      	mov	r1, r4
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7ff f977 	bl	8010db0 <tcp_output_alloc_header>
 8011ac2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d109      	bne.n	8011ade <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	7e9b      	ldrb	r3, [r3, #26]
 8011ace:	f043 0303 	orr.w	r3, r3, #3
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ad8:	f06f 0301 	mvn.w	r3, #1
 8011adc:	e036      	b.n	8011b4c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	3304      	adds	r3, #4
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7f8 fe70 	bl	800a7c8 <ip4_route>
 8011ae8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011af0:	23fc      	movs	r3, #252	; 0xfc
 8011af2:	75fb      	strb	r3, [r7, #23]
 8011af4:	e012      	b.n	8011b1c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011af6:	6879      	ldr	r1, [r7, #4]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	1d18      	adds	r0, r3, #4
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	7a9c      	ldrb	r4, [r3, #10]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	7a5b      	ldrb	r3, [r3, #9]
 8011b04:	68fa      	ldr	r2, [r7, #12]
 8011b06:	9202      	str	r2, [sp, #8]
 8011b08:	2206      	movs	r2, #6
 8011b0a:	9201      	str	r2, [sp, #4]
 8011b0c:	9300      	str	r3, [sp, #0]
 8011b0e:	4623      	mov	r3, r4
 8011b10:	4602      	mov	r2, r0
 8011b12:	6938      	ldr	r0, [r7, #16]
 8011b14:	f7f9 f81a 	bl	800ab4c <ip4_output_if>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011b1c:	6938      	ldr	r0, [r7, #16]
 8011b1e:	f7fb f855 	bl	800cbcc <pbuf_free>

  if (err != ERR_OK) {
 8011b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d007      	beq.n	8011b3a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	7e9b      	ldrb	r3, [r3, #26]
 8011b2e:	f043 0303 	orr.w	r3, r3, #3
 8011b32:	b2da      	uxtb	r2, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	769a      	strb	r2, [r3, #26]
 8011b38:	e006      	b.n	8011b48 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	7e9b      	ldrb	r3, [r3, #26]
 8011b3e:	f023 0303 	bic.w	r3, r3, #3
 8011b42:	b2da      	uxtb	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	371c      	adds	r7, #28
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd90      	pop	{r4, r7, pc}

08011b54 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011b54:	b5b0      	push	{r4, r5, r7, lr}
 8011b56:	b08a      	sub	sp, #40	; 0x28
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	7d1b      	ldrb	r3, [r3, #20]
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d106      	bne.n	8011b72 <tcp_output+0x1e>
 8011b64:	4b9b      	ldr	r3, [pc, #620]	; (8011dd4 <tcp_output+0x280>)
 8011b66:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8011b6a:	499b      	ldr	r1, [pc, #620]	; (8011dd8 <tcp_output+0x284>)
 8011b6c:	489b      	ldr	r0, [pc, #620]	; (8011ddc <tcp_output+0x288>)
 8011b6e:	f002 fc2d 	bl	80143cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011b72:	4b9b      	ldr	r3, [pc, #620]	; (8011de0 <tcp_output+0x28c>)
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d101      	bne.n	8011b80 <tcp_output+0x2c>
    return ERR_OK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	e1cd      	b.n	8011f1c <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d203      	bcs.n	8011b98 <tcp_output+0x44>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011b96:	e002      	b.n	8011b9e <tcp_output+0x4a>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b9e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ba4:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7e9b      	ldrb	r3, [r3, #26]
 8011baa:	f003 0302 	and.w	r3, r3, #2
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d017      	beq.n	8011be2 <tcp_output+0x8e>
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00f      	beq.n	8011bd8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8011bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7f5 fe6e 	bl	80078a0 <lwip_htonl>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bce:	8912      	ldrh	r2, [r2, #8]
 8011bd0:	441a      	add	r2, r3
     (seg == NULL ||
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d904      	bls.n	8011be2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7ff ff5f 	bl	8011a9c <tcp_send_empty_ack>
 8011bde:	4603      	mov	r3, r0
 8011be0:	e19c      	b.n	8011f1c <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011be8:	6a3b      	ldr	r3, [r7, #32]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d007      	beq.n	8011bfe <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8011bee:	e002      	b.n	8011bf6 <tcp_output+0xa2>
 8011bf0:	6a3b      	ldr	r3, [r7, #32]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	623b      	str	r3, [r7, #32]
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1f8      	bne.n	8011bf0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	3304      	adds	r3, #4
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f8 fde0 	bl	800a7c8 <ip4_route>
 8011c08:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d102      	bne.n	8011c16 <tcp_output+0xc2>
    return ERR_RTE;
 8011c10:	f06f 0303 	mvn.w	r3, #3
 8011c14:	e182      	b.n	8011f1c <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d003      	beq.n	8011c24 <tcp_output+0xd0>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d111      	bne.n	8011c48 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d002      	beq.n	8011c30 <tcp_output+0xdc>
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	e000      	b.n	8011c32 <tcp_output+0xde>
 8011c30:	2300      	movs	r3, #0
 8011c32:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d102      	bne.n	8011c40 <tcp_output+0xec>
      return ERR_RTE;
 8011c3a:	f06f 0303 	mvn.w	r3, #3
 8011c3e:	e16d      	b.n	8011f1c <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f000 813e 	beq.w	8011ecc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7f5 fe22 	bl	80078a0 <lwip_htonl>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c62:	1ad3      	subs	r3, r2, r3
 8011c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c66:	8912      	ldrh	r2, [r2, #8]
 8011c68:	441a      	add	r2, r3
  if (seg != NULL &&
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	f240 812d 	bls.w	8011ecc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	f000 8129 	beq.w	8011ecc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011c80:	461a      	mov	r2, r3
 8011c82:	69bb      	ldr	r3, [r7, #24]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	f040 8121 	bne.w	8011ecc <tcp_output+0x378>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f040 811c 	bne.w	8011ecc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	f040 812b 	bne.w	8011ef6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2201      	movs	r2, #1
 8011cac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011cb0:	e121      	b.n	8011ef6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	899b      	ldrh	r3, [r3, #12]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7f5 fde2 	bl	8007884 <lwip_htons>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	f003 0304 	and.w	r3, r3, #4
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d006      	beq.n	8011cd8 <tcp_output+0x184>
 8011cca:	4b42      	ldr	r3, [pc, #264]	; (8011dd4 <tcp_output+0x280>)
 8011ccc:	f240 4246 	movw	r2, #1094	; 0x446
 8011cd0:	4944      	ldr	r1, [pc, #272]	; (8011de4 <tcp_output+0x290>)
 8011cd2:	4842      	ldr	r0, [pc, #264]	; (8011ddc <tcp_output+0x288>)
 8011cd4:	f002 fb7a 	bl	80143cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d01f      	beq.n	8011d20 <tcp_output+0x1cc>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	7e9b      	ldrb	r3, [r3, #26]
 8011ce4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d119      	bne.n	8011d20 <tcp_output+0x1cc>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00b      	beq.n	8011d0c <tcp_output+0x1b8>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d110      	bne.n	8011d20 <tcp_output+0x1cc>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d02:	891a      	ldrh	r2, [r3, #8]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d209      	bcs.n	8011d20 <tcp_output+0x1cc>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d004      	beq.n	8011d20 <tcp_output+0x1cc>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d1c:	2b08      	cmp	r3, #8
 8011d1e:	d901      	bls.n	8011d24 <tcp_output+0x1d0>
 8011d20:	2301      	movs	r3, #1
 8011d22:	e000      	b.n	8011d26 <tcp_output+0x1d2>
 8011d24:	2300      	movs	r3, #0
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d106      	bne.n	8011d38 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	7e9b      	ldrb	r3, [r3, #26]
 8011d2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f000 80e1 	beq.w	8011efa <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	7d1b      	ldrb	r3, [r3, #20]
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	d00c      	beq.n	8011d5a <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	68dc      	ldr	r4, [r3, #12]
 8011d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	b29d      	uxth	r5, r3
 8011d4c:	2010      	movs	r0, #16
 8011d4e:	f7f5 fd99 	bl	8007884 <lwip_htons>
 8011d52:	4603      	mov	r3, r0
 8011d54:	432b      	orrs	r3, r5
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011d5a:	697a      	ldr	r2, [r7, #20]
 8011d5c:	6879      	ldr	r1, [r7, #4]
 8011d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d60:	f000 f8e0 	bl	8011f24 <tcp_output_segment>
 8011d64:	4603      	mov	r3, r0
 8011d66:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d009      	beq.n	8011d84 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	7e9b      	ldrb	r3, [r3, #26]
 8011d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	769a      	strb	r2, [r3, #26]
      return err;
 8011d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d82:	e0cb      	b.n	8011f1c <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7d1b      	ldrb	r3, [r3, #20]
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	d006      	beq.n	8011da2 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	7e9b      	ldrb	r3, [r3, #26]
 8011d98:	f023 0303 	bic.w	r3, r3, #3
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7f5 fd79 	bl	80078a0 <lwip_htonl>
 8011dae:	4604      	mov	r4, r0
 8011db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db2:	891b      	ldrh	r3, [r3, #8]
 8011db4:	461d      	mov	r5, r3
 8011db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	899b      	ldrh	r3, [r3, #12]
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7f5 fd60 	bl	8007884 <lwip_htons>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	f003 0303 	and.w	r3, r3, #3
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d00c      	beq.n	8011de8 <tcp_output+0x294>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e00b      	b.n	8011dea <tcp_output+0x296>
 8011dd2:	bf00      	nop
 8011dd4:	080177f4 	.word	0x080177f4
 8011dd8:	08017bf8 	.word	0x08017bf8
 8011ddc:	08017858 	.word	0x08017858
 8011de0:	2000774c 	.word	0x2000774c
 8011de4:	08017c20 	.word	0x08017c20
 8011de8:	2300      	movs	r3, #0
 8011dea:	442b      	add	r3, r5
 8011dec:	4423      	add	r3, r4
 8011dee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	da02      	bge.n	8011e02 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	891b      	ldrh	r3, [r3, #8]
 8011e06:	461c      	mov	r4, r3
 8011e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	899b      	ldrh	r3, [r3, #12]
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7f5 fd37 	bl	8007884 <lwip_htons>
 8011e16:	4603      	mov	r3, r0
 8011e18:	f003 0303 	and.w	r3, r3, #3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d001      	beq.n	8011e24 <tcp_output+0x2d0>
 8011e20:	2301      	movs	r3, #1
 8011e22:	e000      	b.n	8011e26 <tcp_output+0x2d2>
 8011e24:	2300      	movs	r3, #0
 8011e26:	4423      	add	r3, r4
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d049      	beq.n	8011ec0 <tcp_output+0x36c>
      seg->next = NULL;
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	2200      	movs	r2, #0
 8011e30:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d105      	bne.n	8011e46 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e3e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e42:	623b      	str	r3, [r7, #32]
 8011e44:	e03f      	b.n	8011ec6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7f5 fd27 	bl	80078a0 <lwip_htonl>
 8011e52:	4604      	mov	r4, r0
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7f5 fd20 	bl	80078a0 <lwip_htonl>
 8011e60:	4603      	mov	r3, r0
 8011e62:	1ae3      	subs	r3, r4, r3
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	da24      	bge.n	8011eb2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	336c      	adds	r3, #108	; 0x6c
 8011e6c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e6e:	e002      	b.n	8011e76 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d011      	beq.n	8011ea2 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f5 fd0a 	bl	80078a0 <lwip_htonl>
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7f5 fd03 	bl	80078a0 <lwip_htonl>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	dbe6      	blt.n	8011e70 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eae:	601a      	str	r2, [r3, #0]
 8011eb0:	e009      	b.n	8011ec6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eb6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011eb8:	6a3b      	ldr	r3, [r7, #32]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	623b      	str	r3, [r7, #32]
 8011ebe:	e002      	b.n	8011ec6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ec2:	f7fc f9ae 	bl	800e222 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d014      	beq.n	8011efc <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7f5 fce1 	bl	80078a0 <lwip_htonl>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ee8:	8912      	ldrh	r2, [r2, #8]
 8011eea:	441a      	add	r2, r3
  while (seg != NULL &&
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	f67f aedf 	bls.w	8011cb2 <tcp_output+0x15e>
 8011ef4:	e002      	b.n	8011efc <tcp_output+0x3a8>
    goto output_done;
 8011ef6:	bf00      	nop
 8011ef8:	e000      	b.n	8011efc <tcp_output+0x3a8>
      break;
 8011efa:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d103      	bne.n	8011f0c <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	7e9b      	ldrb	r3, [r3, #26]
 8011f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011f1a:	2300      	movs	r3, #0
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3728      	adds	r7, #40	; 0x28
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bdb0      	pop	{r4, r5, r7, pc}

08011f24 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011f24:	b5b0      	push	{r4, r5, r7, lr}
 8011f26:	b08c      	sub	sp, #48	; 0x30
 8011f28:	af04      	add	r7, sp, #16
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	89db      	ldrh	r3, [r3, #14]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d001      	beq.n	8011f3e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e08b      	b.n	8012056 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	68dc      	ldr	r4, [r3, #12]
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7f5 fcaa 	bl	80078a0 <lwip_htonl>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	68dc      	ldr	r4, [r3, #12]
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7f5 fc93 	bl	8007884 <lwip_htons>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011f6a:	441a      	add	r2, r3
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	3314      	adds	r3, #20
 8011f76:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	7a9b      	ldrb	r3, [r3, #10]
 8011f7c:	f003 0301 	and.w	r3, r3, #1
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d014      	beq.n	8011fae <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	3304      	adds	r3, #4
 8011f88:	4619      	mov	r1, r3
 8011f8a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011f8e:	f7fc fc73 	bl	800e878 <tcp_eff_send_mss_impl>
 8011f92:	4603      	mov	r3, r0
 8011f94:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011f96:	8b7b      	ldrh	r3, [r7, #26]
 8011f98:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f5 fc7f 	bl	80078a0 <lwip_htonl>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	3304      	adds	r3, #4
 8011fac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	da02      	bge.n	8011fbe <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d10c      	bne.n	8011fe0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011fc6:	4b26      	ldr	r3, [pc, #152]	; (8012060 <tcp_output_segment+0x13c>)
 8011fc8:	681a      	ldr	r2, [r3, #0]
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f5 fc63 	bl	80078a0 <lwip_htonl>
 8011fda:	4602      	mov	r2, r0
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	6852      	ldr	r2, [r2, #4]
 8011ff8:	8951      	ldrh	r1, [r2, #10]
 8011ffa:	8b3a      	ldrh	r2, [r7, #24]
 8011ffc:	1a8a      	subs	r2, r1, r2
 8011ffe:	b292      	uxth	r2, r2
 8012000:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	68fa      	ldr	r2, [r7, #12]
 8012008:	6852      	ldr	r2, [r2, #4]
 801200a:	8911      	ldrh	r1, [r2, #8]
 801200c:	8b3a      	ldrh	r2, [r7, #24]
 801200e:	1a8a      	subs	r2, r1, r2
 8012010:	b292      	uxth	r2, r2
 8012012:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	68d2      	ldr	r2, [r2, #12]
 801201c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	741a      	strb	r2, [r3, #16]
 8012026:	2200      	movs	r2, #0
 8012028:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6858      	ldr	r0, [r3, #4]
 801202e:	68b9      	ldr	r1, [r7, #8]
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	1d1c      	adds	r4, r3, #4
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	7a9d      	ldrb	r5, [r3, #10]
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	7a5b      	ldrb	r3, [r3, #9]
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	9202      	str	r2, [sp, #8]
 8012040:	2206      	movs	r2, #6
 8012042:	9201      	str	r2, [sp, #4]
 8012044:	9300      	str	r3, [sp, #0]
 8012046:	462b      	mov	r3, r5
 8012048:	4622      	mov	r2, r4
 801204a:	f7f8 fd7f 	bl	800ab4c <ip4_output_if>
 801204e:	4603      	mov	r3, r0
 8012050:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8012052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012056:	4618      	mov	r0, r3
 8012058:	3720      	adds	r7, #32
 801205a:	46bd      	mov	sp, r7
 801205c:	bdb0      	pop	{r4, r5, r7, pc}
 801205e:	bf00      	nop
 8012060:	2000773c 	.word	0x2000773c

08012064 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b08c      	sub	sp, #48	; 0x30
 8012068:	af04      	add	r7, sp, #16
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8012072:	2200      	movs	r2, #0
 8012074:	2114      	movs	r1, #20
 8012076:	2001      	movs	r0, #1
 8012078:	f7fa fa36 	bl	800c4e8 <pbuf_alloc>
 801207c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d05b      	beq.n	801213c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	895b      	ldrh	r3, [r3, #10]
 8012088:	2b13      	cmp	r3, #19
 801208a:	d806      	bhi.n	801209a <tcp_rst+0x36>
 801208c:	4b2d      	ldr	r3, [pc, #180]	; (8012144 <tcp_rst+0xe0>)
 801208e:	f240 524d 	movw	r2, #1357	; 0x54d
 8012092:	492d      	ldr	r1, [pc, #180]	; (8012148 <tcp_rst+0xe4>)
 8012094:	482d      	ldr	r0, [pc, #180]	; (801214c <tcp_rst+0xe8>)
 8012096:	f002 f999 	bl	80143cc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80120a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7f5 fbee 	bl	8007884 <lwip_htons>
 80120a8:	4603      	mov	r3, r0
 80120aa:	461a      	mov	r2, r3
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80120b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7f5 fbe6 	bl	8007884 <lwip_htons>
 80120b8:	4603      	mov	r3, r0
 80120ba:	461a      	mov	r2, r3
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f7f5 fbed 	bl	80078a0 <lwip_htonl>
 80120c6:	4602      	mov	r2, r0
 80120c8:	69bb      	ldr	r3, [r7, #24]
 80120ca:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80120cc:	68b8      	ldr	r0, [r7, #8]
 80120ce:	f7f5 fbe7 	bl	80078a0 <lwip_htonl>
 80120d2:	4602      	mov	r2, r0
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80120d8:	f245 0014 	movw	r0, #20500	; 0x5014
 80120dc:	f7f5 fbd2 	bl	8007884 <lwip_htons>
 80120e0:	4603      	mov	r3, r0
 80120e2:	461a      	mov	r2, r3
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f042 0208 	orr.w	r2, r2, #8
 80120f0:	739a      	strb	r2, [r3, #14]
 80120f2:	2200      	movs	r2, #0
 80120f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80120f8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	2200      	movs	r2, #0
 80120fe:	741a      	strb	r2, [r3, #16]
 8012100:	2200      	movs	r2, #0
 8012102:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	2200      	movs	r2, #0
 8012108:	749a      	strb	r2, [r3, #18]
 801210a:	2200      	movs	r2, #0
 801210c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801210e:	6838      	ldr	r0, [r7, #0]
 8012110:	f7f8 fb5a 	bl	800a7c8 <ip4_route>
 8012114:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d00b      	beq.n	8012134 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	9302      	str	r3, [sp, #8]
 8012120:	2306      	movs	r3, #6
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	2300      	movs	r3, #0
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	23ff      	movs	r3, #255	; 0xff
 801212a:	683a      	ldr	r2, [r7, #0]
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	69f8      	ldr	r0, [r7, #28]
 8012130:	f7f8 fd0c 	bl	800ab4c <ip4_output_if>
  }
  pbuf_free(p);
 8012134:	69f8      	ldr	r0, [r7, #28]
 8012136:	f7fa fd49 	bl	800cbcc <pbuf_free>
 801213a:	e000      	b.n	801213e <tcp_rst+0xda>
    return;
 801213c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801213e:	3720      	adds	r7, #32
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	080177f4 	.word	0x080177f4
 8012148:	08017828 	.word	0x08017828
 801214c:	08017858 	.word	0x08017858

08012150 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801215c:	2b00      	cmp	r3, #0
 801215e:	d029      	beq.n	80121b4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012164:	60fb      	str	r3, [r7, #12]
 8012166:	e002      	b.n	801216e <tcp_rexmit_rto+0x1e>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	60fb      	str	r3, [r7, #12]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1f8      	bne.n	8012168 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2200      	movs	r2, #0
 801218a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012192:	2bff      	cmp	r3, #255	; 0xff
 8012194:	d007      	beq.n	80121a6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801219c:	3301      	adds	r3, #1
 801219e:	b2da      	uxtb	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f7ff fcd1 	bl	8011b54 <tcp_output>
 80121b2:	e000      	b.n	80121b6 <tcp_rexmit_rto+0x66>
    return;
 80121b4:	bf00      	nop
}
 80121b6:	3710      	adds	r7, #16
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80121bc:	b590      	push	{r4, r7, lr}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d043      	beq.n	8012254 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121d0:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	3368      	adds	r3, #104	; 0x68
 80121de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80121e0:	e002      	b.n	80121e8 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d011      	beq.n	8012214 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7f5 fb51 	bl	80078a0 <lwip_htonl>
 80121fe:	4604      	mov	r4, r0
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	4618      	mov	r0, r3
 8012208:	f7f5 fb4a 	bl	80078a0 <lwip_htonl>
 801220c:	4603      	mov	r3, r0
 801220e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012210:	2b00      	cmp	r3, #0
 8012212:	dbe6      	blt.n	80121e2 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d103      	bne.n	8012232 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2200      	movs	r2, #0
 801222e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012238:	2bff      	cmp	r3, #255	; 0xff
 801223a:	d007      	beq.n	801224c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012242:	3301      	adds	r3, #1
 8012244:	b2da      	uxtb	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	635a      	str	r2, [r3, #52]	; 0x34
 8012252:	e000      	b.n	8012256 <tcp_rexmit+0x9a>
    return;
 8012254:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012256:	3714      	adds	r7, #20
 8012258:	46bd      	mov	sp, r7
 801225a:	bd90      	pop	{r4, r7, pc}

0801225c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012268:	2b00      	cmp	r3, #0
 801226a:	d04a      	beq.n	8012302 <tcp_rexmit_fast+0xa6>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7e9b      	ldrb	r3, [r3, #26]
 8012270:	f003 0304 	and.w	r3, r3, #4
 8012274:	2b00      	cmp	r3, #0
 8012276:	d144      	bne.n	8012302 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f7ff ff9f 	bl	80121bc <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801228a:	429a      	cmp	r2, r3
 801228c:	d207      	bcs.n	801229e <tcp_rexmit_fast+0x42>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012294:	0fda      	lsrs	r2, r3, #31
 8012296:	4413      	add	r3, r2
 8012298:	105b      	asrs	r3, r3, #1
 801229a:	b29b      	uxth	r3, r3
 801229c:	e006      	b.n	80122ac <tcp_rexmit_fast+0x50>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122a4:	0fda      	lsrs	r2, r3, #31
 80122a6:	4413      	add	r3, r2
 80122a8:	105b      	asrs	r3, r3, #1
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80122b8:	461a      	mov	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d206      	bcs.n	80122d2 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122dc:	4619      	mov	r1, r3
 80122de:	0049      	lsls	r1, r1, #1
 80122e0:	440b      	add	r3, r1
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	4413      	add	r3, r2
 80122e6:	b29a      	uxth	r2, r3
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	7e9b      	ldrb	r3, [r3, #26]
 80122f2:	f043 0304 	orr.w	r3, r3, #4
 80122f6:	b2da      	uxtb	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8012302:	bf00      	nop
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b08a      	sub	sp, #40	; 0x28
 801230e:	af04      	add	r7, sp, #16
 8012310:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012316:	3b01      	subs	r3, #1
 8012318:	4618      	mov	r0, r3
 801231a:	f7f5 fac1 	bl	80078a0 <lwip_htonl>
 801231e:	4603      	mov	r3, r0
 8012320:	2200      	movs	r2, #0
 8012322:	2100      	movs	r1, #0
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7fe fd43 	bl	8010db0 <tcp_output_alloc_header>
 801232a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d102      	bne.n	8012338 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012336:	e021      	b.n	801237c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	3304      	adds	r3, #4
 801233c:	4618      	mov	r0, r3
 801233e:	f7f8 fa43 	bl	800a7c8 <ip4_route>
 8012342:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d102      	bne.n	8012350 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801234a:	23fc      	movs	r3, #252	; 0xfc
 801234c:	75fb      	strb	r3, [r7, #23]
 801234e:	e010      	b.n	8012372 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012350:	6879      	ldr	r1, [r7, #4]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	1d1a      	adds	r2, r3, #4
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	7a98      	ldrb	r0, [r3, #10]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	9302      	str	r3, [sp, #8]
 801235e:	2306      	movs	r3, #6
 8012360:	9301      	str	r3, [sp, #4]
 8012362:	2300      	movs	r3, #0
 8012364:	9300      	str	r3, [sp, #0]
 8012366:	4603      	mov	r3, r0
 8012368:	6938      	ldr	r0, [r7, #16]
 801236a:	f7f8 fbef 	bl	800ab4c <ip4_output_if>
 801236e:	4603      	mov	r3, r0
 8012370:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012372:	6938      	ldr	r0, [r7, #16]
 8012374:	f7fa fc2a 	bl	800cbcc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801237c:	4618      	mov	r0, r3
 801237e:	3718      	adds	r7, #24
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012384:	b590      	push	{r4, r7, lr}
 8012386:	b08f      	sub	sp, #60	; 0x3c
 8012388:	af04      	add	r7, sp, #16
 801238a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012390:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012392:	6a3b      	ldr	r3, [r7, #32]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d102      	bne.n	801239e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801239c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801239e:	6a3b      	ldr	r3, [r7, #32]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d101      	bne.n	80123a8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80123a4:	2300      	movs	r3, #0
 80123a6:	e085      	b.n	80124b4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	899b      	ldrh	r3, [r3, #12]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f5 fa67 	bl	8007884 <lwip_htons>
 80123b6:	4603      	mov	r3, r0
 80123b8:	f003 0301 	and.w	r3, r3, #1
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d005      	beq.n	80123cc <tcp_zero_window_probe+0x48>
 80123c0:	6a3b      	ldr	r3, [r7, #32]
 80123c2:	891b      	ldrh	r3, [r3, #8]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d101      	bne.n	80123cc <tcp_zero_window_probe+0x48>
 80123c8:	2301      	movs	r3, #1
 80123ca:	e000      	b.n	80123ce <tcp_zero_window_probe+0x4a>
 80123cc:	2300      	movs	r3, #0
 80123ce:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80123d0:	7ffb      	ldrb	r3, [r7, #31]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	bf0c      	ite	eq
 80123d6:	2301      	moveq	r3, #1
 80123d8:	2300      	movne	r3, #0
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80123de:	6a3b      	ldr	r3, [r7, #32]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	8bba      	ldrh	r2, [r7, #28]
 80123e6:	2100      	movs	r1, #0
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f7fe fce1 	bl	8010db0 <tcp_output_alloc_header>
 80123ee:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d102      	bne.n	80123fc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80123f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123fa:	e05b      	b.n	80124b4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012402:	7ffb      	ldrb	r3, [r7, #31]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d00e      	beq.n	8012426 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	899b      	ldrh	r3, [r3, #12]
 801240c:	b29b      	uxth	r3, r3
 801240e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012412:	b29c      	uxth	r4, r3
 8012414:	2011      	movs	r0, #17
 8012416:	f7f5 fa35 	bl	8007884 <lwip_htons>
 801241a:	4603      	mov	r3, r0
 801241c:	4323      	orrs	r3, r4
 801241e:	b29a      	uxth	r2, r3
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	819a      	strh	r2, [r3, #12]
 8012424:	e010      	b.n	8012448 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	3314      	adds	r3, #20
 801242c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801242e:	6a3b      	ldr	r3, [r7, #32]
 8012430:	6858      	ldr	r0, [r3, #4]
 8012432:	6a3b      	ldr	r3, [r7, #32]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	891a      	ldrh	r2, [r3, #8]
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	891b      	ldrh	r3, [r3, #8]
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	b29b      	uxth	r3, r3
 8012440:	2201      	movs	r2, #1
 8012442:	6939      	ldr	r1, [r7, #16]
 8012444:	f7fa fdce 	bl	800cfe4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012448:	6a3b      	ldr	r3, [r7, #32]
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f7f5 fa26 	bl	80078a0 <lwip_htonl>
 8012454:	4603      	mov	r3, r0
 8012456:	3301      	adds	r3, #1
 8012458:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	2b00      	cmp	r3, #0
 8012464:	da02      	bge.n	801246c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	68fa      	ldr	r2, [r7, #12]
 801246a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3304      	adds	r3, #4
 8012470:	4618      	mov	r0, r3
 8012472:	f7f8 f9a9 	bl	800a7c8 <ip4_route>
 8012476:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d103      	bne.n	8012486 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801247e:	23fc      	movs	r3, #252	; 0xfc
 8012480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012484:	e011      	b.n	80124aa <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012486:	6879      	ldr	r1, [r7, #4]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	1d1a      	adds	r2, r3, #4
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7a98      	ldrb	r0, [r3, #10]
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	9302      	str	r3, [sp, #8]
 8012494:	2306      	movs	r3, #6
 8012496:	9301      	str	r3, [sp, #4]
 8012498:	2300      	movs	r3, #0
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	4603      	mov	r3, r0
 801249e:	69b8      	ldr	r0, [r7, #24]
 80124a0:	f7f8 fb54 	bl	800ab4c <ip4_output_if>
 80124a4:	4603      	mov	r3, r0
 80124a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80124aa:	69b8      	ldr	r0, [r7, #24]
 80124ac:	f7fa fb8e 	bl	800cbcc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80124b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	372c      	adds	r7, #44	; 0x2c
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd90      	pop	{r4, r7, pc}

080124bc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80124c4:	f7fa fe10 	bl	800d0e8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80124c8:	4b0a      	ldr	r3, [pc, #40]	; (80124f4 <tcpip_tcp_timer+0x38>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d103      	bne.n	80124d8 <tcpip_tcp_timer+0x1c>
 80124d0:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <tcpip_tcp_timer+0x3c>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d005      	beq.n	80124e4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80124d8:	2200      	movs	r2, #0
 80124da:	4908      	ldr	r1, [pc, #32]	; (80124fc <tcpip_tcp_timer+0x40>)
 80124dc:	20fa      	movs	r0, #250	; 0xfa
 80124de:	f000 f86f 	bl	80125c0 <sys_timeout>
 80124e2:	e002      	b.n	80124ea <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80124e4:	4b06      	ldr	r3, [pc, #24]	; (8012500 <tcpip_tcp_timer+0x44>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	601a      	str	r2, [r3, #0]
  }
}
 80124ea:	bf00      	nop
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	20007738 	.word	0x20007738
 80124f8:	20007748 	.word	0x20007748
 80124fc:	080124bd 	.word	0x080124bd
 8012500:	20003f80 	.word	0x20003f80

08012504 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012508:	4b0a      	ldr	r3, [pc, #40]	; (8012534 <tcp_timer_needed+0x30>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d10f      	bne.n	8012530 <tcp_timer_needed+0x2c>
 8012510:	4b09      	ldr	r3, [pc, #36]	; (8012538 <tcp_timer_needed+0x34>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d103      	bne.n	8012520 <tcp_timer_needed+0x1c>
 8012518:	4b08      	ldr	r3, [pc, #32]	; (801253c <tcp_timer_needed+0x38>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d007      	beq.n	8012530 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012520:	4b04      	ldr	r3, [pc, #16]	; (8012534 <tcp_timer_needed+0x30>)
 8012522:	2201      	movs	r2, #1
 8012524:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012526:	2200      	movs	r2, #0
 8012528:	4905      	ldr	r1, [pc, #20]	; (8012540 <tcp_timer_needed+0x3c>)
 801252a:	20fa      	movs	r0, #250	; 0xfa
 801252c:	f000 f848 	bl	80125c0 <sys_timeout>
  }
}
 8012530:	bf00      	nop
 8012532:	bd80      	pop	{r7, pc}
 8012534:	20003f80 	.word	0x20003f80
 8012538:	20007738 	.word	0x20007738
 801253c:	20007748 	.word	0x20007748
 8012540:	080124bd 	.word	0x080124bd

08012544 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	4903      	ldr	r1, [pc, #12]	; (801256c <cyclic_timer+0x28>)
 801255e:	4618      	mov	r0, r3
 8012560:	f000 f82e 	bl	80125c0 <sys_timeout>
}
 8012564:	bf00      	nop
 8012566:	3710      	adds	r7, #16
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	08012545 	.word	0x08012545

08012570 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012576:	2301      	movs	r3, #1
 8012578:	607b      	str	r3, [r7, #4]
 801257a:	e00e      	b.n	801259a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801257c:	4a0d      	ldr	r2, [pc, #52]	; (80125b4 <sys_timeouts_init+0x44>)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	00db      	lsls	r3, r3, #3
 8012588:	4a0a      	ldr	r2, [pc, #40]	; (80125b4 <sys_timeouts_init+0x44>)
 801258a:	4413      	add	r3, r2
 801258c:	461a      	mov	r2, r3
 801258e:	490a      	ldr	r1, [pc, #40]	; (80125b8 <sys_timeouts_init+0x48>)
 8012590:	f000 f816 	bl	80125c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	3301      	adds	r3, #1
 8012598:	607b      	str	r3, [r7, #4]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b04      	cmp	r3, #4
 801259e:	d9ed      	bls.n	801257c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80125a0:	f001 fafc 	bl	8013b9c <sys_now>
 80125a4:	4602      	mov	r2, r0
 80125a6:	4b05      	ldr	r3, [pc, #20]	; (80125bc <sys_timeouts_init+0x4c>)
 80125a8:	601a      	str	r2, [r3, #0]
}
 80125aa:	bf00      	nop
 80125ac:	3708      	adds	r7, #8
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	08017fc0 	.word	0x08017fc0
 80125b8:	08012545 	.word	0x08012545
 80125bc:	20003f7c 	.word	0x20003f7c

080125c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b088      	sub	sp, #32
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80125cc:	200a      	movs	r0, #10
 80125ce:	f7f9 fd49 	bl	800c064 <memp_malloc>
 80125d2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10a      	bne.n	80125f0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f040 8084 	bne.w	80126ea <sys_timeout+0x12a>
 80125e2:	4b44      	ldr	r3, [pc, #272]	; (80126f4 <sys_timeout+0x134>)
 80125e4:	22d4      	movs	r2, #212	; 0xd4
 80125e6:	4944      	ldr	r1, [pc, #272]	; (80126f8 <sys_timeout+0x138>)
 80125e8:	4844      	ldr	r0, [pc, #272]	; (80126fc <sys_timeout+0x13c>)
 80125ea:	f001 feef 	bl	80143cc <iprintf>
    return;
 80125ee:	e07c      	b.n	80126ea <sys_timeout+0x12a>
  }

  now = sys_now();
 80125f0:	f001 fad4 	bl	8013b9c <sys_now>
 80125f4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80125f6:	4b42      	ldr	r3, [pc, #264]	; (8012700 <sys_timeout+0x140>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d105      	bne.n	801260a <sys_timeout+0x4a>
    diff = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012602:	4a40      	ldr	r2, [pc, #256]	; (8012704 <sys_timeout+0x144>)
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	6013      	str	r3, [r2, #0]
 8012608:	e004      	b.n	8012614 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801260a:	4b3e      	ldr	r3, [pc, #248]	; (8012704 <sys_timeout+0x144>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	693a      	ldr	r2, [r7, #16]
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2200      	movs	r2, #0
 8012618:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	68ba      	ldr	r2, [r7, #8]
 801261e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	441a      	add	r2, r3
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012630:	4b33      	ldr	r3, [pc, #204]	; (8012700 <sys_timeout+0x140>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d103      	bne.n	8012640 <sys_timeout+0x80>
    next_timeout = timeout;
 8012638:	4a31      	ldr	r2, [pc, #196]	; (8012700 <sys_timeout+0x140>)
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	6013      	str	r3, [r2, #0]
    return;
 801263e:	e055      	b.n	80126ec <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012640:	4b2f      	ldr	r3, [pc, #188]	; (8012700 <sys_timeout+0x140>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	685a      	ldr	r2, [r3, #4]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	429a      	cmp	r2, r3
 801264a:	d90f      	bls.n	801266c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801264c:	4b2c      	ldr	r3, [pc, #176]	; (8012700 <sys_timeout+0x140>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a2b      	ldr	r2, [pc, #172]	; (8012700 <sys_timeout+0x140>)
 8012652:	6812      	ldr	r2, [r2, #0]
 8012654:	6851      	ldr	r1, [r2, #4]
 8012656:	68fa      	ldr	r2, [r7, #12]
 8012658:	1a8a      	subs	r2, r1, r2
 801265a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801265c:	4b28      	ldr	r3, [pc, #160]	; (8012700 <sys_timeout+0x140>)
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012664:	4a26      	ldr	r2, [pc, #152]	; (8012700 <sys_timeout+0x140>)
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	6013      	str	r3, [r2, #0]
 801266a:	e03f      	b.n	80126ec <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801266c:	4b24      	ldr	r3, [pc, #144]	; (8012700 <sys_timeout+0x140>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	61fb      	str	r3, [r7, #28]
 8012672:	e036      	b.n	80126e2 <sys_timeout+0x122>
      timeout->time -= t->time;
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	685a      	ldr	r2, [r3, #4]
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	1ad2      	subs	r2, r2, r3
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d006      	beq.n	8012698 <sys_timeout+0xd8>
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	685a      	ldr	r2, [r3, #4]
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	429a      	cmp	r2, r3
 8012696:	d921      	bls.n	80126dc <sys_timeout+0x11c>
        if (t->next != NULL) {
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d009      	beq.n	80126b4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	69fa      	ldr	r2, [r7, #28]
 80126a6:	6812      	ldr	r2, [r2, #0]
 80126a8:	6851      	ldr	r1, [r2, #4]
 80126aa:	697a      	ldr	r2, [r7, #20]
 80126ac:	6852      	ldr	r2, [r2, #4]
 80126ae:	1a8a      	subs	r2, r1, r2
 80126b0:	605a      	str	r2, [r3, #4]
 80126b2:	e00b      	b.n	80126cc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	685a      	ldr	r2, [r3, #4]
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d906      	bls.n	80126cc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80126be:	4b10      	ldr	r3, [pc, #64]	; (8012700 <sys_timeout+0x140>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	685a      	ldr	r2, [r3, #4]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	441a      	add	r2, r3
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	697a      	ldr	r2, [r7, #20]
 80126d8:	601a      	str	r2, [r3, #0]
        break;
 80126da:	e007      	b.n	80126ec <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	61fb      	str	r3, [r7, #28]
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d1c5      	bne.n	8012674 <sys_timeout+0xb4>
 80126e8:	e000      	b.n	80126ec <sys_timeout+0x12c>
    return;
 80126ea:	bf00      	nop
      }
    }
  }
}
 80126ec:	3720      	adds	r7, #32
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	08017c38 	.word	0x08017c38
 80126f8:	08017c6c 	.word	0x08017c6c
 80126fc:	08017cac 	.word	0x08017cac
 8012700:	20003f78 	.word	0x20003f78
 8012704:	20003f7c 	.word	0x20003f7c

08012708 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801270e:	4b24      	ldr	r3, [pc, #144]	; (80127a0 <sys_check_timeouts+0x98>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d03f      	beq.n	8012796 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8012716:	f001 fa41 	bl	8013b9c <sys_now>
 801271a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801271c:	4b21      	ldr	r3, [pc, #132]	; (80127a4 <sys_check_timeouts+0x9c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	68fa      	ldr	r2, [r7, #12]
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8012726:	2300      	movs	r3, #0
 8012728:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801272a:	4b1d      	ldr	r3, [pc, #116]	; (80127a0 <sys_check_timeouts+0x98>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d02c      	beq.n	8012790 <sys_check_timeouts+0x88>
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	685a      	ldr	r2, [r3, #4]
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	429a      	cmp	r2, r3
 801273e:	d827      	bhi.n	8012790 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8012740:	2301      	movs	r3, #1
 8012742:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	685a      	ldr	r2, [r3, #4]
 8012748:	4b16      	ldr	r3, [pc, #88]	; (80127a4 <sys_check_timeouts+0x9c>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4413      	add	r3, r2
 801274e:	4a15      	ldr	r2, [pc, #84]	; (80127a4 <sys_check_timeouts+0x9c>)
 8012750:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	697a      	ldr	r2, [r7, #20]
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	4a0f      	ldr	r2, [pc, #60]	; (80127a0 <sys_check_timeouts+0x98>)
 8012762:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	689b      	ldr	r3, [r3, #8]
 8012768:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012770:	68b9      	ldr	r1, [r7, #8]
 8012772:	200a      	movs	r0, #10
 8012774:	f7f9 fcc8 	bl	800c108 <memp_free>
        if (handler != NULL) {
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d008      	beq.n	8012790 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801277e:	480a      	ldr	r0, [pc, #40]	; (80127a8 <sys_check_timeouts+0xa0>)
 8012780:	f000 fe62 	bl	8013448 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6838      	ldr	r0, [r7, #0]
 8012788:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 801278a:	4807      	ldr	r0, [pc, #28]	; (80127a8 <sys_check_timeouts+0xa0>)
 801278c:	f000 fe6b 	bl	8013466 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012790:	7cfb      	ldrb	r3, [r7, #19]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d1c7      	bne.n	8012726 <sys_check_timeouts+0x1e>
  }
}
 8012796:	bf00      	nop
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	20003f78 	.word	0x20003f78
 80127a4:	20003f7c 	.word	0x20003f7c
 80127a8:	20003fdc 	.word	0x20003fdc

080127ac <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80127b2:	4b0f      	ldr	r3, [pc, #60]	; (80127f0 <sys_timeouts_sleeptime+0x44>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d102      	bne.n	80127c0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80127ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127be:	e013      	b.n	80127e8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80127c0:	f001 f9ec 	bl	8013b9c <sys_now>
 80127c4:	4602      	mov	r2, r0
 80127c6:	4b0b      	ldr	r3, [pc, #44]	; (80127f4 <sys_timeouts_sleeptime+0x48>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80127ce:	4b08      	ldr	r3, [pc, #32]	; (80127f0 <sys_timeouts_sleeptime+0x44>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d201      	bcs.n	80127de <sys_timeouts_sleeptime+0x32>
    return 0;
 80127da:	2300      	movs	r3, #0
 80127dc:	e004      	b.n	80127e8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80127de:	4b04      	ldr	r3, [pc, #16]	; (80127f0 <sys_timeouts_sleeptime+0x44>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	685a      	ldr	r2, [r3, #4]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	1ad3      	subs	r3, r2, r3
  }
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	20003f78 	.word	0x20003f78
 80127f4:	20003f7c 	.word	0x20003f7c

080127f8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8012802:	4b0f      	ldr	r3, [pc, #60]	; (8012840 <sys_timeouts_mbox_fetch+0x48>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d105      	bne.n	8012816 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801280a:	2200      	movs	r2, #0
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 fce9 	bl	80131e6 <sys_arch_mbox_fetch>
    return;
 8012814:	e011      	b.n	801283a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8012816:	f7ff ffc9 	bl	80127ac <sys_timeouts_sleeptime>
 801281a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d008      	beq.n	8012834 <sys_timeouts_mbox_fetch+0x3c>
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	6839      	ldr	r1, [r7, #0]
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 fcdd 	bl	80131e6 <sys_arch_mbox_fetch>
 801282c:	4603      	mov	r3, r0
 801282e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012832:	d102      	bne.n	801283a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012834:	f7ff ff68 	bl	8012708 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012838:	e7e3      	b.n	8012802 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	20003f78 	.word	0x20003f78

08012844 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012844:	b480      	push	{r7}
 8012846:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012848:	bf00      	nop
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr
	...

08012854 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801285a:	2300      	movs	r3, #0
 801285c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801285e:	4b17      	ldr	r3, [pc, #92]	; (80128bc <udp_new_port+0x68>)
 8012860:	881b      	ldrh	r3, [r3, #0]
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	b291      	uxth	r1, r2
 8012866:	4a15      	ldr	r2, [pc, #84]	; (80128bc <udp_new_port+0x68>)
 8012868:	8011      	strh	r1, [r2, #0]
 801286a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801286e:	4293      	cmp	r3, r2
 8012870:	d103      	bne.n	801287a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012872:	4b12      	ldr	r3, [pc, #72]	; (80128bc <udp_new_port+0x68>)
 8012874:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012878:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801287a:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <udp_new_port+0x6c>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	603b      	str	r3, [r7, #0]
 8012880:	e011      	b.n	80128a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	8a5a      	ldrh	r2, [r3, #18]
 8012886:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <udp_new_port+0x68>)
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	429a      	cmp	r2, r3
 801288c:	d108      	bne.n	80128a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801288e:	88fb      	ldrh	r3, [r7, #6]
 8012890:	3301      	adds	r3, #1
 8012892:	80fb      	strh	r3, [r7, #6]
 8012894:	88fb      	ldrh	r3, [r7, #6]
 8012896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801289a:	d3e0      	bcc.n	801285e <udp_new_port+0xa>
        return 0;
 801289c:	2300      	movs	r3, #0
 801289e:	e007      	b.n	80128b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	603b      	str	r3, [r7, #0]
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1ea      	bne.n	8012882 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80128ac:	4b03      	ldr	r3, [pc, #12]	; (80128bc <udp_new_port+0x68>)
 80128ae:	881b      	ldrh	r3, [r3, #0]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	370c      	adds	r7, #12
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr
 80128bc:	20000014 	.word	0x20000014
 80128c0:	20007750 	.word	0x20007750

080128c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	4613      	mov	r3, r2
 80128d0:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80128d2:	79fb      	ldrb	r3, [r7, #7]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d018      	beq.n	801290a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d013      	beq.n	8012906 <udp_input_local_match+0x42>
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00f      	beq.n	8012906 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80128e6:	4b14      	ldr	r3, [pc, #80]	; (8012938 <udp_input_local_match+0x74>)
 80128e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80128ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128ee:	d00a      	beq.n	8012906 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	4b10      	ldr	r3, [pc, #64]	; (8012938 <udp_input_local_match+0x74>)
 80128f6:	695b      	ldr	r3, [r3, #20]
 80128f8:	405a      	eors	r2, r3
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	3308      	adds	r3, #8
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012902:	2b00      	cmp	r3, #0
 8012904:	d110      	bne.n	8012928 <udp_input_local_match+0x64>
          return 1;
 8012906:	2301      	movs	r3, #1
 8012908:	e00f      	b.n	801292a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d009      	beq.n	8012924 <udp_input_local_match+0x60>
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d005      	beq.n	8012924 <udp_input_local_match+0x60>
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	4b06      	ldr	r3, [pc, #24]	; (8012938 <udp_input_local_match+0x74>)
 801291e:	695b      	ldr	r3, [r3, #20]
 8012920:	429a      	cmp	r2, r3
 8012922:	d101      	bne.n	8012928 <udp_input_local_match+0x64>
      return 1;
 8012924:	2301      	movs	r3, #1
 8012926:	e000      	b.n	801292a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3714      	adds	r7, #20
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop
 8012938:	20003fe0 	.word	0x20003fe0

0801293c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801293c:	b590      	push	{r4, r7, lr}
 801293e:	b08d      	sub	sp, #52	; 0x34
 8012940:	af02      	add	r7, sp, #8
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	895b      	ldrh	r3, [r3, #10]
 801294e:	2b07      	cmp	r3, #7
 8012950:	d803      	bhi.n	801295a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7fa f93a 	bl	800cbcc <pbuf_free>
    goto end;
 8012958:	e0c6      	b.n	8012ae8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012960:	4b63      	ldr	r3, [pc, #396]	; (8012af0 <udp_input+0x1b4>)
 8012962:	695a      	ldr	r2, [r3, #20]
 8012964:	4b62      	ldr	r3, [pc, #392]	; (8012af0 <udp_input+0x1b4>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4619      	mov	r1, r3
 801296a:	4610      	mov	r0, r2
 801296c:	f7f8 f9c0 	bl	800acf0 <ip4_addr_isbroadcast_u32>
 8012970:	4603      	mov	r3, r0
 8012972:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	b29b      	uxth	r3, r3
 801297a:	4618      	mov	r0, r3
 801297c:	f7f4 ff82 	bl	8007884 <lwip_htons>
 8012980:	4603      	mov	r3, r0
 8012982:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	885b      	ldrh	r3, [r3, #2]
 8012988:	b29b      	uxth	r3, r3
 801298a:	4618      	mov	r0, r3
 801298c:	f7f4 ff7a 	bl	8007884 <lwip_htons>
 8012990:	4603      	mov	r3, r0
 8012992:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012994:	2300      	movs	r3, #0
 8012996:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012998:	2300      	movs	r3, #0
 801299a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801299c:	2300      	movs	r3, #0
 801299e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80129a0:	4b54      	ldr	r3, [pc, #336]	; (8012af4 <udp_input+0x1b8>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	627b      	str	r3, [r7, #36]	; 0x24
 80129a6:	e03b      	b.n	8012a20 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	8a5b      	ldrh	r3, [r3, #18]
 80129ac:	89fa      	ldrh	r2, [r7, #14]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d131      	bne.n	8012a16 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80129b2:	7cfb      	ldrb	r3, [r7, #19]
 80129b4:	461a      	mov	r2, r3
 80129b6:	6839      	ldr	r1, [r7, #0]
 80129b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129ba:	f7ff ff83 	bl	80128c4 <udp_input_local_match>
 80129be:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d028      	beq.n	8012a16 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80129c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c6:	7c1b      	ldrb	r3, [r3, #16]
 80129c8:	f003 0304 	and.w	r3, r3, #4
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d104      	bne.n	80129da <udp_input+0x9e>
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d101      	bne.n	80129da <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80129d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d8:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	8a9b      	ldrh	r3, [r3, #20]
 80129de:	8a3a      	ldrh	r2, [r7, #16]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d118      	bne.n	8012a16 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80129ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	4b3f      	ldr	r3, [pc, #252]	; (8012af0 <udp_input+0x1b4>)
 80129f2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d10e      	bne.n	8012a16 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80129f8:	6a3b      	ldr	r3, [r7, #32]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d014      	beq.n	8012a28 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80129fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a00:	68da      	ldr	r2, [r3, #12]
 8012a02:	6a3b      	ldr	r3, [r7, #32]
 8012a04:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012a06:	4b3b      	ldr	r3, [pc, #236]	; (8012af4 <udp_input+0x1b8>)
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012a0e:	4a39      	ldr	r2, [pc, #228]	; (8012af4 <udp_input+0x1b8>)
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012a14:	e008      	b.n	8012a28 <udp_input+0xec>
      }
    }

    prev = pcb;
 8012a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a18:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8012a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d1c0      	bne.n	80129a8 <udp_input+0x6c>
 8012a26:	e000      	b.n	8012a2a <udp_input+0xee>
        break;
 8012a28:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d101      	bne.n	8012a34 <udp_input+0xf8>
    pcb = uncon_pcb;
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d002      	beq.n	8012a40 <udp_input+0x104>
    for_us = 1;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	76fb      	strb	r3, [r7, #27]
 8012a3e:	e00a      	b.n	8012a56 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	3304      	adds	r3, #4
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	4b2a      	ldr	r3, [pc, #168]	; (8012af0 <udp_input+0x1b4>)
 8012a48:	695b      	ldr	r3, [r3, #20]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	bf0c      	ite	eq
 8012a4e:	2301      	moveq	r3, #1
 8012a50:	2300      	movne	r3, #0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012a56:	7efb      	ldrb	r3, [r7, #27]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d042      	beq.n	8012ae2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012a5c:	f06f 0107 	mvn.w	r1, #7
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7fa f88f 	bl	800cb84 <pbuf_header>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00a      	beq.n	8012a82 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012a6c:	4b22      	ldr	r3, [pc, #136]	; (8012af8 <udp_input+0x1bc>)
 8012a6e:	f240 1255 	movw	r2, #341	; 0x155
 8012a72:	4922      	ldr	r1, [pc, #136]	; (8012afc <udp_input+0x1c0>)
 8012a74:	4822      	ldr	r0, [pc, #136]	; (8012b00 <udp_input+0x1c4>)
 8012a76:	f001 fca9 	bl	80143cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7fa f8a6 	bl	800cbcc <pbuf_free>
      goto end;
 8012a80:	e032      	b.n	8012ae8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d012      	beq.n	8012aae <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	699b      	ldr	r3, [r3, #24]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d00a      	beq.n	8012aa6 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a92:	699c      	ldr	r4, [r3, #24]
 8012a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a96:	69d8      	ldr	r0, [r3, #28]
 8012a98:	8a3b      	ldrh	r3, [r7, #16]
 8012a9a:	9300      	str	r3, [sp, #0]
 8012a9c:	4b19      	ldr	r3, [pc, #100]	; (8012b04 <udp_input+0x1c8>)
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012aa2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012aa4:	e021      	b.n	8012aea <udp_input+0x1ae>
        pbuf_free(p);
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f7fa f890 	bl	800cbcc <pbuf_free>
        goto end;
 8012aac:	e01c      	b.n	8012ae8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012aae:	7cfb      	ldrb	r3, [r7, #19]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d112      	bne.n	8012ada <udp_input+0x19e>
 8012ab4:	4b0e      	ldr	r3, [pc, #56]	; (8012af0 <udp_input+0x1b4>)
 8012ab6:	695b      	ldr	r3, [r3, #20]
 8012ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012abc:	2be0      	cmp	r3, #224	; 0xe0
 8012abe:	d00c      	beq.n	8012ada <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012ac0:	4b0b      	ldr	r3, [pc, #44]	; (8012af0 <udp_input+0x1b4>)
 8012ac2:	899b      	ldrh	r3, [r3, #12]
 8012ac4:	3308      	adds	r3, #8
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	b21b      	sxth	r3, r3
 8012aca:	4619      	mov	r1, r3
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7fa f86b 	bl	800cba8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012ad2:	2103      	movs	r1, #3
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7f7 fdef 	bl	800a6b8 <icmp_dest_unreach>
      pbuf_free(p);
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f7fa f876 	bl	800cbcc <pbuf_free>
  return;
 8012ae0:	e003      	b.n	8012aea <udp_input+0x1ae>
    pbuf_free(p);
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7fa f872 	bl	800cbcc <pbuf_free>
  return;
 8012ae8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012aea:	372c      	adds	r7, #44	; 0x2c
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd90      	pop	{r4, r7, pc}
 8012af0:	20003fe0 	.word	0x20003fe0
 8012af4:	20007750 	.word	0x20007750
 8012af8:	08017cd4 	.word	0x08017cd4
 8012afc:	08017d04 	.word	0x08017d04
 8012b00:	08017d18 	.word	0x08017d18
 8012b04:	20003ff0 	.word	0x20003ff0

08012b08 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b088      	sub	sp, #32
 8012b0c:	af02      	add	r7, sp, #8
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	60b9      	str	r1, [r7, #8]
 8012b12:	607a      	str	r2, [r7, #4]
 8012b14:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d002      	beq.n	8012b22 <udp_sendto_if+0x1a>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d102      	bne.n	8012b28 <udp_sendto_if+0x20>
    return ERR_VAL;
 8012b22:	f06f 0305 	mvn.w	r3, #5
 8012b26:	e028      	b.n	8012b7a <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d009      	beq.n	8012b42 <udp_sendto_if+0x3a>
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d005      	beq.n	8012b42 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b3e:	2be0      	cmp	r3, #224	; 0xe0
 8012b40:	d103      	bne.n	8012b4a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8012b42:	6a3b      	ldr	r3, [r7, #32]
 8012b44:	3304      	adds	r3, #4
 8012b46:	617b      	str	r3, [r7, #20]
 8012b48:	e00b      	b.n	8012b62 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	6a3b      	ldr	r3, [r7, #32]
 8012b50:	3304      	adds	r3, #4
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d002      	beq.n	8012b5e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012b58:	f06f 0303 	mvn.w	r3, #3
 8012b5c:	e00d      	b.n	8012b7a <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012b62:	887a      	ldrh	r2, [r7, #2]
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	6a3b      	ldr	r3, [r7, #32]
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	68b9      	ldr	r1, [r7, #8]
 8012b72:	68f8      	ldr	r0, [r7, #12]
 8012b74:	f000 f806 	bl	8012b84 <udp_sendto_if_src>
 8012b78:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3718      	adds	r7, #24
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
	...

08012b84 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b08c      	sub	sp, #48	; 0x30
 8012b88:	af04      	add	r7, sp, #16
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
 8012b90:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d002      	beq.n	8012b9e <udp_sendto_if_src+0x1a>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d102      	bne.n	8012ba4 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012b9e:	f06f 0305 	mvn.w	r3, #5
 8012ba2:	e07e      	b.n	8012ca2 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	8a5b      	ldrh	r3, [r3, #18]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d10f      	bne.n	8012bcc <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012bac:	68f9      	ldr	r1, [r7, #12]
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	8a5b      	ldrh	r3, [r3, #18]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f000 f87f 	bl	8012cb8 <udp_bind>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012bbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d002      	beq.n	8012bcc <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012bc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012bca:	e06a      	b.n	8012ca2 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8012bcc:	2108      	movs	r1, #8
 8012bce:	68b8      	ldr	r0, [r7, #8]
 8012bd0:	f7f9 ffd8 	bl	800cb84 <pbuf_header>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d014      	beq.n	8012c04 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012bda:	2200      	movs	r2, #0
 8012bdc:	2108      	movs	r1, #8
 8012bde:	2001      	movs	r0, #1
 8012be0:	f7f9 fc82 	bl	800c4e8 <pbuf_alloc>
 8012be4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d102      	bne.n	8012bf2 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bf0:	e057      	b.n	8012ca2 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	891b      	ldrh	r3, [r3, #8]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d006      	beq.n	8012c08 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012bfa:	68b9      	ldr	r1, [r7, #8]
 8012bfc:	69f8      	ldr	r0, [r7, #28]
 8012bfe:	f7fa f915 	bl	800ce2c <pbuf_chain>
 8012c02:	e001      	b.n	8012c08 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	895b      	ldrh	r3, [r3, #10]
 8012c0c:	2b07      	cmp	r3, #7
 8012c0e:	d806      	bhi.n	8012c1e <udp_sendto_if_src+0x9a>
 8012c10:	4b26      	ldr	r3, [pc, #152]	; (8012cac <udp_sendto_if_src+0x128>)
 8012c12:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012c16:	4926      	ldr	r1, [pc, #152]	; (8012cb0 <udp_sendto_if_src+0x12c>)
 8012c18:	4826      	ldr	r0, [pc, #152]	; (8012cb4 <udp_sendto_if_src+0x130>)
 8012c1a:	f001 fbd7 	bl	80143cc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	8a5b      	ldrh	r3, [r3, #18]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7f4 fe2b 	bl	8007884 <lwip_htons>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	461a      	mov	r2, r3
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012c36:	887b      	ldrh	r3, [r7, #2]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f4 fe23 	bl	8007884 <lwip_htons>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	461a      	mov	r2, r3
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	719a      	strb	r2, [r3, #6]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	891b      	ldrh	r3, [r3, #8]
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7f4 fe15 	bl	8007884 <lwip_htons>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012c62:	2311      	movs	r3, #17
 8012c64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	7a9b      	ldrb	r3, [r3, #10]
 8012c6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	7a5b      	ldrb	r3, [r3, #9]
 8012c70:	7cb9      	ldrb	r1, [r7, #18]
 8012c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c74:	9202      	str	r2, [sp, #8]
 8012c76:	7cfa      	ldrb	r2, [r7, #19]
 8012c78:	9201      	str	r2, [sp, #4]
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c82:	69f8      	ldr	r0, [r7, #28]
 8012c84:	f7f7 ff8c 	bl	800aba0 <ip4_output_if_src>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012c8c:	69fa      	ldr	r2, [r7, #28]
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d004      	beq.n	8012c9e <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8012c94:	69f8      	ldr	r0, [r7, #28]
 8012c96:	f7f9 ff99 	bl	800cbcc <pbuf_free>
    q = NULL;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012c9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3720      	adds	r7, #32
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	08017cd4 	.word	0x08017cd4
 8012cb0:	08017d40 	.word	0x08017d40
 8012cb4:	08017d18 	.word	0x08017d18

08012cb8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	60f8      	str	r0, [r7, #12]
 8012cc0:	60b9      	str	r1, [r7, #8]
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d101      	bne.n	8012cd0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012ccc:	4b30      	ldr	r3, [pc, #192]	; (8012d90 <udp_bind+0xd8>)
 8012cce:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d002      	beq.n	8012cdc <udp_bind+0x24>
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d102      	bne.n	8012ce2 <udp_bind+0x2a>
    return ERR_VAL;
 8012cdc:	f06f 0305 	mvn.w	r3, #5
 8012ce0:	e052      	b.n	8012d88 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ce6:	4b2b      	ldr	r3, [pc, #172]	; (8012d94 <udp_bind+0xdc>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	617b      	str	r3, [r7, #20]
 8012cec:	e009      	b.n	8012d02 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012cee:	68fa      	ldr	r2, [r7, #12]
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d102      	bne.n	8012cfc <udp_bind+0x44>
      rebind = 1;
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8012cfa:	e005      	b.n	8012d08 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	617b      	str	r3, [r7, #20]
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d1f2      	bne.n	8012cee <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012d08:	88fb      	ldrh	r3, [r7, #6]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d109      	bne.n	8012d22 <udp_bind+0x6a>
    port = udp_new_port();
 8012d0e:	f7ff fda1 	bl	8012854 <udp_new_port>
 8012d12:	4603      	mov	r3, r0
 8012d14:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012d16:	88fb      	ldrh	r3, [r7, #6]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d11e      	bne.n	8012d5a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012d1c:	f06f 0307 	mvn.w	r3, #7
 8012d20:	e032      	b.n	8012d88 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012d22:	4b1c      	ldr	r3, [pc, #112]	; (8012d94 <udp_bind+0xdc>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	617b      	str	r3, [r7, #20]
 8012d28:	e014      	b.n	8012d54 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012d2a:	68fa      	ldr	r2, [r7, #12]
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d00d      	beq.n	8012d4e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	8a5b      	ldrh	r3, [r3, #18]
 8012d36:	88fa      	ldrh	r2, [r7, #6]
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d108      	bne.n	8012d4e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d102      	bne.n	8012d4e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012d48:	f06f 0307 	mvn.w	r3, #7
 8012d4c:	e01c      	b.n	8012d88 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	617b      	str	r3, [r7, #20]
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d1e7      	bne.n	8012d2a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d002      	beq.n	8012d66 <udp_bind+0xae>
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	e000      	b.n	8012d68 <udp_bind+0xb0>
 8012d66:	2300      	movs	r3, #0
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	88fa      	ldrh	r2, [r7, #6]
 8012d70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012d72:	7cfb      	ldrb	r3, [r7, #19]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d106      	bne.n	8012d86 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012d78:	4b06      	ldr	r3, [pc, #24]	; (8012d94 <udp_bind+0xdc>)
 8012d7a:	681a      	ldr	r2, [r3, #0]
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012d80:	4a04      	ldr	r2, [pc, #16]	; (8012d94 <udp_bind+0xdc>)
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3718      	adds	r7, #24
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	08017ec0 	.word	0x08017ec0
 8012d94:	20007750 	.word	0x20007750

08012d98 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b086      	sub	sp, #24
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	60b9      	str	r1, [r7, #8]
 8012da2:	4613      	mov	r3, r2
 8012da4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d002      	beq.n	8012db2 <udp_connect+0x1a>
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d102      	bne.n	8012db8 <udp_connect+0x20>
    return ERR_VAL;
 8012db2:	f06f 0305 	mvn.w	r3, #5
 8012db6:	e03e      	b.n	8012e36 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	8a5b      	ldrh	r3, [r3, #18]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d10f      	bne.n	8012de0 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012dc0:	68f9      	ldr	r1, [r7, #12]
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	8a5b      	ldrh	r3, [r3, #18]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f7ff ff75 	bl	8012cb8 <udp_bind>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012dd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <udp_connect+0x48>
      return err;
 8012dda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dde:	e02a      	b.n	8012e36 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012de0:	68bb      	ldr	r3, [r7, #8]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d002      	beq.n	8012dec <udp_connect+0x54>
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	e000      	b.n	8012dee <udp_connect+0x56>
 8012dec:	2300      	movs	r3, #0
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	88fa      	ldrh	r2, [r7, #6]
 8012df6:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	7c1b      	ldrb	r3, [r3, #16]
 8012dfc:	f043 0304 	orr.w	r3, r3, #4
 8012e00:	b2da      	uxtb	r2, r3
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e06:	4b0e      	ldr	r3, [pc, #56]	; (8012e40 <udp_connect+0xa8>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	617b      	str	r3, [r7, #20]
 8012e0c:	e008      	b.n	8012e20 <udp_connect+0x88>
    if (pcb == ipcb) {
 8012e0e:	68fa      	ldr	r2, [r7, #12]
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d101      	bne.n	8012e1a <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8012e16:	2300      	movs	r3, #0
 8012e18:	e00d      	b.n	8012e36 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	617b      	str	r3, [r7, #20]
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d1f3      	bne.n	8012e0e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012e26:	4b06      	ldr	r3, [pc, #24]	; (8012e40 <udp_connect+0xa8>)
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012e2e:	4a04      	ldr	r2, [pc, #16]	; (8012e40 <udp_connect+0xa8>)
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012e34:	2300      	movs	r3, #0
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	3718      	adds	r7, #24
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
 8012e3e:	bf00      	nop
 8012e40:	20007750 	.word	0x20007750

08012e44 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012e44:	b480      	push	{r7}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	60f8      	str	r0, [r7, #12]
 8012e4c:	60b9      	str	r1, [r7, #8]
 8012e4e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	68ba      	ldr	r2, [r7, #8]
 8012e54:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	61da      	str	r2, [r3, #28]
}
 8012e5c:	bf00      	nop
 8012e5e:	3714      	adds	r7, #20
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012e70:	4b15      	ldr	r3, [pc, #84]	; (8012ec8 <udp_remove+0x60>)
 8012e72:	681a      	ldr	r2, [r3, #0]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d105      	bne.n	8012e86 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012e7a:	4b13      	ldr	r3, [pc, #76]	; (8012ec8 <udp_remove+0x60>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	4a11      	ldr	r2, [pc, #68]	; (8012ec8 <udp_remove+0x60>)
 8012e82:	6013      	str	r3, [r2, #0]
 8012e84:	e017      	b.n	8012eb6 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012e86:	4b10      	ldr	r3, [pc, #64]	; (8012ec8 <udp_remove+0x60>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	60fb      	str	r3, [r7, #12]
 8012e8c:	e010      	b.n	8012eb0 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d009      	beq.n	8012eaa <udp_remove+0x42>
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	68da      	ldr	r2, [r3, #12]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d104      	bne.n	8012eaa <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	68da      	ldr	r2, [r3, #12]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	60da      	str	r2, [r3, #12]
        break;
 8012ea8:	e005      	b.n	8012eb6 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	60fb      	str	r3, [r7, #12]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d1eb      	bne.n	8012e8e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012eb6:	6879      	ldr	r1, [r7, #4]
 8012eb8:	2000      	movs	r0, #0
 8012eba:	f7f9 f925 	bl	800c108 <memp_free>
}
 8012ebe:	bf00      	nop
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20007750 	.word	0x20007750

08012ecc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	f7f9 f8c6 	bl	800c064 <memp_malloc>
 8012ed8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d007      	beq.n	8012ef0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012ee0:	2220      	movs	r2, #32
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f001 fa69 	bl	80143bc <memset>
    pcb->ttl = UDP_TTL;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	22ff      	movs	r2, #255	; 0xff
 8012eee:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012ef0:	687b      	ldr	r3, [r7, #4]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}

08012efa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012efa:	b580      	push	{r7, lr}
 8012efc:	b084      	sub	sp, #16
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	4603      	mov	r3, r0
 8012f02:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8012f04:	f7ff ffe2 	bl	8012ecc <udp_new>
 8012f08:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b085      	sub	sp, #20
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d01e      	beq.n	8012f62 <udp_netif_ip_addr_changed+0x4e>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d01a      	beq.n	8012f62 <udp_netif_ip_addr_changed+0x4e>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d017      	beq.n	8012f62 <udp_netif_ip_addr_changed+0x4e>
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d013      	beq.n	8012f62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	; (8012f70 <udp_netif_ip_addr_changed+0x5c>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	e00c      	b.n	8012f5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d103      	bne.n	8012f56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	60fb      	str	r3, [r7, #12]
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1ef      	bne.n	8012f42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012f62:	bf00      	nop
 8012f64:	3714      	adds	r7, #20
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	20007750 	.word	0x20007750

08012f74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8012f7e:	230e      	movs	r3, #14
 8012f80:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	895b      	ldrh	r3, [r3, #10]
 8012f86:	2b0e      	cmp	r3, #14
 8012f88:	d977      	bls.n	801307a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	7b1a      	ldrb	r2, [r3, #12]
 8012f94:	7b5b      	ldrb	r3, [r3, #13]
 8012f96:	021b      	lsls	r3, r3, #8
 8012f98:	4313      	orrs	r3, r2
 8012f9a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	f003 0301 	and.w	r3, r3, #1
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d023      	beq.n	8012ff0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d10f      	bne.n	8012fd0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	785b      	ldrb	r3, [r3, #1]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d11b      	bne.n	8012ff0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012fbc:	2b5e      	cmp	r3, #94	; 0x5e
 8012fbe:	d117      	bne.n	8012ff0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	7b5b      	ldrb	r3, [r3, #13]
 8012fc4:	f043 0310 	orr.w	r3, r3, #16
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	735a      	strb	r2, [r3, #13]
 8012fce:	e00f      	b.n	8012ff0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2206      	movs	r2, #6
 8012fd4:	492f      	ldr	r1, [pc, #188]	; (8013094 <ethernet_input+0x120>)
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f001 f9d6 	bl	8014388 <memcmp>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d106      	bne.n	8012ff0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	7b5b      	ldrb	r3, [r3, #13]
 8012fe6:	f043 0308 	orr.w	r3, r3, #8
 8012fea:	b2da      	uxtb	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012ff0:	89fb      	ldrh	r3, [r7, #14]
 8012ff2:	2b08      	cmp	r3, #8
 8012ff4:	d003      	beq.n	8012ffe <ethernet_input+0x8a>
 8012ff6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012ffa:	d01e      	beq.n	801303a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012ffc:	e042      	b.n	8013084 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013004:	f003 0308 	and.w	r3, r3, #8
 8013008:	2b00      	cmp	r3, #0
 801300a:	d038      	beq.n	801307e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	895b      	ldrh	r3, [r3, #10]
 8013010:	461a      	mov	r2, r3
 8013012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013016:	429a      	cmp	r2, r3
 8013018:	db34      	blt.n	8013084 <ethernet_input+0x110>
 801301a:	8afb      	ldrh	r3, [r7, #22]
 801301c:	425b      	negs	r3, r3
 801301e:	b29b      	uxth	r3, r3
 8013020:	b21b      	sxth	r3, r3
 8013022:	4619      	mov	r1, r3
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f7f9 fdad 	bl	800cb84 <pbuf_header>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d129      	bne.n	8013084 <ethernet_input+0x110>
        ip4_input(p, netif);
 8013030:	6839      	ldr	r1, [r7, #0]
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f7f7 fc30 	bl	800a898 <ip4_input>
      break;
 8013038:	e01d      	b.n	8013076 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013040:	f003 0308 	and.w	r3, r3, #8
 8013044:	2b00      	cmp	r3, #0
 8013046:	d01c      	beq.n	8013082 <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	895b      	ldrh	r3, [r3, #10]
 801304c:	461a      	mov	r2, r3
 801304e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013052:	429a      	cmp	r2, r3
 8013054:	db16      	blt.n	8013084 <ethernet_input+0x110>
 8013056:	8afb      	ldrh	r3, [r7, #22]
 8013058:	425b      	negs	r3, r3
 801305a:	b29b      	uxth	r3, r3
 801305c:	b21b      	sxth	r3, r3
 801305e:	4619      	mov	r1, r3
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f7f9 fd8f 	bl	800cb84 <pbuf_header>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10b      	bne.n	8013084 <ethernet_input+0x110>
        etharp_input(p, netif);
 801306c:	6839      	ldr	r1, [r7, #0]
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f7f6 fdfc 	bl	8009c6c <etharp_input>
      break;
 8013074:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013076:	2300      	movs	r3, #0
 8013078:	e008      	b.n	801308c <ethernet_input+0x118>
    goto free_and_return;
 801307a:	bf00      	nop
 801307c:	e002      	b.n	8013084 <ethernet_input+0x110>
        goto free_and_return;
 801307e:	bf00      	nop
 8013080:	e000      	b.n	8013084 <ethernet_input+0x110>
        goto free_and_return;
 8013082:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7f9 fda1 	bl	800cbcc <pbuf_free>
  return ERR_OK;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3718      	adds	r7, #24
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	08017fe8 	.word	0x08017fe8

08013098 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b086      	sub	sp, #24
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
 80130a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80130a6:	8c3b      	ldrh	r3, [r7, #32]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7f4 fbeb 	bl	8007884 <lwip_htons>
 80130ae:	4603      	mov	r3, r0
 80130b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80130b2:	210e      	movs	r1, #14
 80130b4:	68b8      	ldr	r0, [r7, #8]
 80130b6:	f7f9 fd65 	bl	800cb84 <pbuf_header>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d125      	bne.n	801310c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	8afa      	ldrh	r2, [r7, #22]
 80130ca:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	2206      	movs	r2, #6
 80130d0:	6839      	ldr	r1, [r7, #0]
 80130d2:	4618      	mov	r0, r3
 80130d4:	f001 f967 	bl	80143a6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	3306      	adds	r3, #6
 80130dc:	2206      	movs	r2, #6
 80130de:	6879      	ldr	r1, [r7, #4]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f001 f960 	bl	80143a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130ec:	2b06      	cmp	r3, #6
 80130ee:	d006      	beq.n	80130fe <ethernet_output+0x66>
 80130f0:	4b0a      	ldr	r3, [pc, #40]	; (801311c <ethernet_output+0x84>)
 80130f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80130f6:	490a      	ldr	r1, [pc, #40]	; (8013120 <ethernet_output+0x88>)
 80130f8:	480a      	ldr	r0, [pc, #40]	; (8013124 <ethernet_output+0x8c>)
 80130fa:	f001 f967 	bl	80143cc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	699b      	ldr	r3, [r3, #24]
 8013102:	68b9      	ldr	r1, [r7, #8]
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	4798      	blx	r3
 8013108:	4603      	mov	r3, r0
 801310a:	e002      	b.n	8013112 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801310c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801310e:	f06f 0301 	mvn.w	r3, #1
}
 8013112:	4618      	mov	r0, r3
 8013114:	3718      	adds	r7, #24
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	08017d70 	.word	0x08017d70
 8013120:	08017da8 	.word	0x08017da8
 8013124:	08017ddc 	.word	0x08017ddc

08013128 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	60bb      	str	r3, [r7, #8]
 8013136:	2304      	movs	r3, #4
 8013138:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801313a:	f107 0308 	add.w	r3, r7, #8
 801313e:	2100      	movs	r1, #0
 8013140:	4618      	mov	r0, r3
 8013142:	f7ef fd70 	bl	8002c26 <osMessageCreate>
 8013146:	4602      	mov	r2, r0
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d102      	bne.n	801315a <sys_mbox_new+0x32>
    return ERR_MEM;
 8013154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013158:	e000      	b.n	801315c <sys_mbox_new+0x34>

  return ERR_OK;
 801315a:	2300      	movs	r3, #0
}
 801315c:	4618      	mov	r0, r3
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4618      	mov	r0, r3
 8013172:	f7ef fe1f 	bl	8002db4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4618      	mov	r0, r3
 801317c:	f7ef fe30 	bl	8002de0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8013180:	bf00      	nop
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8013192:	bf00      	nop
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	6839      	ldr	r1, [r7, #0]
 801319a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801319e:	4618      	mov	r0, r3
 80131a0:	f7ef fd54 	bl	8002c4c <osMessagePut>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1f4      	bne.n	8013194 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80131aa:	bf00      	nop
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	6839      	ldr	r1, [r7, #0]
 80131c2:	2200      	movs	r2, #0
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ef fd41 	bl	8002c4c <osMessagePut>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d102      	bne.n	80131d6 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80131d0:	2300      	movs	r3, #0
 80131d2:	73fb      	strb	r3, [r7, #15]
 80131d4:	e001      	b.n	80131da <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80131d6:	23ff      	movs	r3, #255	; 0xff
 80131d8:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80131da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b08c      	sub	sp, #48	; 0x30
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	61f8      	str	r0, [r7, #28]
 80131ee:	61b9      	str	r1, [r7, #24]
 80131f0:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80131f2:	f7ef fb88 	bl	8002906 <osKernelSysTick>
 80131f6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d017      	beq.n	801322e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	6819      	ldr	r1, [r3, #0]
 8013202:	f107 0320 	add.w	r3, r7, #32
 8013206:	697a      	ldr	r2, [r7, #20]
 8013208:	4618      	mov	r0, r3
 801320a:	f7ef fd5f 	bl	8002ccc <osMessageGet>

    if(event.status == osEventMessage)
 801320e:	6a3b      	ldr	r3, [r7, #32]
 8013210:	2b10      	cmp	r3, #16
 8013212:	d109      	bne.n	8013228 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	461a      	mov	r2, r3
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801321c:	f7ef fb73 	bl	8002906 <osKernelSysTick>
 8013220:	4602      	mov	r2, r0
 8013222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	e019      	b.n	801325c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801322c:	e016      	b.n	801325c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	6819      	ldr	r1, [r3, #0]
 8013232:	463b      	mov	r3, r7
 8013234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013238:	4618      	mov	r0, r3
 801323a:	f7ef fd47 	bl	8002ccc <osMessageGet>
 801323e:	f107 0320 	add.w	r3, r7, #32
 8013242:	463a      	mov	r2, r7
 8013244:	ca07      	ldmia	r2, {r0, r1, r2}
 8013246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324c:	461a      	mov	r2, r3
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013252:	f7ef fb58 	bl	8002906 <osKernelSysTick>
 8013256:	4602      	mov	r2, r0
 8013258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801325c:	4618      	mov	r0, r3
 801325e:	3730      	adds	r7, #48	; 0x30
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6819      	ldr	r1, [r3, #0]
 8013272:	f107 030c 	add.w	r3, r7, #12
 8013276:	2200      	movs	r2, #0
 8013278:	4618      	mov	r0, r3
 801327a:	f7ef fd27 	bl	8002ccc <osMessageGet>

  if(event.status == osEventMessage)
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2b10      	cmp	r3, #16
 8013282:	d105      	bne.n	8013290 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	461a      	mov	r2, r3
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801328c:	2300      	movs	r3, #0
 801328e:	e001      	b.n	8013294 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8013290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d101      	bne.n	80132b0 <sys_mbox_valid+0x14>
    return 0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	e000      	b.n	80132b2 <sys_mbox_valid+0x16>
  else
    return 1;
 80132b0:	2301      	movs	r3, #1
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80132be:	b480      	push	{r7}
 80132c0:	b083      	sub	sp, #12
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]
}
 80132cc:	bf00      	nop
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	460b      	mov	r3, r1
 80132e2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80132e4:	2300      	movs	r3, #0
 80132e6:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80132e8:	f107 030c 	add.w	r3, r7, #12
 80132ec:	2101      	movs	r1, #1
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7ef fbe4 	bl	8002abc <osSemaphoreCreate>
 80132f4:	4602      	mov	r2, r0
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d102      	bne.n	8013308 <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013306:	e009      	b.n	801331c <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8013308:	78fb      	ldrb	r3, [r7, #3]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d105      	bne.n	801331a <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2100      	movs	r1, #0
 8013314:	4618      	mov	r0, r3
 8013316:	f7ef fbef 	bl	8002af8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801331a:	2300      	movs	r3, #0
}
 801331c:	4618      	mov	r0, r3
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}

08013324 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801332e:	f7ef faea 	bl	8002906 <osKernelSysTick>
 8013332:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d011      	beq.n	801335e <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	6839      	ldr	r1, [r7, #0]
 8013340:	4618      	mov	r0, r3
 8013342:	f7ef fbd9 	bl	8002af8 <osSemaphoreWait>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d105      	bne.n	8013358 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801334c:	f7ef fadb 	bl	8002906 <osKernelSysTick>
 8013350:	4602      	mov	r2, r0
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	1ad3      	subs	r3, r2, r3
 8013356:	e012      	b.n	801337e <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801335c:	e00f      	b.n	801337e <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801335e:	bf00      	nop
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013368:	4618      	mov	r0, r3
 801336a:	f7ef fbc5 	bl	8002af8 <osSemaphoreWait>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d1f5      	bne.n	8013360 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8013374:	f7ef fac7 	bl	8002906 <osKernelSysTick>
 8013378:	4602      	mov	r2, r0
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801337e:	4618      	mov	r0, r3
 8013380:	3710      	adds	r7, #16
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8013386:	b580      	push	{r7, lr}
 8013388:	b082      	sub	sp, #8
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	4618      	mov	r0, r3
 8013394:	f7ef fbfe 	bl	8002b94 <osSemaphoreRelease>
}
 8013398:	bf00      	nop
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ef fc27 	bl	8002c00 <osSemaphoreDelete>
}
 80133b2:	bf00      	nop
 80133b4:	3708      	adds	r7, #8
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}

080133ba <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80133ba:	b480      	push	{r7}
 80133bc:	b083      	sub	sp, #12
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d101      	bne.n	80133ce <sys_sem_valid+0x14>
    return 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	e000      	b.n	80133d0 <sys_sem_valid+0x16>
  else
    return 1;
 80133ce:	2301      	movs	r3, #1
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2200      	movs	r2, #0
 80133e8:	601a      	str	r2, [r3, #0]
}
 80133ea:	bf00      	nop
 80133ec:	370c      	adds	r7, #12
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr
	...

080133f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80133fc:	4803      	ldr	r0, [pc, #12]	; (801340c <sys_init+0x14>)
 80133fe:	f7ef facd 	bl	800299c <osMutexCreate>
 8013402:	4602      	mov	r2, r0
 8013404:	4b02      	ldr	r3, [pc, #8]	; (8013410 <sys_init+0x18>)
 8013406:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013408:	bf00      	nop
 801340a:	bd80      	pop	{r7, pc}
 801340c:	08017ff8 	.word	0x08017ff8
 8013410:	20007758 	.word	0x20007758

08013414 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801341c:	2300      	movs	r3, #0
 801341e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013420:	f107 030c 	add.w	r3, r7, #12
 8013424:	4618      	mov	r0, r3
 8013426:	f7ef fab9 	bl	800299c <osMutexCreate>
 801342a:	4602      	mov	r2, r0
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d102      	bne.n	801343e <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801343c:	e000      	b.n	8013440 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801343e:	2300      	movs	r3, #0
}
 8013440:	4618      	mov	r0, r3
 8013442:	3710      	adds	r7, #16
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013458:	4618      	mov	r0, r3
 801345a:	f7ef faab 	bl	80029b4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801345e:	bf00      	nop
 8013460:	3708      	adds	r7, #8
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013466:	b580      	push	{r7, lr}
 8013468:	b082      	sub	sp, #8
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4618      	mov	r0, r3
 8013474:	f7ef faec 	bl	8002a50 <osMutexRelease>
}
 8013478:	bf00      	nop
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b08a      	sub	sp, #40	; 0x28
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	617b      	str	r3, [r7, #20]
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	61bb      	str	r3, [r7, #24]
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	b21b      	sxth	r3, r3
 801349a:	83bb      	strh	r3, [r7, #28]
 801349c:	2300      	movs	r3, #0
 801349e:	623b      	str	r3, [r7, #32]
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80134a4:	f107 0314 	add.w	r3, r7, #20
 80134a8:	6879      	ldr	r1, [r7, #4]
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7ef fa3b 	bl	8002926 <osThreadCreate>
 80134b0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3728      	adds	r7, #40	; 0x28
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
	...

080134bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80134c0:	4b04      	ldr	r3, [pc, #16]	; (80134d4 <sys_arch_protect+0x18>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ef fa73 	bl	80029b4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80134ce:	2301      	movs	r3, #1
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	20007758 	.word	0x20007758

080134d8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80134e0:	4b04      	ldr	r3, [pc, #16]	; (80134f4 <sys_arch_unprotect+0x1c>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ef fab3 	bl	8002a50 <osMutexRelease>
}
 80134ea:	bf00      	nop
 80134ec:	3708      	adds	r7, #8
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	20007758 	.word	0x20007758

080134f8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b08e      	sub	sp, #56	; 0x38
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	4a59      	ldr	r2, [pc, #356]	; (801366c <HAL_ETH_MspInit+0x174>)
 8013506:	4293      	cmp	r3, r2
 8013508:	f040 80ac 	bne.w	8013664 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801350c:	2300      	movs	r3, #0
 801350e:	623b      	str	r3, [r7, #32]
 8013510:	4a57      	ldr	r2, [pc, #348]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013512:	4b57      	ldr	r3, [pc, #348]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801351a:	6313      	str	r3, [r2, #48]	; 0x30
 801351c:	4b54      	ldr	r3, [pc, #336]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013524:	623b      	str	r3, [r7, #32]
 8013526:	6a3b      	ldr	r3, [r7, #32]
 8013528:	2300      	movs	r3, #0
 801352a:	61fb      	str	r3, [r7, #28]
 801352c:	4a50      	ldr	r2, [pc, #320]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801352e:	4b50      	ldr	r3, [pc, #320]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013536:	6313      	str	r3, [r2, #48]	; 0x30
 8013538:	4b4d      	ldr	r3, [pc, #308]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801353c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013540:	61fb      	str	r3, [r7, #28]
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	2300      	movs	r3, #0
 8013546:	61bb      	str	r3, [r7, #24]
 8013548:	4a49      	ldr	r2, [pc, #292]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801354a:	4b49      	ldr	r3, [pc, #292]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801354e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013552:	6313      	str	r3, [r2, #48]	; 0x30
 8013554:	4b46      	ldr	r3, [pc, #280]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801355c:	61bb      	str	r3, [r7, #24]
 801355e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013560:	2300      	movs	r3, #0
 8013562:	617b      	str	r3, [r7, #20]
 8013564:	4a42      	ldr	r2, [pc, #264]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013566:	4b42      	ldr	r3, [pc, #264]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801356a:	f043 0304 	orr.w	r3, r3, #4
 801356e:	6313      	str	r3, [r2, #48]	; 0x30
 8013570:	4b3f      	ldr	r3, [pc, #252]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013574:	f003 0304 	and.w	r3, r3, #4
 8013578:	617b      	str	r3, [r7, #20]
 801357a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801357c:	2300      	movs	r3, #0
 801357e:	613b      	str	r3, [r7, #16]
 8013580:	4a3b      	ldr	r2, [pc, #236]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013582:	4b3b      	ldr	r3, [pc, #236]	; (8013670 <HAL_ETH_MspInit+0x178>)
 8013584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013586:	f043 0301 	orr.w	r3, r3, #1
 801358a:	6313      	str	r3, [r2, #48]	; 0x30
 801358c:	4b38      	ldr	r3, [pc, #224]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013590:	f003 0301 	and.w	r3, r3, #1
 8013594:	613b      	str	r3, [r7, #16]
 8013596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013598:	2300      	movs	r3, #0
 801359a:	60fb      	str	r3, [r7, #12]
 801359c:	4a34      	ldr	r2, [pc, #208]	; (8013670 <HAL_ETH_MspInit+0x178>)
 801359e:	4b34      	ldr	r3, [pc, #208]	; (8013670 <HAL_ETH_MspInit+0x178>)
 80135a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a2:	f043 0302 	orr.w	r3, r3, #2
 80135a6:	6313      	str	r3, [r2, #48]	; 0x30
 80135a8:	4b31      	ldr	r3, [pc, #196]	; (8013670 <HAL_ETH_MspInit+0x178>)
 80135aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ac:	f003 0302 	and.w	r3, r3, #2
 80135b0:	60fb      	str	r3, [r7, #12]
 80135b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80135b4:	2300      	movs	r3, #0
 80135b6:	60bb      	str	r3, [r7, #8]
 80135b8:	4a2d      	ldr	r2, [pc, #180]	; (8013670 <HAL_ETH_MspInit+0x178>)
 80135ba:	4b2d      	ldr	r3, [pc, #180]	; (8013670 <HAL_ETH_MspInit+0x178>)
 80135bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135c2:	6313      	str	r3, [r2, #48]	; 0x30
 80135c4:	4b2a      	ldr	r3, [pc, #168]	; (8013670 <HAL_ETH_MspInit+0x178>)
 80135c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135cc:	60bb      	str	r3, [r7, #8]
 80135ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80135d0:	2332      	movs	r3, #50	; 0x32
 80135d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80135d4:	2302      	movs	r3, #2
 80135d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135d8:	2300      	movs	r3, #0
 80135da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80135dc:	2303      	movs	r3, #3
 80135de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80135e0:	230b      	movs	r3, #11
 80135e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80135e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80135e8:	4619      	mov	r1, r3
 80135ea:	4822      	ldr	r0, [pc, #136]	; (8013674 <HAL_ETH_MspInit+0x17c>)
 80135ec:	f7ee f92c 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80135f0:	2386      	movs	r3, #134	; 0x86
 80135f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80135f4:	2302      	movs	r3, #2
 80135f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135f8:	2300      	movs	r3, #0
 80135fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80135fc:	2303      	movs	r3, #3
 80135fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013600:	230b      	movs	r3, #11
 8013602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013608:	4619      	mov	r1, r3
 801360a:	481b      	ldr	r0, [pc, #108]	; (8013678 <HAL_ETH_MspInit+0x180>)
 801360c:	f7ee f91c 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8013610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013616:	2302      	movs	r3, #2
 8013618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801361a:	2300      	movs	r3, #0
 801361c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801361e:	2303      	movs	r3, #3
 8013620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013622:	230b      	movs	r3, #11
 8013624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801362a:	4619      	mov	r1, r3
 801362c:	4813      	ldr	r0, [pc, #76]	; (801367c <HAL_ETH_MspInit+0x184>)
 801362e:	f7ee f90b 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8013632:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8013636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013638:	2302      	movs	r3, #2
 801363a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801363c:	2300      	movs	r3, #0
 801363e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013640:	2303      	movs	r3, #3
 8013642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013644:	230b      	movs	r3, #11
 8013646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801364c:	4619      	mov	r1, r3
 801364e:	480c      	ldr	r0, [pc, #48]	; (8013680 <HAL_ETH_MspInit+0x188>)
 8013650:	f7ee f8fa 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8013654:	2200      	movs	r2, #0
 8013656:	2105      	movs	r1, #5
 8013658:	203d      	movs	r0, #61	; 0x3d
 801365a:	f7ed f8bb 	bl	80007d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801365e:	203d      	movs	r0, #61	; 0x3d
 8013660:	f7ed f8d4 	bl	800080c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8013664:	bf00      	nop
 8013666:	3738      	adds	r7, #56	; 0x38
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	40028000 	.word	0x40028000
 8013670:	40023800 	.word	0x40023800
 8013674:	40020800 	.word	0x40020800
 8013678:	40020000 	.word	0x40020000
 801367c:	40020400 	.word	0x40020400
 8013680:	40021800 	.word	0x40021800

08013684 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 801368c:	4b04      	ldr	r3, [pc, #16]	; (80136a0 <HAL_ETH_RxCpltCallback+0x1c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4618      	mov	r0, r3
 8013692:	f7ef fa7f 	bl	8002b94 <osSemaphoreRelease>
}
 8013696:	bf00      	nop
 8013698:	3708      	adds	r7, #8
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	20003f84 	.word	0x20003f84

080136a4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80136a4:	b5b0      	push	{r4, r5, r7, lr}
 80136a6:	b08c      	sub	sp, #48	; 0x30
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80136b0:	4b5f      	ldr	r3, [pc, #380]	; (8013830 <low_level_init+0x18c>)
 80136b2:	4a60      	ldr	r2, [pc, #384]	; (8013834 <low_level_init+0x190>)
 80136b4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80136b6:	4b5e      	ldr	r3, [pc, #376]	; (8013830 <low_level_init+0x18c>)
 80136b8:	2201      	movs	r2, #1
 80136ba:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 80136bc:	4b5c      	ldr	r3, [pc, #368]	; (8013830 <low_level_init+0x18c>)
 80136be:	2200      	movs	r2, #0
 80136c0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80136c2:	2300      	movs	r3, #0
 80136c4:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 80136c8:	2380      	movs	r3, #128	; 0x80
 80136ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 80136ce:	23e1      	movs	r3, #225	; 0xe1
 80136d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 80136d4:	2300      	movs	r3, #0
 80136d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x00;
 80136da:	2300      	movs	r3, #0
 80136dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x00;
 80136e0:	2300      	movs	r3, #0
 80136e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 80136e6:	4a52      	ldr	r2, [pc, #328]	; (8013830 <low_level_init+0x18c>)
 80136e8:	f107 0320 	add.w	r3, r7, #32
 80136ec:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80136ee:	4b50      	ldr	r3, [pc, #320]	; (8013830 <low_level_init+0x18c>)
 80136f0:	2201      	movs	r2, #1
 80136f2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80136f4:	4b4e      	ldr	r3, [pc, #312]	; (8013830 <low_level_init+0x18c>)
 80136f6:	2200      	movs	r2, #0
 80136f8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80136fa:	4b4d      	ldr	r3, [pc, #308]	; (8013830 <low_level_init+0x18c>)
 80136fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013700:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8013702:	484b      	ldr	r0, [pc, #300]	; (8013830 <low_level_init+0x18c>)
 8013704:	f7ed f890 	bl	8000828 <HAL_ETH_Init>
 8013708:	4603      	mov	r3, r0
 801370a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (hal_eth_init_status == HAL_OK)
 801370e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013712:	2b00      	cmp	r3, #0
 8013714:	d108      	bne.n	8013728 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801371c:	f043 0304 	orr.w	r3, r3, #4
 8013720:	b2da      	uxtb	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8013728:	2304      	movs	r3, #4
 801372a:	4a43      	ldr	r2, [pc, #268]	; (8013838 <low_level_init+0x194>)
 801372c:	4943      	ldr	r1, [pc, #268]	; (801383c <low_level_init+0x198>)
 801372e:	4840      	ldr	r0, [pc, #256]	; (8013830 <low_level_init+0x18c>)
 8013730:	f7ed fa18 	bl	8000b64 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8013734:	2304      	movs	r3, #4
 8013736:	4a42      	ldr	r2, [pc, #264]	; (8013840 <low_level_init+0x19c>)
 8013738:	4942      	ldr	r1, [pc, #264]	; (8013844 <low_level_init+0x1a0>)
 801373a:	483d      	ldr	r0, [pc, #244]	; (8013830 <low_level_init+0x18c>)
 801373c:	f7ed fa7b 	bl	8000c36 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2206      	movs	r2, #6
 8013744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013748:	4b39      	ldr	r3, [pc, #228]	; (8013830 <low_level_init+0x18c>)
 801374a:	695b      	ldr	r3, [r3, #20]
 801374c:	781a      	ldrb	r2, [r3, #0]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8013754:	4b36      	ldr	r3, [pc, #216]	; (8013830 <low_level_init+0x18c>)
 8013756:	695b      	ldr	r3, [r3, #20]
 8013758:	785a      	ldrb	r2, [r3, #1]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8013760:	4b33      	ldr	r3, [pc, #204]	; (8013830 <low_level_init+0x18c>)
 8013762:	695b      	ldr	r3, [r3, #20]
 8013764:	789a      	ldrb	r2, [r3, #2]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801376c:	4b30      	ldr	r3, [pc, #192]	; (8013830 <low_level_init+0x18c>)
 801376e:	695b      	ldr	r3, [r3, #20]
 8013770:	78da      	ldrb	r2, [r3, #3]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8013778:	4b2d      	ldr	r3, [pc, #180]	; (8013830 <low_level_init+0x18c>)
 801377a:	695b      	ldr	r3, [r3, #20]
 801377c:	791a      	ldrb	r2, [r3, #4]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013784:	4b2a      	ldr	r3, [pc, #168]	; (8013830 <low_level_init+0x18c>)
 8013786:	695b      	ldr	r3, [r3, #20]
 8013788:	795a      	ldrb	r2, [r3, #5]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8013796:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801379e:	f043 030a 	orr.w	r3, r3, #10
 80137a2:	b2da      	uxtb	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80137aa:	2300      	movs	r3, #0
 80137ac:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80137ae:	f107 031c 	add.w	r3, r7, #28
 80137b2:	2101      	movs	r1, #1
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7ef f981 	bl	8002abc <osSemaphoreCreate>
 80137ba:	4602      	mov	r2, r0
 80137bc:	4b22      	ldr	r3, [pc, #136]	; (8013848 <low_level_init+0x1a4>)
 80137be:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80137c0:	4b22      	ldr	r3, [pc, #136]	; (801384c <low_level_init+0x1a8>)
 80137c2:	f107 0408 	add.w	r4, r7, #8
 80137c6:	461d      	mov	r5, r3
 80137c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137cc:	682b      	ldr	r3, [r5, #0]
 80137ce:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 80137d0:	f107 0308 	add.w	r3, r7, #8
 80137d4:	6879      	ldr	r1, [r7, #4]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7ef f8a5 	bl	8002926 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80137dc:	4814      	ldr	r0, [pc, #80]	; (8013830 <low_level_init+0x18c>)
 80137de:	f7ed fd52 	bl	8001286 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  
  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 80137e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80137e6:	461a      	mov	r2, r3
 80137e8:	2111      	movs	r1, #17
 80137ea:	4811      	ldr	r0, [pc, #68]	; (8013830 <low_level_init+0x18c>)
 80137ec:	f7ed fc7d 	bl	80010ea <HAL_ETH_ReadPHYRegister>
  
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 80137f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f2:	f043 0303 	orr.w	r3, r3, #3
 80137f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 80137f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fa:	461a      	mov	r2, r3
 80137fc:	2111      	movs	r1, #17
 80137fe:	480c      	ldr	r0, [pc, #48]	; (8013830 <low_level_init+0x18c>)
 8013800:	f7ed fcdb 	bl	80011ba <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8013804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013808:	461a      	mov	r2, r3
 801380a:	2112      	movs	r1, #18
 801380c:	4808      	ldr	r0, [pc, #32]	; (8013830 <low_level_init+0x18c>)
 801380e:	f7ed fc6c 	bl	80010ea <HAL_ETH_ReadPHYRegister>
  
  regvalue |= PHY_MISR_LINK_INT_EN;
 8013812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013814:	f043 0320 	orr.w	r3, r3, #32
 8013818:	62bb      	str	r3, [r7, #40]	; 0x28
    
  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 801381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381c:	461a      	mov	r2, r3
 801381e:	2112      	movs	r1, #18
 8013820:	4803      	ldr	r0, [pc, #12]	; (8013830 <low_level_init+0x18c>)
 8013822:	f7ed fcca 	bl	80011ba <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8013826:	bf00      	nop
 8013828:	3730      	adds	r7, #48	; 0x30
 801382a:	46bd      	mov	sp, r7
 801382c:	bdb0      	pop	{r4, r5, r7, pc}
 801382e:	bf00      	nop
 8013830:	2000902c 	.word	0x2000902c
 8013834:	40028000 	.word	0x40028000
 8013838:	20009074 	.word	0x20009074
 801383c:	2000775c 	.word	0x2000775c
 8013840:	200077dc 	.word	0x200077dc
 8013844:	20008fac 	.word	0x20008fac
 8013848:	20003f84 	.word	0x20003f84
 801384c:	08017e0c 	.word	0x08017e0c

08013850 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b08a      	sub	sp, #40	; 0x28
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801385a:	4b4b      	ldr	r3, [pc, #300]	; (8013988 <low_level_output+0x138>)
 801385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8013872:	4b45      	ldr	r3, [pc, #276]	; (8013988 <low_level_output+0x138>)
 8013874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013876:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8013878:	2300      	movs	r3, #0
 801387a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	623b      	str	r3, [r7, #32]
 8013880:	e05a      	b.n	8013938 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b00      	cmp	r3, #0
 8013888:	da03      	bge.n	8013892 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801388a:	23f8      	movs	r3, #248	; 0xf8
 801388c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8013890:	e05c      	b.n	801394c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8013892:	6a3b      	ldr	r3, [r7, #32]
 8013894:	895b      	ldrh	r3, [r3, #10]
 8013896:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8013898:	2300      	movs	r3, #0
 801389a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801389c:	e02f      	b.n	80138fe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801389e:	69fa      	ldr	r2, [r7, #28]
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	18d0      	adds	r0, r2, r3
 80138a4:	6a3b      	ldr	r3, [r7, #32]
 80138a6:	685a      	ldr	r2, [r3, #4]
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	18d1      	adds	r1, r2, r3
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80138b2:	3304      	adds	r3, #4
 80138b4:	461a      	mov	r2, r3
 80138b6:	f000 fd76 	bl	80143a6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	da03      	bge.n	80138d0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80138c8:	23f8      	movs	r3, #248	; 0xf8
 80138ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80138ce:	e03d      	b.n	801394c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	689b      	ldr	r3, [r3, #8]
 80138d4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80138d6:	693a      	ldr	r2, [r7, #16]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	4413      	add	r3, r2
 80138dc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80138e0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80138e2:	68ba      	ldr	r2, [r7, #8]
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	1ad3      	subs	r3, r2, r3
 80138e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80138ec:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80138ee:	697a      	ldr	r2, [r7, #20]
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80138f8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80138fa:	2300      	movs	r3, #0
 80138fc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	4413      	add	r3, r2
 8013904:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013908:	4293      	cmp	r3, r2
 801390a:	d8c8      	bhi.n	801389e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801390c:	69fa      	ldr	r2, [r7, #28]
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	18d0      	adds	r0, r2, r3
 8013912:	6a3b      	ldr	r3, [r7, #32]
 8013914:	685a      	ldr	r2, [r3, #4]
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	4413      	add	r3, r2
 801391a:	68fa      	ldr	r2, [r7, #12]
 801391c:	4619      	mov	r1, r3
 801391e:	f000 fd42 	bl	80143a6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8013922:	693a      	ldr	r2, [r7, #16]
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	4413      	add	r3, r2
 8013928:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	4413      	add	r3, r2
 8013930:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8013932:	6a3b      	ldr	r3, [r7, #32]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	623b      	str	r3, [r7, #32]
 8013938:	6a3b      	ldr	r3, [r7, #32]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1a1      	bne.n	8013882 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 801393e:	6979      	ldr	r1, [r7, #20]
 8013940:	4811      	ldr	r0, [pc, #68]	; (8013988 <low_level_output+0x138>)
 8013942:	f7ed f9e5 	bl	8000d10 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8013946:	2300      	movs	r3, #0
 8013948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801394c:	4b0e      	ldr	r3, [pc, #56]	; (8013988 <low_level_output+0x138>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013954:	3314      	adds	r3, #20
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f003 0320 	and.w	r3, r3, #32
 801395c:	2b00      	cmp	r3, #0
 801395e:	d00d      	beq.n	801397c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013960:	4b09      	ldr	r3, [pc, #36]	; (8013988 <low_level_output+0x138>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013968:	3314      	adds	r3, #20
 801396a:	2220      	movs	r2, #32
 801396c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801396e:	4b06      	ldr	r3, [pc, #24]	; (8013988 <low_level_output+0x138>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013976:	3304      	adds	r3, #4
 8013978:	2200      	movs	r2, #0
 801397a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 801397c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013980:	4618      	mov	r0, r3
 8013982:	3728      	adds	r7, #40	; 0x28
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}
 8013988:	2000902c 	.word	0x2000902c

0801398c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b08c      	sub	sp, #48	; 0x30
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8013994:	2300      	movs	r3, #0
 8013996:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8013998:	2300      	movs	r3, #0
 801399a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 801399c:	2300      	movs	r3, #0
 801399e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80139a0:	2300      	movs	r3, #0
 80139a2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80139ac:	2300      	movs	r3, #0
 80139ae:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80139b0:	484e      	ldr	r0, [pc, #312]	; (8013aec <low_level_input+0x160>)
 80139b2:	f7ed fa97 	bl	8000ee4 <HAL_ETH_GetReceivedFrame_IT>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d001      	beq.n	80139c0 <low_level_input+0x34>
    return NULL;
 80139bc:	2300      	movs	r3, #0
 80139be:	e091      	b.n	8013ae4 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80139c0:	4b4a      	ldr	r3, [pc, #296]	; (8013aec <low_level_input+0x160>)
 80139c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139c4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80139c6:	4b49      	ldr	r3, [pc, #292]	; (8013aec <low_level_input+0x160>)
 80139c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ca:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80139cc:	89fb      	ldrh	r3, [r7, #14]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d006      	beq.n	80139e0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80139d2:	89fb      	ldrh	r3, [r7, #14]
 80139d4:	2203      	movs	r2, #3
 80139d6:	4619      	mov	r1, r3
 80139d8:	2004      	movs	r0, #4
 80139da:	f7f8 fd85 	bl	800c4e8 <pbuf_alloc>
 80139de:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80139e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d04b      	beq.n	8013a7e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80139e6:	4b41      	ldr	r3, [pc, #260]	; (8013aec <low_level_input+0x160>)
 80139e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ea:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80139ec:	2300      	movs	r3, #0
 80139ee:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80139f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80139f4:	e040      	b.n	8013a78 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80139f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f8:	895b      	ldrh	r3, [r3, #10]
 80139fa:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80139fc:	2300      	movs	r3, #0
 80139fe:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013a00:	e021      	b.n	8013a46 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a04:	685a      	ldr	r2, [r3, #4]
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	18d0      	adds	r0, r2, r3
 8013a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a0c:	69fb      	ldr	r3, [r7, #28]
 8013a0e:	18d1      	adds	r1, r2, r3
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8013a16:	3304      	adds	r3, #4
 8013a18:	461a      	mov	r2, r3
 8013a1a:	f000 fcc4 	bl	80143a6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013a1e:	6a3b      	ldr	r3, [r7, #32]
 8013a20:	68db      	ldr	r3, [r3, #12]
 8013a22:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	689b      	ldr	r3, [r3, #8]
 8013a28:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8013a2a:	69fa      	ldr	r2, [r7, #28]
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	4413      	add	r3, r2
 8013a30:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013a34:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013a36:	69ba      	ldr	r2, [r7, #24]
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013a40:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8013a42:	2300      	movs	r3, #0
 8013a44:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013a46:	697a      	ldr	r2, [r7, #20]
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d8d6      	bhi.n	8013a02 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	685a      	ldr	r2, [r3, #4]
 8013a58:	69bb      	ldr	r3, [r7, #24]
 8013a5a:	18d0      	adds	r0, r2, r3
 8013a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	4413      	add	r3, r2
 8013a62:	697a      	ldr	r2, [r7, #20]
 8013a64:	4619      	mov	r1, r3
 8013a66:	f000 fc9e 	bl	80143a6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8013a6a:	69fa      	ldr	r2, [r7, #28]
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	4413      	add	r3, r2
 8013a70:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1bb      	bne.n	80139f6 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013a7e:	4b1b      	ldr	r3, [pc, #108]	; (8013aec <low_level_input+0x160>)
 8013a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a82:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a84:	2300      	movs	r3, #0
 8013a86:	613b      	str	r3, [r7, #16]
 8013a88:	e00b      	b.n	8013aa2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013a8a:	6a3b      	ldr	r3, [r7, #32]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013a92:	6a3b      	ldr	r3, [r7, #32]
 8013a94:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013a96:	6a3b      	ldr	r3, [r7, #32]
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	613b      	str	r3, [r7, #16]
 8013aa2:	4b12      	ldr	r3, [pc, #72]	; (8013aec <low_level_input+0x160>)
 8013aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d8ee      	bhi.n	8013a8a <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8013aac:	4b0f      	ldr	r3, [pc, #60]	; (8013aec <low_level_input+0x160>)
 8013aae:	2200      	movs	r2, #0
 8013ab0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8013ab2:	4b0e      	ldr	r3, [pc, #56]	; (8013aec <low_level_input+0x160>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013aba:	3314      	adds	r3, #20
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00d      	beq.n	8013ae2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013ac6:	4b09      	ldr	r3, [pc, #36]	; (8013aec <low_level_input+0x160>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ace:	3314      	adds	r3, #20
 8013ad0:	2280      	movs	r2, #128	; 0x80
 8013ad2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8013ad4:	4b05      	ldr	r3, [pc, #20]	; (8013aec <low_level_input+0x160>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013adc:	3308      	adds	r3, #8
 8013ade:	2200      	movs	r2, #0
 8013ae0:	601a      	str	r2, [r3, #0]
  }
  return p;
 8013ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3730      	adds	r7, #48	; 0x30
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	2000902c 	.word	0x2000902c

08013af0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8013afc:	4b0f      	ldr	r3, [pc, #60]	; (8013b3c <ethernetif_input+0x4c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7ee fff7 	bl	8002af8 <osSemaphoreWait>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d1f5      	bne.n	8013afc <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f7ff ff3b 	bl	801398c <low_level_input>
 8013b16:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d00a      	beq.n	8013b34 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	68f9      	ldr	r1, [r7, #12]
 8013b24:	68b8      	ldr	r0, [r7, #8]
 8013b26:	4798      	blx	r3
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d002      	beq.n	8013b34 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8013b2e:	68b8      	ldr	r0, [r7, #8]
 8013b30:	f7f9 f84c 	bl	800cbcc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d1ea      	bne.n	8013b10 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8013b3a:	e7df      	b.n	8013afc <ethernetif_input+0xc>
 8013b3c:	20003f84 	.word	0x20003f84

08013b40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d106      	bne.n	8013b5c <ethernetif_init+0x1c>
 8013b4e:	4b0e      	ldr	r3, [pc, #56]	; (8013b88 <ethernetif_init+0x48>)
 8013b50:	f240 2233 	movw	r2, #563	; 0x233
 8013b54:	490d      	ldr	r1, [pc, #52]	; (8013b8c <ethernetif_init+0x4c>)
 8013b56:	480e      	ldr	r0, [pc, #56]	; (8013b90 <ethernetif_init+0x50>)
 8013b58:	f000 fc38 	bl	80143cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2273      	movs	r2, #115	; 0x73
 8013b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2274      	movs	r2, #116	; 0x74
 8013b68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4a09      	ldr	r2, [pc, #36]	; (8013b94 <ethernetif_init+0x54>)
 8013b70:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4a08      	ldr	r2, [pc, #32]	; (8013b98 <ethernetif_init+0x58>)
 8013b76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff fd93 	bl	80136a4 <low_level_init>

  return ERR_OK;
 8013b7e:	2300      	movs	r3, #0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	08017e20 	.word	0x08017e20
 8013b8c:	08017e34 	.word	0x08017e34
 8013b90:	08017e44 	.word	0x08017e44
 8013b94:	08009ebd 	.word	0x08009ebd
 8013b98:	08013851 	.word	0x08013851

08013b9c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8013ba0:	f7ec fd34 	bl	800060c <HAL_GetTick>
 8013ba4:	4603      	mov	r3, r0
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	bd80      	pop	{r7, pc}
	...

08013bac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8013bac:	b5b0      	push	{r4, r5, r7, lr}
 8013bae:	b08a      	sub	sp, #40	; 0x28
 8013bb0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8013bb2:	4b12      	ldr	r3, [pc, #72]	; (8013bfc <MX_FREERTOS_Init+0x50>)
 8013bb4:	f107 0414 	add.w	r4, r7, #20
 8013bb8:	461d      	mov	r5, r3
 8013bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bbe:	682b      	ldr	r3, [r5, #0]
 8013bc0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8013bc2:	f107 0314 	add.w	r3, r7, #20
 8013bc6:	2100      	movs	r1, #0
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7ee feac 	bl	8002926 <osThreadCreate>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	4b0b      	ldr	r3, [pc, #44]	; (8013c00 <MX_FREERTOS_Init+0x54>)
 8013bd2:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Blink_Task */
  osThreadDef(LED_Blink_Task, StartBlinkTask, osPriorityIdle, 0, 128);
 8013bd4:	4b0b      	ldr	r3, [pc, #44]	; (8013c04 <MX_FREERTOS_Init+0x58>)
 8013bd6:	463c      	mov	r4, r7
 8013bd8:	461d      	mov	r5, r3
 8013bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bde:	682b      	ldr	r3, [r5, #0]
 8013be0:	6023      	str	r3, [r4, #0]
  LED_Blink_TaskHandle = osThreadCreate(osThread(LED_Blink_Task), NULL);
 8013be2:	463b      	mov	r3, r7
 8013be4:	2100      	movs	r1, #0
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ee fe9d 	bl	8002926 <osThreadCreate>
 8013bec:	4602      	mov	r2, r0
 8013bee:	4b06      	ldr	r3, [pc, #24]	; (8013c08 <MX_FREERTOS_Init+0x5c>)
 8013bf0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8013bf2:	bf00      	nop
 8013bf4:	3728      	adds	r7, #40	; 0x28
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	08017e78 	.word	0x08017e78
 8013c00:	2000a848 	.word	0x2000a848
 8013c04:	08017e9c 	.word	0x08017e9c
 8013c08:	2000a844 	.word	0x2000a844

08013c0c <tcpecho_thread>:
		<body> \This is a small test page. By Justin\</body> \
		</html>";

const static char http_html_hdr[] ="Content-type: text/html\r\n\r\n";

static void tcpecho_thread(void *arg){
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b08a      	sub	sp, #40	; 0x28
 8013c10:	af02      	add	r7, sp, #8
 8013c12:	6078      	str	r0, [r7, #4]
	struct netbuf *buf;
	char *rq;
	uint16_t len;

	//create new connection identifier
	conn = netconn_new(NETCONN_TCP);
 8013c14:	2200      	movs	r2, #0
 8013c16:	2100      	movs	r1, #0
 8013c18:	2010      	movs	r0, #16
 8013c1a:	f7f1 fc77 	bl	800550c <netconn_new_with_proto_and_callback>
 8013c1e:	61f8      	str	r0, [r7, #28]

	if(conn!=NULL){
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d06c      	beq.n	8013d00 <tcpecho_thread+0xf4>

		//Bind connection to port 80
		err = netconn_bind(conn, NULL, 80);
 8013c26:	2250      	movs	r2, #80	; 0x50
 8013c28:	2100      	movs	r1, #0
 8013c2a:	69f8      	ldr	r0, [r7, #28]
 8013c2c:	f7f1 fd0e 	bl	800564c <netconn_bind>
 8013c30:	4603      	mov	r3, r0
 8013c32:	76fb      	strb	r3, [r7, #27]

		if(err == ERR_OK){
 8013c34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d15d      	bne.n	8013cf8 <tcpecho_thread+0xec>
			//Tell connection to go into listening mode
			netconn_listen(conn);
 8013c3c:	21ff      	movs	r1, #255	; 0xff
 8013c3e:	69f8      	ldr	r0, [r7, #28]
 8013c40:	f7f1 fd3c 	bl	80056bc <netconn_listen_with_backlog>

			while(1){
				//Grab new connection
				accept_err = netconn_accept(conn, &newconn);
 8013c44:	f107 0314 	add.w	r3, r7, #20
 8013c48:	4619      	mov	r1, r3
 8013c4a:	69f8      	ldr	r0, [r7, #28]
 8013c4c:	f7f1 fd62 	bl	8005714 <netconn_accept>
 8013c50:	4603      	mov	r3, r0
 8013c52:	76bb      	strb	r3, [r7, #26]

				//Process new connection
				if(accept_err == ERR_OK){
 8013c54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d1f3      	bne.n	8013c44 <tcpecho_thread+0x38>
					while((recv_err = netconn_recv(newconn, &buf)) == ERR_OK){
 8013c5c:	e036      	b.n	8013ccc <tcpecho_thread+0xc0>
						do
						{
							netbuf_data(buf, &rq, &len);
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	f107 020a 	add.w	r2, r7, #10
 8013c64:	f107 010c 	add.w	r1, r7, #12
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7f3 fc1b 	bl	80074a4 <netbuf_data>
							//netconn_write(newconn, data, len, NETCONN_COPY);

							/* Check if the request was an HTTP "GET /\r\n". */
							if(rq[0] == 'G' && rq[1] == 'E' &&rq[2] == 'T' && rq[3] == ' ' &&rq[4] == '/') {
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	2b47      	cmp	r3, #71	; 0x47
 8013c74:	d11f      	bne.n	8013cb6 <tcpecho_thread+0xaa>
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b45      	cmp	r3, #69	; 0x45
 8013c7e:	d11a      	bne.n	8013cb6 <tcpecho_thread+0xaa>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	3302      	adds	r3, #2
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	2b54      	cmp	r3, #84	; 0x54
 8013c88:	d115      	bne.n	8013cb6 <tcpecho_thread+0xaa>
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	3303      	adds	r3, #3
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	2b20      	cmp	r3, #32
 8013c92:	d110      	bne.n	8013cb6 <tcpecho_thread+0xaa>
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	3304      	adds	r3, #4
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	2b2f      	cmp	r3, #47	; 0x2f
 8013c9c:	d10b      	bne.n	8013cb6 <tcpecho_thread+0xaa>

								/* Send the header. */
								//netconn_write(newconn, http_html_hdr, sizeof(http_html_hdr),NETCONN_NOCOPY);

								/* Send the actual web page. */
								netconn_write(newconn, indexdata, sizeof(indexdata),NETCONN_NOCOPY);
 8013c9e:	6978      	ldr	r0, [r7, #20]
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	2270      	movs	r2, #112	; 0x70
 8013ca8:	4917      	ldr	r1, [pc, #92]	; (8013d08 <tcpecho_thread+0xfc>)
 8013caa:	f7f1 fef9 	bl	8005aa0 <netconn_write_partly>

								/* Close the connection. */
								netconn_close(newconn);
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7f1 ff9d 	bl	8005bf0 <netconn_close>
							}

						}
						while(netbuf_next(buf) >= 0);
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f3 fc3d 	bl	8007538 <netbuf_next>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	dacc      	bge.n	8013c5e <tcpecho_thread+0x52>

						netbuf_delete(buf);
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f3 fbcc 	bl	8007464 <netbuf_delete>
					while((recv_err = netconn_recv(newconn, &buf)) == ERR_OK){
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	f107 0210 	add.w	r2, r7, #16
 8013cd2:	4611      	mov	r1, r2
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7f1 fe6b 	bl	80059b0 <netconn_recv>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	767b      	strb	r3, [r7, #25]
 8013cde:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d0bb      	beq.n	8013c5e <tcpecho_thread+0x52>
					}
					netconn_close(newconn);
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f1 ff81 	bl	8005bf0 <netconn_close>
					netconn_delete(newconn);
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7f1 fc85 	bl	8005600 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8013cf6:	e7a5      	b.n	8013c44 <tcpecho_thread+0x38>
				}
			}
		}
		else {
			netconn_delete(newconn);
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7f1 fc80 	bl	8005600 <netconn_delete>
		}
	}
}
 8013d00:	bf00      	nop
 8013d02:	3720      	adds	r7, #32
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	08017ffc 	.word	0x08017ffc

08013d0c <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b086      	sub	sp, #24
 8013d10:	af02      	add	r7, sp, #8
 8013d12:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8013d14:	f000 f890 	bl	8013e38 <MX_LWIP_Init>

  //tcpip_init(NULL, NULL);

  //Netif_Config();

  int TCPECHO_THREAD_PRIO = 60;
 8013d18:	233c      	movs	r3, #60	; 0x3c
 8013d1a:	60fb      	str	r3, [r7, #12]
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d24:	2200      	movs	r2, #0
 8013d26:	4904      	ldr	r1, [pc, #16]	; (8013d38 <StartDefaultTask+0x2c>)
 8013d28:	4804      	ldr	r0, [pc, #16]	; (8013d3c <StartDefaultTask+0x30>)
 8013d2a:	f7ff fba9 	bl	8013480 <sys_thread_new>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8013d2e:	2001      	movs	r0, #1
 8013d30:	f7ee fe20 	bl	8002974 <osDelay>
 8013d34:	e7fb      	b.n	8013d2e <StartDefaultTask+0x22>
 8013d36:	bf00      	nop
 8013d38:	08013c0d 	.word	0x08013c0d
 8013d3c:	08017eb0 	.word	0x08017eb0

08013d40 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void const * argument)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_RESET);
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013d4e:	4809      	ldr	r0, [pc, #36]	; (8013d74 <StartBlinkTask+0x34>)
 8013d50:	f7ed ff24 	bl	8001b9c <HAL_GPIO_WritePin>
	  osDelay(1000);
 8013d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013d58:	f7ee fe0c 	bl	8002974 <osDelay>
	  HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_SET);
 8013d5c:	2201      	movs	r2, #1
 8013d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013d62:	4804      	ldr	r0, [pc, #16]	; (8013d74 <StartBlinkTask+0x34>)
 8013d64:	f7ed ff1a 	bl	8001b9c <HAL_GPIO_WritePin>
	  osDelay(1000);
 8013d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013d6c:	f7ee fe02 	bl	8002974 <osDelay>
	  HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_RESET);
 8013d70:	e7ea      	b.n	8013d48 <StartBlinkTask+0x8>
 8013d72:	bf00      	nop
 8013d74:	40020400 	.word	0x40020400

08013d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b08a      	sub	sp, #40	; 0x28
 8013d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013d7e:	f107 0314 	add.w	r3, r7, #20
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	605a      	str	r2, [r3, #4]
 8013d88:	609a      	str	r2, [r3, #8]
 8013d8a:	60da      	str	r2, [r3, #12]
 8013d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013d8e:	2300      	movs	r3, #0
 8013d90:	613b      	str	r3, [r7, #16]
 8013d92:	4a27      	ldr	r2, [pc, #156]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013d94:	4b26      	ldr	r3, [pc, #152]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d98:	f043 0304 	orr.w	r3, r3, #4
 8013d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8013d9e:	4b24      	ldr	r3, [pc, #144]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da2:	f003 0304 	and.w	r3, r3, #4
 8013da6:	613b      	str	r3, [r7, #16]
 8013da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013daa:	2300      	movs	r3, #0
 8013dac:	60fb      	str	r3, [r7, #12]
 8013dae:	4a20      	ldr	r2, [pc, #128]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013db0:	4b1f      	ldr	r3, [pc, #124]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013db4:	f043 0301 	orr.w	r3, r3, #1
 8013db8:	6313      	str	r3, [r2, #48]	; 0x30
 8013dba:	4b1d      	ldr	r3, [pc, #116]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dbe:	f003 0301 	and.w	r3, r3, #1
 8013dc2:	60fb      	str	r3, [r7, #12]
 8013dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	60bb      	str	r3, [r7, #8]
 8013dca:	4a19      	ldr	r2, [pc, #100]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013dcc:	4b18      	ldr	r3, [pc, #96]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dd0:	f043 0302 	orr.w	r3, r3, #2
 8013dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8013dd6:	4b16      	ldr	r3, [pc, #88]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dda:	f003 0302 	and.w	r3, r3, #2
 8013dde:	60bb      	str	r3, [r7, #8]
 8013de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013de2:	2300      	movs	r3, #0
 8013de4:	607b      	str	r3, [r7, #4]
 8013de6:	4a12      	ldr	r2, [pc, #72]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013de8:	4b11      	ldr	r3, [pc, #68]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013df0:	6313      	str	r3, [r2, #48]	; 0x30
 8013df2:	4b0f      	ldr	r3, [pc, #60]	; (8013e30 <MX_GPIO_Init+0xb8>)
 8013df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013dfa:	607b      	str	r3, [r7, #4]
 8013dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Indicator_GPIO_Port, LED_Indicator_Pin, GPIO_PIN_RESET);
 8013dfe:	2200      	movs	r2, #0
 8013e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013e04:	480b      	ldr	r0, [pc, #44]	; (8013e34 <MX_GPIO_Init+0xbc>)
 8013e06:	f7ed fec9 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Indicator_Pin;
 8013e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013e10:	2301      	movs	r3, #1
 8013e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e14:	2300      	movs	r3, #0
 8013e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Indicator_GPIO_Port, &GPIO_InitStruct);
 8013e1c:	f107 0314 	add.w	r3, r7, #20
 8013e20:	4619      	mov	r1, r3
 8013e22:	4804      	ldr	r0, [pc, #16]	; (8013e34 <MX_GPIO_Init+0xbc>)
 8013e24:	f7ed fd10 	bl	8001848 <HAL_GPIO_Init>

}
 8013e28:	bf00      	nop
 8013e2a:	3728      	adds	r7, #40	; 0x28
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	40023800 	.word	0x40023800
 8013e34:	40020400 	.word	0x40020400

08013e38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8013e3e:	2100      	movs	r1, #0
 8013e40:	2000      	movs	r0, #0
 8013e42:	f7f3 fcd5 	bl	80077f0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8013e46:	4b16      	ldr	r3, [pc, #88]	; (8013ea0 <MX_LWIP_Init+0x68>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8013e4c:	4b15      	ldr	r3, [pc, #84]	; (8013ea4 <MX_LWIP_Init+0x6c>)
 8013e4e:	2200      	movs	r2, #0
 8013e50:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8013e52:	4b15      	ldr	r3, [pc, #84]	; (8013ea8 <MX_LWIP_Init+0x70>)
 8013e54:	2200      	movs	r2, #0
 8013e56:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013e58:	4b14      	ldr	r3, [pc, #80]	; (8013eac <MX_LWIP_Init+0x74>)
 8013e5a:	9302      	str	r3, [sp, #8]
 8013e5c:	4b14      	ldr	r3, [pc, #80]	; (8013eb0 <MX_LWIP_Init+0x78>)
 8013e5e:	9301      	str	r3, [sp, #4]
 8013e60:	2300      	movs	r3, #0
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	4b10      	ldr	r3, [pc, #64]	; (8013ea8 <MX_LWIP_Init+0x70>)
 8013e66:	4a0f      	ldr	r2, [pc, #60]	; (8013ea4 <MX_LWIP_Init+0x6c>)
 8013e68:	490d      	ldr	r1, [pc, #52]	; (8013ea0 <MX_LWIP_Init+0x68>)
 8013e6a:	4812      	ldr	r0, [pc, #72]	; (8013eb4 <MX_LWIP_Init+0x7c>)
 8013e6c:	f7f8 f97e 	bl	800c16c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013e70:	4810      	ldr	r0, [pc, #64]	; (8013eb4 <MX_LWIP_Init+0x7c>)
 8013e72:	f7f8 fa63 	bl	800c33c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013e76:	4b0f      	ldr	r3, [pc, #60]	; (8013eb4 <MX_LWIP_Init+0x7c>)
 8013e78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013e7c:	f003 0304 	and.w	r3, r3, #4
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d003      	beq.n	8013e8c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013e84:	480b      	ldr	r0, [pc, #44]	; (8013eb4 <MX_LWIP_Init+0x7c>)
 8013e86:	f7f8 fa69 	bl	800c35c <netif_set_up>
 8013e8a:	e002      	b.n	8013e92 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8013e8c:	4809      	ldr	r0, [pc, #36]	; (8013eb4 <MX_LWIP_Init+0x7c>)
 8013e8e:	f7f8 faa9 	bl	800c3e4 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8013e92:	4808      	ldr	r0, [pc, #32]	; (8013eb4 <MX_LWIP_Init+0x7c>)
 8013e94:	f7f4 f858 	bl	8007f48 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013e98:	bf00      	nop
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	2000a880 	.word	0x2000a880
 8013ea4:	2000a884 	.word	0x2000a884
 8013ea8:	2000a888 	.word	0x2000a888
 8013eac:	080076ed 	.word	0x080076ed
 8013eb0:	08013b41 	.word	0x08013b41
 8013eb4:	2000a84c 	.word	0x2000a84c

08013eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013ebc:	f7ec fb70 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013ec0:	f000 f808 	bl	8013ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013ec4:	f7ff ff58 	bl	8013d78 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013ec8:	f7ff fe70 	bl	8013bac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013ecc:	f7ee fd14 	bl	80028f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8013ed0:	e7fe      	b.n	8013ed0 <main+0x18>
	...

08013ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b094      	sub	sp, #80	; 0x50
 8013ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013eda:	f107 0320 	add.w	r3, r7, #32
 8013ede:	2230      	movs	r2, #48	; 0x30
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f000 fa6a 	bl	80143bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013ee8:	f107 030c 	add.w	r3, r7, #12
 8013eec:	2200      	movs	r2, #0
 8013eee:	601a      	str	r2, [r3, #0]
 8013ef0:	605a      	str	r2, [r3, #4]
 8013ef2:	609a      	str	r2, [r3, #8]
 8013ef4:	60da      	str	r2, [r3, #12]
 8013ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013ef8:	2300      	movs	r3, #0
 8013efa:	60bb      	str	r3, [r7, #8]
 8013efc:	4a29      	ldr	r2, [pc, #164]	; (8013fa4 <SystemClock_Config+0xd0>)
 8013efe:	4b29      	ldr	r3, [pc, #164]	; (8013fa4 <SystemClock_Config+0xd0>)
 8013f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f06:	6413      	str	r3, [r2, #64]	; 0x40
 8013f08:	4b26      	ldr	r3, [pc, #152]	; (8013fa4 <SystemClock_Config+0xd0>)
 8013f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f10:	60bb      	str	r3, [r7, #8]
 8013f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8013f14:	2300      	movs	r3, #0
 8013f16:	607b      	str	r3, [r7, #4]
 8013f18:	4a23      	ldr	r2, [pc, #140]	; (8013fa8 <SystemClock_Config+0xd4>)
 8013f1a:	4b23      	ldr	r3, [pc, #140]	; (8013fa8 <SystemClock_Config+0xd4>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8013f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013f26:	6013      	str	r3, [r2, #0]
 8013f28:	4b1f      	ldr	r3, [pc, #124]	; (8013fa8 <SystemClock_Config+0xd4>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013f30:	607b      	str	r3, [r7, #4]
 8013f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013f34:	2302      	movs	r3, #2
 8013f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8013f3c:	2310      	movs	r3, #16
 8013f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013f40:	2302      	movs	r3, #2
 8013f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8013f44:	2300      	movs	r3, #0
 8013f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8013f48:	2308      	movs	r3, #8
 8013f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8013f4c:	2332      	movs	r3, #50	; 0x32
 8013f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013f50:	2302      	movs	r3, #2
 8013f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8013f54:	2304      	movs	r3, #4
 8013f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013f58:	f107 0320 	add.w	r3, r7, #32
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7ed fe37 	bl	8001bd0 <HAL_RCC_OscConfig>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d001      	beq.n	8013f6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8013f68:	f000 f832 	bl	8013fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013f6c:	230f      	movs	r3, #15
 8013f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013f70:	2302      	movs	r3, #2
 8013f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013f74:	2300      	movs	r3, #0
 8013f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8013f84:	f107 030c 	add.w	r3, r7, #12
 8013f88:	2101      	movs	r1, #1
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ee f862 	bl	8002054 <HAL_RCC_ClockConfig>
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d001      	beq.n	8013f9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8013f96:	f000 f81b 	bl	8013fd0 <Error_Handler>
  }
}
 8013f9a:	bf00      	nop
 8013f9c:	3750      	adds	r7, #80	; 0x50
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bd80      	pop	{r7, pc}
 8013fa2:	bf00      	nop
 8013fa4:	40023800 	.word	0x40023800
 8013fa8:	40007000 	.word	0x40007000

08013fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	4a04      	ldr	r2, [pc, #16]	; (8013fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013fba:	4293      	cmp	r3, r2
 8013fbc:	d101      	bne.n	8013fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013fbe:	f7ec fb11 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	40010000 	.word	0x40010000

08013fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8013fd4:	bf00      	nop
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
	...

08013fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	607b      	str	r3, [r7, #4]
 8013fea:	4a12      	ldr	r2, [pc, #72]	; (8014034 <HAL_MspInit+0x54>)
 8013fec:	4b11      	ldr	r3, [pc, #68]	; (8014034 <HAL_MspInit+0x54>)
 8013fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8013ff6:	4b0f      	ldr	r3, [pc, #60]	; (8014034 <HAL_MspInit+0x54>)
 8013ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013ffe:	607b      	str	r3, [r7, #4]
 8014000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014002:	2300      	movs	r3, #0
 8014004:	603b      	str	r3, [r7, #0]
 8014006:	4a0b      	ldr	r2, [pc, #44]	; (8014034 <HAL_MspInit+0x54>)
 8014008:	4b0a      	ldr	r3, [pc, #40]	; (8014034 <HAL_MspInit+0x54>)
 801400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014010:	6413      	str	r3, [r2, #64]	; 0x40
 8014012:	4b08      	ldr	r3, [pc, #32]	; (8014034 <HAL_MspInit+0x54>)
 8014014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801401a:	603b      	str	r3, [r7, #0]
 801401c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801401e:	2200      	movs	r2, #0
 8014020:	210f      	movs	r1, #15
 8014022:	f06f 0001 	mvn.w	r0, #1
 8014026:	f7ec fbd5 	bl	80007d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801402a:	bf00      	nop
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	40023800 	.word	0x40023800

08014038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b08c      	sub	sp, #48	; 0x30
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014040:	2300      	movs	r3, #0
 8014042:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8014044:	2300      	movs	r3, #0
 8014046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8014048:	2200      	movs	r2, #0
 801404a:	6879      	ldr	r1, [r7, #4]
 801404c:	2019      	movs	r0, #25
 801404e:	f7ec fbc1 	bl	80007d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8014052:	2019      	movs	r0, #25
 8014054:	f7ec fbda 	bl	800080c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8014058:	2300      	movs	r3, #0
 801405a:	60fb      	str	r3, [r7, #12]
 801405c:	4a1f      	ldr	r2, [pc, #124]	; (80140dc <HAL_InitTick+0xa4>)
 801405e:	4b1f      	ldr	r3, [pc, #124]	; (80140dc <HAL_InitTick+0xa4>)
 8014060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014062:	f043 0301 	orr.w	r3, r3, #1
 8014066:	6453      	str	r3, [r2, #68]	; 0x44
 8014068:	4b1c      	ldr	r3, [pc, #112]	; (80140dc <HAL_InitTick+0xa4>)
 801406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801406c:	f003 0301 	and.w	r3, r3, #1
 8014070:	60fb      	str	r3, [r7, #12]
 8014072:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014074:	f107 0210 	add.w	r2, r7, #16
 8014078:	f107 0314 	add.w	r3, r7, #20
 801407c:	4611      	mov	r1, r2
 801407e:	4618      	mov	r0, r3
 8014080:	f7ee f9a0 	bl	80023c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8014084:	f7ee f98a 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8014088:	4603      	mov	r3, r0
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014090:	4a13      	ldr	r2, [pc, #76]	; (80140e0 <HAL_InitTick+0xa8>)
 8014092:	fba2 2303 	umull	r2, r3, r2, r3
 8014096:	0c9b      	lsrs	r3, r3, #18
 8014098:	3b01      	subs	r3, #1
 801409a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801409c:	4b11      	ldr	r3, [pc, #68]	; (80140e4 <HAL_InitTick+0xac>)
 801409e:	4a12      	ldr	r2, [pc, #72]	; (80140e8 <HAL_InitTick+0xb0>)
 80140a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80140a2:	4b10      	ldr	r3, [pc, #64]	; (80140e4 <HAL_InitTick+0xac>)
 80140a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80140a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80140aa:	4a0e      	ldr	r2, [pc, #56]	; (80140e4 <HAL_InitTick+0xac>)
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80140b0:	4b0c      	ldr	r3, [pc, #48]	; (80140e4 <HAL_InitTick+0xac>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80140b6:	4b0b      	ldr	r3, [pc, #44]	; (80140e4 <HAL_InitTick+0xac>)
 80140b8:	2200      	movs	r2, #0
 80140ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80140bc:	4809      	ldr	r0, [pc, #36]	; (80140e4 <HAL_InitTick+0xac>)
 80140be:	f7ee f9b3 	bl	8002428 <HAL_TIM_Base_Init>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d104      	bne.n	80140d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80140c8:	4806      	ldr	r0, [pc, #24]	; (80140e4 <HAL_InitTick+0xac>)
 80140ca:	f7ee f9e2 	bl	8002492 <HAL_TIM_Base_Start_IT>
 80140ce:	4603      	mov	r3, r0
 80140d0:	e000      	b.n	80140d4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80140d2:	2301      	movs	r3, #1
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3730      	adds	r7, #48	; 0x30
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	40023800 	.word	0x40023800
 80140e0:	431bde83 	.word	0x431bde83
 80140e4:	2000a88c 	.word	0x2000a88c
 80140e8:	40010000 	.word	0x40010000

080140ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80140ec:	b480      	push	{r7}
 80140ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80140f0:	bf00      	nop
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80140fa:	b480      	push	{r7}
 80140fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80140fe:	e7fe      	b.n	80140fe <HardFault_Handler+0x4>

08014100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014100:	b480      	push	{r7}
 8014102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014104:	e7fe      	b.n	8014104 <MemManage_Handler+0x4>

08014106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014106:	b480      	push	{r7}
 8014108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801410a:	e7fe      	b.n	801410a <BusFault_Handler+0x4>

0801410c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801410c:	b480      	push	{r7}
 801410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014110:	e7fe      	b.n	8014110 <UsageFault_Handler+0x4>

08014112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014112:	b480      	push	{r7}
 8014114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014116:	bf00      	nop
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr

08014120 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014124:	4802      	ldr	r0, [pc, #8]	; (8014130 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8014126:	f7ee f9d8 	bl	80024da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801412a:	bf00      	nop
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	2000a88c 	.word	0x2000a88c

08014134 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8014138:	4802      	ldr	r0, [pc, #8]	; (8014144 <ETH_IRQHandler+0x10>)
 801413a:	f7ec ff5b 	bl	8000ff4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801413e:	bf00      	nop
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	2000902c 	.word	0x2000902c

08014148 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8014148:	b590      	push	{r4, r7, lr}
 801414a:	b087      	sub	sp, #28
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014154:	2300      	movs	r3, #0
 8014156:	617b      	str	r3, [r7, #20]
 8014158:	e00a      	b.n	8014170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801415a:	68bc      	ldr	r4, [r7, #8]
 801415c:	1c63      	adds	r3, r4, #1
 801415e:	60bb      	str	r3, [r7, #8]
 8014160:	f3af 8000 	nop.w
 8014164:	4603      	mov	r3, r0
 8014166:	b2db      	uxtb	r3, r3
 8014168:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	3301      	adds	r3, #1
 801416e:	617b      	str	r3, [r7, #20]
 8014170:	697a      	ldr	r2, [r7, #20]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	429a      	cmp	r2, r3
 8014176:	dbf0      	blt.n	801415a <_read+0x12>
	}

return len;
 8014178:	687b      	ldr	r3, [r7, #4]
}
 801417a:	4618      	mov	r0, r3
 801417c:	371c      	adds	r7, #28
 801417e:	46bd      	mov	sp, r7
 8014180:	bd90      	pop	{r4, r7, pc}

08014182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b086      	sub	sp, #24
 8014186:	af00      	add	r7, sp, #0
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801418e:	2300      	movs	r3, #0
 8014190:	617b      	str	r3, [r7, #20]
 8014192:	e009      	b.n	80141a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	1c5a      	adds	r2, r3, #1
 8014198:	60ba      	str	r2, [r7, #8]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	4618      	mov	r0, r3
 801419e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	3301      	adds	r3, #1
 80141a6:	617b      	str	r3, [r7, #20]
 80141a8:	697a      	ldr	r2, [r7, #20]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	dbf1      	blt.n	8014194 <_write+0x12>
	}
	return len;
 80141b0:	687b      	ldr	r3, [r7, #4]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3718      	adds	r7, #24
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
	...

080141bc <_sbrk>:

caddr_t _sbrk(int incr)
{
 80141bc:	b480      	push	{r7}
 80141be:	b085      	sub	sp, #20
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80141c4:	4b11      	ldr	r3, [pc, #68]	; (801420c <_sbrk+0x50>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d102      	bne.n	80141d2 <_sbrk+0x16>
		heap_end = &end;
 80141cc:	4b0f      	ldr	r3, [pc, #60]	; (801420c <_sbrk+0x50>)
 80141ce:	4a10      	ldr	r2, [pc, #64]	; (8014210 <_sbrk+0x54>)
 80141d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80141d2:	4b0e      	ldr	r3, [pc, #56]	; (801420c <_sbrk+0x50>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80141d8:	4b0c      	ldr	r3, [pc, #48]	; (801420c <_sbrk+0x50>)
 80141da:	681a      	ldr	r2, [r3, #0]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	4413      	add	r3, r2
 80141e0:	466a      	mov	r2, sp
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d905      	bls.n	80141f2 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80141e6:	4b0b      	ldr	r3, [pc, #44]	; (8014214 <_sbrk+0x58>)
 80141e8:	220c      	movs	r2, #12
 80141ea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80141ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141f0:	e006      	b.n	8014200 <_sbrk+0x44>
	}

	heap_end += incr;
 80141f2:	4b06      	ldr	r3, [pc, #24]	; (801420c <_sbrk+0x50>)
 80141f4:	681a      	ldr	r2, [r3, #0]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	4413      	add	r3, r2
 80141fa:	4a04      	ldr	r2, [pc, #16]	; (801420c <_sbrk+0x50>)
 80141fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80141fe:	68fb      	ldr	r3, [r7, #12]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3714      	adds	r7, #20
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr
 801420c:	20003f88 	.word	0x20003f88
 8014210:	2000a8cc 	.word	0x2000a8cc
 8014214:	20007754 	.word	0x20007754

08014218 <_close>:

int _close(int file)
{
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
	return -1;
 8014220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014240:	605a      	str	r2, [r3, #4]
	return 0;
 8014242:	2300      	movs	r3, #0
}
 8014244:	4618      	mov	r0, r3
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <_isatty>:

int _isatty(int file)
{
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
	return 1;
 8014258:	2301      	movs	r3, #1
}
 801425a:	4618      	mov	r0, r3
 801425c:	370c      	adds	r7, #12
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr

08014266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014266:	b480      	push	{r7}
 8014268:	b085      	sub	sp, #20
 801426a:	af00      	add	r7, sp, #0
 801426c:	60f8      	str	r0, [r7, #12]
 801426e:	60b9      	str	r1, [r7, #8]
 8014270:	607a      	str	r2, [r7, #4]
	return 0;
 8014272:	2300      	movs	r3, #0
}
 8014274:	4618      	mov	r0, r3
 8014276:	3714      	adds	r7, #20
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr

08014280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014280:	b480      	push	{r7}
 8014282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014284:	4a16      	ldr	r2, [pc, #88]	; (80142e0 <SystemInit+0x60>)
 8014286:	4b16      	ldr	r3, [pc, #88]	; (80142e0 <SystemInit+0x60>)
 8014288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801428c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014294:	4a13      	ldr	r2, [pc, #76]	; (80142e4 <SystemInit+0x64>)
 8014296:	4b13      	ldr	r3, [pc, #76]	; (80142e4 <SystemInit+0x64>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	f043 0301 	orr.w	r3, r3, #1
 801429e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80142a0:	4b10      	ldr	r3, [pc, #64]	; (80142e4 <SystemInit+0x64>)
 80142a2:	2200      	movs	r2, #0
 80142a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80142a6:	4a0f      	ldr	r2, [pc, #60]	; (80142e4 <SystemInit+0x64>)
 80142a8:	4b0e      	ldr	r3, [pc, #56]	; (80142e4 <SystemInit+0x64>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80142b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80142b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80142b6:	4b0b      	ldr	r3, [pc, #44]	; (80142e4 <SystemInit+0x64>)
 80142b8:	4a0b      	ldr	r2, [pc, #44]	; (80142e8 <SystemInit+0x68>)
 80142ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80142bc:	4a09      	ldr	r2, [pc, #36]	; (80142e4 <SystemInit+0x64>)
 80142be:	4b09      	ldr	r3, [pc, #36]	; (80142e4 <SystemInit+0x64>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80142c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80142c8:	4b06      	ldr	r3, [pc, #24]	; (80142e4 <SystemInit+0x64>)
 80142ca:	2200      	movs	r2, #0
 80142cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80142ce:	4b04      	ldr	r3, [pc, #16]	; (80142e0 <SystemInit+0x60>)
 80142d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80142d4:	609a      	str	r2, [r3, #8]
#endif
}
 80142d6:	bf00      	nop
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr
 80142e0:	e000ed00 	.word	0xe000ed00
 80142e4:	40023800 	.word	0x40023800
 80142e8:	24003010 	.word	0x24003010

080142ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80142ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014324 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80142f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80142f2:	e003      	b.n	80142fc <LoopCopyDataInit>

080142f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80142f4:	4b0c      	ldr	r3, [pc, #48]	; (8014328 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80142f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80142f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80142fa:	3104      	adds	r1, #4

080142fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80142fc:	480b      	ldr	r0, [pc, #44]	; (801432c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80142fe:	4b0c      	ldr	r3, [pc, #48]	; (8014330 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014300:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014302:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014304:	d3f6      	bcc.n	80142f4 <CopyDataInit>
  ldr  r2, =_sbss
 8014306:	4a0b      	ldr	r2, [pc, #44]	; (8014334 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014308:	e002      	b.n	8014310 <LoopFillZerobss>

0801430a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801430a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801430c:	f842 3b04 	str.w	r3, [r2], #4

08014310 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014310:	4b09      	ldr	r3, [pc, #36]	; (8014338 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014312:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014314:	d3f9      	bcc.n	801430a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014316:	f7ff ffb3 	bl	8014280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801431a:	f000 f811 	bl	8014340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801431e:	f7ff fdcb 	bl	8013eb8 <main>
  bx  lr    
 8014322:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8014324:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8014328:	0801812c 	.word	0x0801812c
  ldr  r0, =_sdata
 801432c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014330:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8014334:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8014338:	2000a8cc 	.word	0x2000a8cc

0801433c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801433c:	e7fe      	b.n	801433c <ADC_IRQHandler>
	...

08014340 <__libc_init_array>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	4e0d      	ldr	r6, [pc, #52]	; (8014378 <__libc_init_array+0x38>)
 8014344:	4c0d      	ldr	r4, [pc, #52]	; (801437c <__libc_init_array+0x3c>)
 8014346:	1ba4      	subs	r4, r4, r6
 8014348:	10a4      	asrs	r4, r4, #2
 801434a:	2500      	movs	r5, #0
 801434c:	42a5      	cmp	r5, r4
 801434e:	d109      	bne.n	8014364 <__libc_init_array+0x24>
 8014350:	4e0b      	ldr	r6, [pc, #44]	; (8014380 <__libc_init_array+0x40>)
 8014352:	4c0c      	ldr	r4, [pc, #48]	; (8014384 <__libc_init_array+0x44>)
 8014354:	f000 ff74 	bl	8015240 <_init>
 8014358:	1ba4      	subs	r4, r4, r6
 801435a:	10a4      	asrs	r4, r4, #2
 801435c:	2500      	movs	r5, #0
 801435e:	42a5      	cmp	r5, r4
 8014360:	d105      	bne.n	801436e <__libc_init_array+0x2e>
 8014362:	bd70      	pop	{r4, r5, r6, pc}
 8014364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014368:	4798      	blx	r3
 801436a:	3501      	adds	r5, #1
 801436c:	e7ee      	b.n	801434c <__libc_init_array+0xc>
 801436e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014372:	4798      	blx	r3
 8014374:	3501      	adds	r5, #1
 8014376:	e7f2      	b.n	801435e <__libc_init_array+0x1e>
 8014378:	08018124 	.word	0x08018124
 801437c:	08018124 	.word	0x08018124
 8014380:	08018124 	.word	0x08018124
 8014384:	08018128 	.word	0x08018128

08014388 <memcmp>:
 8014388:	b510      	push	{r4, lr}
 801438a:	3901      	subs	r1, #1
 801438c:	4402      	add	r2, r0
 801438e:	4290      	cmp	r0, r2
 8014390:	d101      	bne.n	8014396 <memcmp+0xe>
 8014392:	2000      	movs	r0, #0
 8014394:	bd10      	pop	{r4, pc}
 8014396:	f810 3b01 	ldrb.w	r3, [r0], #1
 801439a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801439e:	42a3      	cmp	r3, r4
 80143a0:	d0f5      	beq.n	801438e <memcmp+0x6>
 80143a2:	1b18      	subs	r0, r3, r4
 80143a4:	bd10      	pop	{r4, pc}

080143a6 <memcpy>:
 80143a6:	b510      	push	{r4, lr}
 80143a8:	1e43      	subs	r3, r0, #1
 80143aa:	440a      	add	r2, r1
 80143ac:	4291      	cmp	r1, r2
 80143ae:	d100      	bne.n	80143b2 <memcpy+0xc>
 80143b0:	bd10      	pop	{r4, pc}
 80143b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143ba:	e7f7      	b.n	80143ac <memcpy+0x6>

080143bc <memset>:
 80143bc:	4402      	add	r2, r0
 80143be:	4603      	mov	r3, r0
 80143c0:	4293      	cmp	r3, r2
 80143c2:	d100      	bne.n	80143c6 <memset+0xa>
 80143c4:	4770      	bx	lr
 80143c6:	f803 1b01 	strb.w	r1, [r3], #1
 80143ca:	e7f9      	b.n	80143c0 <memset+0x4>

080143cc <iprintf>:
 80143cc:	b40f      	push	{r0, r1, r2, r3}
 80143ce:	4b0a      	ldr	r3, [pc, #40]	; (80143f8 <iprintf+0x2c>)
 80143d0:	b513      	push	{r0, r1, r4, lr}
 80143d2:	681c      	ldr	r4, [r3, #0]
 80143d4:	b124      	cbz	r4, 80143e0 <iprintf+0x14>
 80143d6:	69a3      	ldr	r3, [r4, #24]
 80143d8:	b913      	cbnz	r3, 80143e0 <iprintf+0x14>
 80143da:	4620      	mov	r0, r4
 80143dc:	f000 f888 	bl	80144f0 <__sinit>
 80143e0:	ab05      	add	r3, sp, #20
 80143e2:	9a04      	ldr	r2, [sp, #16]
 80143e4:	68a1      	ldr	r1, [r4, #8]
 80143e6:	9301      	str	r3, [sp, #4]
 80143e8:	4620      	mov	r0, r4
 80143ea:	f000 f9e9 	bl	80147c0 <_vfiprintf_r>
 80143ee:	b002      	add	sp, #8
 80143f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143f4:	b004      	add	sp, #16
 80143f6:	4770      	bx	lr
 80143f8:	2000001c 	.word	0x2000001c

080143fc <rand>:
 80143fc:	4b19      	ldr	r3, [pc, #100]	; (8014464 <rand+0x68>)
 80143fe:	b510      	push	{r4, lr}
 8014400:	681c      	ldr	r4, [r3, #0]
 8014402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014404:	b9d3      	cbnz	r3, 801443c <rand+0x40>
 8014406:	2018      	movs	r0, #24
 8014408:	f000 f8fc 	bl	8014604 <malloc>
 801440c:	f243 330e 	movw	r3, #13070	; 0x330e
 8014410:	63a0      	str	r0, [r4, #56]	; 0x38
 8014412:	8003      	strh	r3, [r0, #0]
 8014414:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8014418:	8043      	strh	r3, [r0, #2]
 801441a:	f241 2334 	movw	r3, #4660	; 0x1234
 801441e:	8083      	strh	r3, [r0, #4]
 8014420:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8014424:	80c3      	strh	r3, [r0, #6]
 8014426:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 801442a:	8103      	strh	r3, [r0, #8]
 801442c:	2305      	movs	r3, #5
 801442e:	8143      	strh	r3, [r0, #10]
 8014430:	230b      	movs	r3, #11
 8014432:	8183      	strh	r3, [r0, #12]
 8014434:	2201      	movs	r2, #1
 8014436:	2300      	movs	r3, #0
 8014438:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801443c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801443e:	480a      	ldr	r0, [pc, #40]	; (8014468 <rand+0x6c>)
 8014440:	690a      	ldr	r2, [r1, #16]
 8014442:	694b      	ldr	r3, [r1, #20]
 8014444:	4c09      	ldr	r4, [pc, #36]	; (801446c <rand+0x70>)
 8014446:	4350      	muls	r0, r2
 8014448:	fb04 0003 	mla	r0, r4, r3, r0
 801444c:	fba2 2304 	umull	r2, r3, r2, r4
 8014450:	3201      	adds	r2, #1
 8014452:	4403      	add	r3, r0
 8014454:	f143 0300 	adc.w	r3, r3, #0
 8014458:	e9c1 2304 	strd	r2, r3, [r1, #16]
 801445c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014460:	bd10      	pop	{r4, pc}
 8014462:	bf00      	nop
 8014464:	2000001c 	.word	0x2000001c
 8014468:	5851f42d 	.word	0x5851f42d
 801446c:	4c957f2d 	.word	0x4c957f2d

08014470 <_cleanup_r>:
 8014470:	4901      	ldr	r1, [pc, #4]	; (8014478 <_cleanup_r+0x8>)
 8014472:	f000 b8a9 	b.w	80145c8 <_fwalk_reent>
 8014476:	bf00      	nop
 8014478:	08015095 	.word	0x08015095

0801447c <std.isra.0>:
 801447c:	2300      	movs	r3, #0
 801447e:	b510      	push	{r4, lr}
 8014480:	4604      	mov	r4, r0
 8014482:	6003      	str	r3, [r0, #0]
 8014484:	6043      	str	r3, [r0, #4]
 8014486:	6083      	str	r3, [r0, #8]
 8014488:	8181      	strh	r1, [r0, #12]
 801448a:	6643      	str	r3, [r0, #100]	; 0x64
 801448c:	81c2      	strh	r2, [r0, #14]
 801448e:	6103      	str	r3, [r0, #16]
 8014490:	6143      	str	r3, [r0, #20]
 8014492:	6183      	str	r3, [r0, #24]
 8014494:	4619      	mov	r1, r3
 8014496:	2208      	movs	r2, #8
 8014498:	305c      	adds	r0, #92	; 0x5c
 801449a:	f7ff ff8f 	bl	80143bc <memset>
 801449e:	4b05      	ldr	r3, [pc, #20]	; (80144b4 <std.isra.0+0x38>)
 80144a0:	6263      	str	r3, [r4, #36]	; 0x24
 80144a2:	4b05      	ldr	r3, [pc, #20]	; (80144b8 <std.isra.0+0x3c>)
 80144a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80144a6:	4b05      	ldr	r3, [pc, #20]	; (80144bc <std.isra.0+0x40>)
 80144a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80144aa:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <std.isra.0+0x44>)
 80144ac:	6224      	str	r4, [r4, #32]
 80144ae:	6323      	str	r3, [r4, #48]	; 0x30
 80144b0:	bd10      	pop	{r4, pc}
 80144b2:	bf00      	nop
 80144b4:	08014d39 	.word	0x08014d39
 80144b8:	08014d5b 	.word	0x08014d5b
 80144bc:	08014d93 	.word	0x08014d93
 80144c0:	08014db7 	.word	0x08014db7

080144c4 <__sfmoreglue>:
 80144c4:	b570      	push	{r4, r5, r6, lr}
 80144c6:	1e4a      	subs	r2, r1, #1
 80144c8:	2568      	movs	r5, #104	; 0x68
 80144ca:	4355      	muls	r5, r2
 80144cc:	460e      	mov	r6, r1
 80144ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80144d2:	f000 f8ed 	bl	80146b0 <_malloc_r>
 80144d6:	4604      	mov	r4, r0
 80144d8:	b140      	cbz	r0, 80144ec <__sfmoreglue+0x28>
 80144da:	2100      	movs	r1, #0
 80144dc:	e880 0042 	stmia.w	r0, {r1, r6}
 80144e0:	300c      	adds	r0, #12
 80144e2:	60a0      	str	r0, [r4, #8]
 80144e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80144e8:	f7ff ff68 	bl	80143bc <memset>
 80144ec:	4620      	mov	r0, r4
 80144ee:	bd70      	pop	{r4, r5, r6, pc}

080144f0 <__sinit>:
 80144f0:	6983      	ldr	r3, [r0, #24]
 80144f2:	b510      	push	{r4, lr}
 80144f4:	4604      	mov	r4, r0
 80144f6:	bb33      	cbnz	r3, 8014546 <__sinit+0x56>
 80144f8:	6483      	str	r3, [r0, #72]	; 0x48
 80144fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80144fc:	6503      	str	r3, [r0, #80]	; 0x50
 80144fe:	4b12      	ldr	r3, [pc, #72]	; (8014548 <__sinit+0x58>)
 8014500:	4a12      	ldr	r2, [pc, #72]	; (801454c <__sinit+0x5c>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	6282      	str	r2, [r0, #40]	; 0x28
 8014506:	4298      	cmp	r0, r3
 8014508:	bf04      	itt	eq
 801450a:	2301      	moveq	r3, #1
 801450c:	6183      	streq	r3, [r0, #24]
 801450e:	f000 f81f 	bl	8014550 <__sfp>
 8014512:	6060      	str	r0, [r4, #4]
 8014514:	4620      	mov	r0, r4
 8014516:	f000 f81b 	bl	8014550 <__sfp>
 801451a:	60a0      	str	r0, [r4, #8]
 801451c:	4620      	mov	r0, r4
 801451e:	f000 f817 	bl	8014550 <__sfp>
 8014522:	2200      	movs	r2, #0
 8014524:	60e0      	str	r0, [r4, #12]
 8014526:	2104      	movs	r1, #4
 8014528:	6860      	ldr	r0, [r4, #4]
 801452a:	f7ff ffa7 	bl	801447c <std.isra.0>
 801452e:	2201      	movs	r2, #1
 8014530:	2109      	movs	r1, #9
 8014532:	68a0      	ldr	r0, [r4, #8]
 8014534:	f7ff ffa2 	bl	801447c <std.isra.0>
 8014538:	2202      	movs	r2, #2
 801453a:	2112      	movs	r1, #18
 801453c:	68e0      	ldr	r0, [r4, #12]
 801453e:	f7ff ff9d 	bl	801447c <std.isra.0>
 8014542:	2301      	movs	r3, #1
 8014544:	61a3      	str	r3, [r4, #24]
 8014546:	bd10      	pop	{r4, pc}
 8014548:	080180e4 	.word	0x080180e4
 801454c:	08014471 	.word	0x08014471

08014550 <__sfp>:
 8014550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014552:	4b1c      	ldr	r3, [pc, #112]	; (80145c4 <__sfp+0x74>)
 8014554:	681e      	ldr	r6, [r3, #0]
 8014556:	69b3      	ldr	r3, [r6, #24]
 8014558:	4607      	mov	r7, r0
 801455a:	b913      	cbnz	r3, 8014562 <__sfp+0x12>
 801455c:	4630      	mov	r0, r6
 801455e:	f7ff ffc7 	bl	80144f0 <__sinit>
 8014562:	3648      	adds	r6, #72	; 0x48
 8014564:	68b4      	ldr	r4, [r6, #8]
 8014566:	6873      	ldr	r3, [r6, #4]
 8014568:	3b01      	subs	r3, #1
 801456a:	d503      	bpl.n	8014574 <__sfp+0x24>
 801456c:	6833      	ldr	r3, [r6, #0]
 801456e:	b133      	cbz	r3, 801457e <__sfp+0x2e>
 8014570:	6836      	ldr	r6, [r6, #0]
 8014572:	e7f7      	b.n	8014564 <__sfp+0x14>
 8014574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014578:	b16d      	cbz	r5, 8014596 <__sfp+0x46>
 801457a:	3468      	adds	r4, #104	; 0x68
 801457c:	e7f4      	b.n	8014568 <__sfp+0x18>
 801457e:	2104      	movs	r1, #4
 8014580:	4638      	mov	r0, r7
 8014582:	f7ff ff9f 	bl	80144c4 <__sfmoreglue>
 8014586:	6030      	str	r0, [r6, #0]
 8014588:	2800      	cmp	r0, #0
 801458a:	d1f1      	bne.n	8014570 <__sfp+0x20>
 801458c:	230c      	movs	r3, #12
 801458e:	603b      	str	r3, [r7, #0]
 8014590:	4604      	mov	r4, r0
 8014592:	4620      	mov	r0, r4
 8014594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801459a:	81e3      	strh	r3, [r4, #14]
 801459c:	2301      	movs	r3, #1
 801459e:	81a3      	strh	r3, [r4, #12]
 80145a0:	6665      	str	r5, [r4, #100]	; 0x64
 80145a2:	6025      	str	r5, [r4, #0]
 80145a4:	60a5      	str	r5, [r4, #8]
 80145a6:	6065      	str	r5, [r4, #4]
 80145a8:	6125      	str	r5, [r4, #16]
 80145aa:	6165      	str	r5, [r4, #20]
 80145ac:	61a5      	str	r5, [r4, #24]
 80145ae:	2208      	movs	r2, #8
 80145b0:	4629      	mov	r1, r5
 80145b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80145b6:	f7ff ff01 	bl	80143bc <memset>
 80145ba:	6365      	str	r5, [r4, #52]	; 0x34
 80145bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80145be:	64a5      	str	r5, [r4, #72]	; 0x48
 80145c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80145c2:	e7e6      	b.n	8014592 <__sfp+0x42>
 80145c4:	080180e4 	.word	0x080180e4

080145c8 <_fwalk_reent>:
 80145c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145cc:	4680      	mov	r8, r0
 80145ce:	4689      	mov	r9, r1
 80145d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80145d4:	2600      	movs	r6, #0
 80145d6:	b914      	cbnz	r4, 80145de <_fwalk_reent+0x16>
 80145d8:	4630      	mov	r0, r6
 80145da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145de:	68a5      	ldr	r5, [r4, #8]
 80145e0:	6867      	ldr	r7, [r4, #4]
 80145e2:	3f01      	subs	r7, #1
 80145e4:	d501      	bpl.n	80145ea <_fwalk_reent+0x22>
 80145e6:	6824      	ldr	r4, [r4, #0]
 80145e8:	e7f5      	b.n	80145d6 <_fwalk_reent+0xe>
 80145ea:	89ab      	ldrh	r3, [r5, #12]
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d907      	bls.n	8014600 <_fwalk_reent+0x38>
 80145f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80145f4:	3301      	adds	r3, #1
 80145f6:	d003      	beq.n	8014600 <_fwalk_reent+0x38>
 80145f8:	4629      	mov	r1, r5
 80145fa:	4640      	mov	r0, r8
 80145fc:	47c8      	blx	r9
 80145fe:	4306      	orrs	r6, r0
 8014600:	3568      	adds	r5, #104	; 0x68
 8014602:	e7ee      	b.n	80145e2 <_fwalk_reent+0x1a>

08014604 <malloc>:
 8014604:	4b02      	ldr	r3, [pc, #8]	; (8014610 <malloc+0xc>)
 8014606:	4601      	mov	r1, r0
 8014608:	6818      	ldr	r0, [r3, #0]
 801460a:	f000 b851 	b.w	80146b0 <_malloc_r>
 801460e:	bf00      	nop
 8014610:	2000001c 	.word	0x2000001c

08014614 <_free_r>:
 8014614:	b538      	push	{r3, r4, r5, lr}
 8014616:	4605      	mov	r5, r0
 8014618:	2900      	cmp	r1, #0
 801461a:	d045      	beq.n	80146a8 <_free_r+0x94>
 801461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014620:	1f0c      	subs	r4, r1, #4
 8014622:	2b00      	cmp	r3, #0
 8014624:	bfb8      	it	lt
 8014626:	18e4      	addlt	r4, r4, r3
 8014628:	f000 fdd4 	bl	80151d4 <__malloc_lock>
 801462c:	4a1f      	ldr	r2, [pc, #124]	; (80146ac <_free_r+0x98>)
 801462e:	6813      	ldr	r3, [r2, #0]
 8014630:	4610      	mov	r0, r2
 8014632:	b933      	cbnz	r3, 8014642 <_free_r+0x2e>
 8014634:	6063      	str	r3, [r4, #4]
 8014636:	6014      	str	r4, [r2, #0]
 8014638:	4628      	mov	r0, r5
 801463a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801463e:	f000 bdca 	b.w	80151d6 <__malloc_unlock>
 8014642:	42a3      	cmp	r3, r4
 8014644:	d90c      	bls.n	8014660 <_free_r+0x4c>
 8014646:	6821      	ldr	r1, [r4, #0]
 8014648:	1862      	adds	r2, r4, r1
 801464a:	4293      	cmp	r3, r2
 801464c:	bf04      	itt	eq
 801464e:	681a      	ldreq	r2, [r3, #0]
 8014650:	685b      	ldreq	r3, [r3, #4]
 8014652:	6063      	str	r3, [r4, #4]
 8014654:	bf04      	itt	eq
 8014656:	1852      	addeq	r2, r2, r1
 8014658:	6022      	streq	r2, [r4, #0]
 801465a:	6004      	str	r4, [r0, #0]
 801465c:	e7ec      	b.n	8014638 <_free_r+0x24>
 801465e:	4613      	mov	r3, r2
 8014660:	685a      	ldr	r2, [r3, #4]
 8014662:	b10a      	cbz	r2, 8014668 <_free_r+0x54>
 8014664:	42a2      	cmp	r2, r4
 8014666:	d9fa      	bls.n	801465e <_free_r+0x4a>
 8014668:	6819      	ldr	r1, [r3, #0]
 801466a:	1858      	adds	r0, r3, r1
 801466c:	42a0      	cmp	r0, r4
 801466e:	d10b      	bne.n	8014688 <_free_r+0x74>
 8014670:	6820      	ldr	r0, [r4, #0]
 8014672:	4401      	add	r1, r0
 8014674:	1858      	adds	r0, r3, r1
 8014676:	4282      	cmp	r2, r0
 8014678:	6019      	str	r1, [r3, #0]
 801467a:	d1dd      	bne.n	8014638 <_free_r+0x24>
 801467c:	6810      	ldr	r0, [r2, #0]
 801467e:	6852      	ldr	r2, [r2, #4]
 8014680:	605a      	str	r2, [r3, #4]
 8014682:	4401      	add	r1, r0
 8014684:	6019      	str	r1, [r3, #0]
 8014686:	e7d7      	b.n	8014638 <_free_r+0x24>
 8014688:	d902      	bls.n	8014690 <_free_r+0x7c>
 801468a:	230c      	movs	r3, #12
 801468c:	602b      	str	r3, [r5, #0]
 801468e:	e7d3      	b.n	8014638 <_free_r+0x24>
 8014690:	6820      	ldr	r0, [r4, #0]
 8014692:	1821      	adds	r1, r4, r0
 8014694:	428a      	cmp	r2, r1
 8014696:	bf04      	itt	eq
 8014698:	6811      	ldreq	r1, [r2, #0]
 801469a:	6852      	ldreq	r2, [r2, #4]
 801469c:	6062      	str	r2, [r4, #4]
 801469e:	bf04      	itt	eq
 80146a0:	1809      	addeq	r1, r1, r0
 80146a2:	6021      	streq	r1, [r4, #0]
 80146a4:	605c      	str	r4, [r3, #4]
 80146a6:	e7c7      	b.n	8014638 <_free_r+0x24>
 80146a8:	bd38      	pop	{r3, r4, r5, pc}
 80146aa:	bf00      	nop
 80146ac:	20003f8c 	.word	0x20003f8c

080146b0 <_malloc_r>:
 80146b0:	b570      	push	{r4, r5, r6, lr}
 80146b2:	1ccd      	adds	r5, r1, #3
 80146b4:	f025 0503 	bic.w	r5, r5, #3
 80146b8:	3508      	adds	r5, #8
 80146ba:	2d0c      	cmp	r5, #12
 80146bc:	bf38      	it	cc
 80146be:	250c      	movcc	r5, #12
 80146c0:	2d00      	cmp	r5, #0
 80146c2:	4606      	mov	r6, r0
 80146c4:	db01      	blt.n	80146ca <_malloc_r+0x1a>
 80146c6:	42a9      	cmp	r1, r5
 80146c8:	d903      	bls.n	80146d2 <_malloc_r+0x22>
 80146ca:	230c      	movs	r3, #12
 80146cc:	6033      	str	r3, [r6, #0]
 80146ce:	2000      	movs	r0, #0
 80146d0:	bd70      	pop	{r4, r5, r6, pc}
 80146d2:	f000 fd7f 	bl	80151d4 <__malloc_lock>
 80146d6:	4a23      	ldr	r2, [pc, #140]	; (8014764 <_malloc_r+0xb4>)
 80146d8:	6814      	ldr	r4, [r2, #0]
 80146da:	4621      	mov	r1, r4
 80146dc:	b991      	cbnz	r1, 8014704 <_malloc_r+0x54>
 80146de:	4c22      	ldr	r4, [pc, #136]	; (8014768 <_malloc_r+0xb8>)
 80146e0:	6823      	ldr	r3, [r4, #0]
 80146e2:	b91b      	cbnz	r3, 80146ec <_malloc_r+0x3c>
 80146e4:	4630      	mov	r0, r6
 80146e6:	f000 fb17 	bl	8014d18 <_sbrk_r>
 80146ea:	6020      	str	r0, [r4, #0]
 80146ec:	4629      	mov	r1, r5
 80146ee:	4630      	mov	r0, r6
 80146f0:	f000 fb12 	bl	8014d18 <_sbrk_r>
 80146f4:	1c43      	adds	r3, r0, #1
 80146f6:	d126      	bne.n	8014746 <_malloc_r+0x96>
 80146f8:	230c      	movs	r3, #12
 80146fa:	6033      	str	r3, [r6, #0]
 80146fc:	4630      	mov	r0, r6
 80146fe:	f000 fd6a 	bl	80151d6 <__malloc_unlock>
 8014702:	e7e4      	b.n	80146ce <_malloc_r+0x1e>
 8014704:	680b      	ldr	r3, [r1, #0]
 8014706:	1b5b      	subs	r3, r3, r5
 8014708:	d41a      	bmi.n	8014740 <_malloc_r+0x90>
 801470a:	2b0b      	cmp	r3, #11
 801470c:	d90f      	bls.n	801472e <_malloc_r+0x7e>
 801470e:	600b      	str	r3, [r1, #0]
 8014710:	50cd      	str	r5, [r1, r3]
 8014712:	18cc      	adds	r4, r1, r3
 8014714:	4630      	mov	r0, r6
 8014716:	f000 fd5e 	bl	80151d6 <__malloc_unlock>
 801471a:	f104 000b 	add.w	r0, r4, #11
 801471e:	1d23      	adds	r3, r4, #4
 8014720:	f020 0007 	bic.w	r0, r0, #7
 8014724:	1ac3      	subs	r3, r0, r3
 8014726:	d01b      	beq.n	8014760 <_malloc_r+0xb0>
 8014728:	425a      	negs	r2, r3
 801472a:	50e2      	str	r2, [r4, r3]
 801472c:	bd70      	pop	{r4, r5, r6, pc}
 801472e:	428c      	cmp	r4, r1
 8014730:	bf0d      	iteet	eq
 8014732:	6863      	ldreq	r3, [r4, #4]
 8014734:	684b      	ldrne	r3, [r1, #4]
 8014736:	6063      	strne	r3, [r4, #4]
 8014738:	6013      	streq	r3, [r2, #0]
 801473a:	bf18      	it	ne
 801473c:	460c      	movne	r4, r1
 801473e:	e7e9      	b.n	8014714 <_malloc_r+0x64>
 8014740:	460c      	mov	r4, r1
 8014742:	6849      	ldr	r1, [r1, #4]
 8014744:	e7ca      	b.n	80146dc <_malloc_r+0x2c>
 8014746:	1cc4      	adds	r4, r0, #3
 8014748:	f024 0403 	bic.w	r4, r4, #3
 801474c:	42a0      	cmp	r0, r4
 801474e:	d005      	beq.n	801475c <_malloc_r+0xac>
 8014750:	1a21      	subs	r1, r4, r0
 8014752:	4630      	mov	r0, r6
 8014754:	f000 fae0 	bl	8014d18 <_sbrk_r>
 8014758:	3001      	adds	r0, #1
 801475a:	d0cd      	beq.n	80146f8 <_malloc_r+0x48>
 801475c:	6025      	str	r5, [r4, #0]
 801475e:	e7d9      	b.n	8014714 <_malloc_r+0x64>
 8014760:	bd70      	pop	{r4, r5, r6, pc}
 8014762:	bf00      	nop
 8014764:	20003f8c 	.word	0x20003f8c
 8014768:	20003f90 	.word	0x20003f90

0801476c <__sfputc_r>:
 801476c:	6893      	ldr	r3, [r2, #8]
 801476e:	3b01      	subs	r3, #1
 8014770:	2b00      	cmp	r3, #0
 8014772:	b410      	push	{r4}
 8014774:	6093      	str	r3, [r2, #8]
 8014776:	da09      	bge.n	801478c <__sfputc_r+0x20>
 8014778:	6994      	ldr	r4, [r2, #24]
 801477a:	42a3      	cmp	r3, r4
 801477c:	db02      	blt.n	8014784 <__sfputc_r+0x18>
 801477e:	b2cb      	uxtb	r3, r1
 8014780:	2b0a      	cmp	r3, #10
 8014782:	d103      	bne.n	801478c <__sfputc_r+0x20>
 8014784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014788:	f000 bb1a 	b.w	8014dc0 <__swbuf_r>
 801478c:	6813      	ldr	r3, [r2, #0]
 801478e:	1c58      	adds	r0, r3, #1
 8014790:	6010      	str	r0, [r2, #0]
 8014792:	7019      	strb	r1, [r3, #0]
 8014794:	b2c8      	uxtb	r0, r1
 8014796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801479a:	4770      	bx	lr

0801479c <__sfputs_r>:
 801479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479e:	4606      	mov	r6, r0
 80147a0:	460f      	mov	r7, r1
 80147a2:	4614      	mov	r4, r2
 80147a4:	18d5      	adds	r5, r2, r3
 80147a6:	42ac      	cmp	r4, r5
 80147a8:	d101      	bne.n	80147ae <__sfputs_r+0x12>
 80147aa:	2000      	movs	r0, #0
 80147ac:	e007      	b.n	80147be <__sfputs_r+0x22>
 80147ae:	463a      	mov	r2, r7
 80147b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147b4:	4630      	mov	r0, r6
 80147b6:	f7ff ffd9 	bl	801476c <__sfputc_r>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d1f3      	bne.n	80147a6 <__sfputs_r+0xa>
 80147be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147c0 <_vfiprintf_r>:
 80147c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c4:	b09d      	sub	sp, #116	; 0x74
 80147c6:	460c      	mov	r4, r1
 80147c8:	4617      	mov	r7, r2
 80147ca:	9303      	str	r3, [sp, #12]
 80147cc:	4606      	mov	r6, r0
 80147ce:	b118      	cbz	r0, 80147d8 <_vfiprintf_r+0x18>
 80147d0:	6983      	ldr	r3, [r0, #24]
 80147d2:	b90b      	cbnz	r3, 80147d8 <_vfiprintf_r+0x18>
 80147d4:	f7ff fe8c 	bl	80144f0 <__sinit>
 80147d8:	4b7c      	ldr	r3, [pc, #496]	; (80149cc <_vfiprintf_r+0x20c>)
 80147da:	429c      	cmp	r4, r3
 80147dc:	d157      	bne.n	801488e <_vfiprintf_r+0xce>
 80147de:	6874      	ldr	r4, [r6, #4]
 80147e0:	89a3      	ldrh	r3, [r4, #12]
 80147e2:	0718      	lsls	r0, r3, #28
 80147e4:	d55d      	bpl.n	80148a2 <_vfiprintf_r+0xe2>
 80147e6:	6923      	ldr	r3, [r4, #16]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d05a      	beq.n	80148a2 <_vfiprintf_r+0xe2>
 80147ec:	2300      	movs	r3, #0
 80147ee:	9309      	str	r3, [sp, #36]	; 0x24
 80147f0:	2320      	movs	r3, #32
 80147f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147f6:	2330      	movs	r3, #48	; 0x30
 80147f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147fc:	f04f 0b01 	mov.w	fp, #1
 8014800:	46b8      	mov	r8, r7
 8014802:	4645      	mov	r5, r8
 8014804:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014808:	2b00      	cmp	r3, #0
 801480a:	d155      	bne.n	80148b8 <_vfiprintf_r+0xf8>
 801480c:	ebb8 0a07 	subs.w	sl, r8, r7
 8014810:	d00b      	beq.n	801482a <_vfiprintf_r+0x6a>
 8014812:	4653      	mov	r3, sl
 8014814:	463a      	mov	r2, r7
 8014816:	4621      	mov	r1, r4
 8014818:	4630      	mov	r0, r6
 801481a:	f7ff ffbf 	bl	801479c <__sfputs_r>
 801481e:	3001      	adds	r0, #1
 8014820:	f000 80c4 	beq.w	80149ac <_vfiprintf_r+0x1ec>
 8014824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014826:	4453      	add	r3, sl
 8014828:	9309      	str	r3, [sp, #36]	; 0x24
 801482a:	f898 3000 	ldrb.w	r3, [r8]
 801482e:	2b00      	cmp	r3, #0
 8014830:	f000 80bc 	beq.w	80149ac <_vfiprintf_r+0x1ec>
 8014834:	2300      	movs	r3, #0
 8014836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801483a:	9304      	str	r3, [sp, #16]
 801483c:	9307      	str	r3, [sp, #28]
 801483e:	9205      	str	r2, [sp, #20]
 8014840:	9306      	str	r3, [sp, #24]
 8014842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014846:	931a      	str	r3, [sp, #104]	; 0x68
 8014848:	2205      	movs	r2, #5
 801484a:	7829      	ldrb	r1, [r5, #0]
 801484c:	4860      	ldr	r0, [pc, #384]	; (80149d0 <_vfiprintf_r+0x210>)
 801484e:	f7eb fccf 	bl	80001f0 <memchr>
 8014852:	f105 0801 	add.w	r8, r5, #1
 8014856:	9b04      	ldr	r3, [sp, #16]
 8014858:	2800      	cmp	r0, #0
 801485a:	d131      	bne.n	80148c0 <_vfiprintf_r+0x100>
 801485c:	06d9      	lsls	r1, r3, #27
 801485e:	bf44      	itt	mi
 8014860:	2220      	movmi	r2, #32
 8014862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014866:	071a      	lsls	r2, r3, #28
 8014868:	bf44      	itt	mi
 801486a:	222b      	movmi	r2, #43	; 0x2b
 801486c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014870:	782a      	ldrb	r2, [r5, #0]
 8014872:	2a2a      	cmp	r2, #42	; 0x2a
 8014874:	d02c      	beq.n	80148d0 <_vfiprintf_r+0x110>
 8014876:	9a07      	ldr	r2, [sp, #28]
 8014878:	2100      	movs	r1, #0
 801487a:	200a      	movs	r0, #10
 801487c:	46a8      	mov	r8, r5
 801487e:	3501      	adds	r5, #1
 8014880:	f898 3000 	ldrb.w	r3, [r8]
 8014884:	3b30      	subs	r3, #48	; 0x30
 8014886:	2b09      	cmp	r3, #9
 8014888:	d96d      	bls.n	8014966 <_vfiprintf_r+0x1a6>
 801488a:	b371      	cbz	r1, 80148ea <_vfiprintf_r+0x12a>
 801488c:	e026      	b.n	80148dc <_vfiprintf_r+0x11c>
 801488e:	4b51      	ldr	r3, [pc, #324]	; (80149d4 <_vfiprintf_r+0x214>)
 8014890:	429c      	cmp	r4, r3
 8014892:	d101      	bne.n	8014898 <_vfiprintf_r+0xd8>
 8014894:	68b4      	ldr	r4, [r6, #8]
 8014896:	e7a3      	b.n	80147e0 <_vfiprintf_r+0x20>
 8014898:	4b4f      	ldr	r3, [pc, #316]	; (80149d8 <_vfiprintf_r+0x218>)
 801489a:	429c      	cmp	r4, r3
 801489c:	bf08      	it	eq
 801489e:	68f4      	ldreq	r4, [r6, #12]
 80148a0:	e79e      	b.n	80147e0 <_vfiprintf_r+0x20>
 80148a2:	4621      	mov	r1, r4
 80148a4:	4630      	mov	r0, r6
 80148a6:	f000 faef 	bl	8014e88 <__swsetup_r>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d09e      	beq.n	80147ec <_vfiprintf_r+0x2c>
 80148ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148b2:	b01d      	add	sp, #116	; 0x74
 80148b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148b8:	2b25      	cmp	r3, #37	; 0x25
 80148ba:	d0a7      	beq.n	801480c <_vfiprintf_r+0x4c>
 80148bc:	46a8      	mov	r8, r5
 80148be:	e7a0      	b.n	8014802 <_vfiprintf_r+0x42>
 80148c0:	4a43      	ldr	r2, [pc, #268]	; (80149d0 <_vfiprintf_r+0x210>)
 80148c2:	1a80      	subs	r0, r0, r2
 80148c4:	fa0b f000 	lsl.w	r0, fp, r0
 80148c8:	4318      	orrs	r0, r3
 80148ca:	9004      	str	r0, [sp, #16]
 80148cc:	4645      	mov	r5, r8
 80148ce:	e7bb      	b.n	8014848 <_vfiprintf_r+0x88>
 80148d0:	9a03      	ldr	r2, [sp, #12]
 80148d2:	1d11      	adds	r1, r2, #4
 80148d4:	6812      	ldr	r2, [r2, #0]
 80148d6:	9103      	str	r1, [sp, #12]
 80148d8:	2a00      	cmp	r2, #0
 80148da:	db01      	blt.n	80148e0 <_vfiprintf_r+0x120>
 80148dc:	9207      	str	r2, [sp, #28]
 80148de:	e004      	b.n	80148ea <_vfiprintf_r+0x12a>
 80148e0:	4252      	negs	r2, r2
 80148e2:	f043 0302 	orr.w	r3, r3, #2
 80148e6:	9207      	str	r2, [sp, #28]
 80148e8:	9304      	str	r3, [sp, #16]
 80148ea:	f898 3000 	ldrb.w	r3, [r8]
 80148ee:	2b2e      	cmp	r3, #46	; 0x2e
 80148f0:	d110      	bne.n	8014914 <_vfiprintf_r+0x154>
 80148f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80148f6:	2b2a      	cmp	r3, #42	; 0x2a
 80148f8:	f108 0101 	add.w	r1, r8, #1
 80148fc:	d137      	bne.n	801496e <_vfiprintf_r+0x1ae>
 80148fe:	9b03      	ldr	r3, [sp, #12]
 8014900:	1d1a      	adds	r2, r3, #4
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	9203      	str	r2, [sp, #12]
 8014906:	2b00      	cmp	r3, #0
 8014908:	bfb8      	it	lt
 801490a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801490e:	f108 0802 	add.w	r8, r8, #2
 8014912:	9305      	str	r3, [sp, #20]
 8014914:	4d31      	ldr	r5, [pc, #196]	; (80149dc <_vfiprintf_r+0x21c>)
 8014916:	f898 1000 	ldrb.w	r1, [r8]
 801491a:	2203      	movs	r2, #3
 801491c:	4628      	mov	r0, r5
 801491e:	f7eb fc67 	bl	80001f0 <memchr>
 8014922:	b140      	cbz	r0, 8014936 <_vfiprintf_r+0x176>
 8014924:	2340      	movs	r3, #64	; 0x40
 8014926:	1b40      	subs	r0, r0, r5
 8014928:	fa03 f000 	lsl.w	r0, r3, r0
 801492c:	9b04      	ldr	r3, [sp, #16]
 801492e:	4303      	orrs	r3, r0
 8014930:	9304      	str	r3, [sp, #16]
 8014932:	f108 0801 	add.w	r8, r8, #1
 8014936:	f898 1000 	ldrb.w	r1, [r8]
 801493a:	4829      	ldr	r0, [pc, #164]	; (80149e0 <_vfiprintf_r+0x220>)
 801493c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014940:	2206      	movs	r2, #6
 8014942:	f108 0701 	add.w	r7, r8, #1
 8014946:	f7eb fc53 	bl	80001f0 <memchr>
 801494a:	2800      	cmp	r0, #0
 801494c:	d034      	beq.n	80149b8 <_vfiprintf_r+0x1f8>
 801494e:	4b25      	ldr	r3, [pc, #148]	; (80149e4 <_vfiprintf_r+0x224>)
 8014950:	bb03      	cbnz	r3, 8014994 <_vfiprintf_r+0x1d4>
 8014952:	9b03      	ldr	r3, [sp, #12]
 8014954:	3307      	adds	r3, #7
 8014956:	f023 0307 	bic.w	r3, r3, #7
 801495a:	3308      	adds	r3, #8
 801495c:	9303      	str	r3, [sp, #12]
 801495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014960:	444b      	add	r3, r9
 8014962:	9309      	str	r3, [sp, #36]	; 0x24
 8014964:	e74c      	b.n	8014800 <_vfiprintf_r+0x40>
 8014966:	fb00 3202 	mla	r2, r0, r2, r3
 801496a:	2101      	movs	r1, #1
 801496c:	e786      	b.n	801487c <_vfiprintf_r+0xbc>
 801496e:	2300      	movs	r3, #0
 8014970:	9305      	str	r3, [sp, #20]
 8014972:	4618      	mov	r0, r3
 8014974:	250a      	movs	r5, #10
 8014976:	4688      	mov	r8, r1
 8014978:	3101      	adds	r1, #1
 801497a:	f898 2000 	ldrb.w	r2, [r8]
 801497e:	3a30      	subs	r2, #48	; 0x30
 8014980:	2a09      	cmp	r2, #9
 8014982:	d903      	bls.n	801498c <_vfiprintf_r+0x1cc>
 8014984:	2b00      	cmp	r3, #0
 8014986:	d0c5      	beq.n	8014914 <_vfiprintf_r+0x154>
 8014988:	9005      	str	r0, [sp, #20]
 801498a:	e7c3      	b.n	8014914 <_vfiprintf_r+0x154>
 801498c:	fb05 2000 	mla	r0, r5, r0, r2
 8014990:	2301      	movs	r3, #1
 8014992:	e7f0      	b.n	8014976 <_vfiprintf_r+0x1b6>
 8014994:	ab03      	add	r3, sp, #12
 8014996:	9300      	str	r3, [sp, #0]
 8014998:	4622      	mov	r2, r4
 801499a:	4b13      	ldr	r3, [pc, #76]	; (80149e8 <_vfiprintf_r+0x228>)
 801499c:	a904      	add	r1, sp, #16
 801499e:	4630      	mov	r0, r6
 80149a0:	f3af 8000 	nop.w
 80149a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80149a8:	4681      	mov	r9, r0
 80149aa:	d1d8      	bne.n	801495e <_vfiprintf_r+0x19e>
 80149ac:	89a3      	ldrh	r3, [r4, #12]
 80149ae:	065b      	lsls	r3, r3, #25
 80149b0:	f53f af7d 	bmi.w	80148ae <_vfiprintf_r+0xee>
 80149b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149b6:	e77c      	b.n	80148b2 <_vfiprintf_r+0xf2>
 80149b8:	ab03      	add	r3, sp, #12
 80149ba:	9300      	str	r3, [sp, #0]
 80149bc:	4622      	mov	r2, r4
 80149be:	4b0a      	ldr	r3, [pc, #40]	; (80149e8 <_vfiprintf_r+0x228>)
 80149c0:	a904      	add	r1, sp, #16
 80149c2:	4630      	mov	r0, r6
 80149c4:	f000 f888 	bl	8014ad8 <_printf_i>
 80149c8:	e7ec      	b.n	80149a4 <_vfiprintf_r+0x1e4>
 80149ca:	bf00      	nop
 80149cc:	080180a4 	.word	0x080180a4
 80149d0:	080180e8 	.word	0x080180e8
 80149d4:	080180c4 	.word	0x080180c4
 80149d8:	08018084 	.word	0x08018084
 80149dc:	080180ee 	.word	0x080180ee
 80149e0:	080180f2 	.word	0x080180f2
 80149e4:	00000000 	.word	0x00000000
 80149e8:	0801479d 	.word	0x0801479d

080149ec <_printf_common>:
 80149ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149f0:	4691      	mov	r9, r2
 80149f2:	461f      	mov	r7, r3
 80149f4:	688a      	ldr	r2, [r1, #8]
 80149f6:	690b      	ldr	r3, [r1, #16]
 80149f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80149fc:	4293      	cmp	r3, r2
 80149fe:	bfb8      	it	lt
 8014a00:	4613      	movlt	r3, r2
 8014a02:	f8c9 3000 	str.w	r3, [r9]
 8014a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	460c      	mov	r4, r1
 8014a0e:	b112      	cbz	r2, 8014a16 <_printf_common+0x2a>
 8014a10:	3301      	adds	r3, #1
 8014a12:	f8c9 3000 	str.w	r3, [r9]
 8014a16:	6823      	ldr	r3, [r4, #0]
 8014a18:	0699      	lsls	r1, r3, #26
 8014a1a:	bf42      	ittt	mi
 8014a1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014a20:	3302      	addmi	r3, #2
 8014a22:	f8c9 3000 	strmi.w	r3, [r9]
 8014a26:	6825      	ldr	r5, [r4, #0]
 8014a28:	f015 0506 	ands.w	r5, r5, #6
 8014a2c:	d107      	bne.n	8014a3e <_printf_common+0x52>
 8014a2e:	f104 0a19 	add.w	sl, r4, #25
 8014a32:	68e3      	ldr	r3, [r4, #12]
 8014a34:	f8d9 2000 	ldr.w	r2, [r9]
 8014a38:	1a9b      	subs	r3, r3, r2
 8014a3a:	429d      	cmp	r5, r3
 8014a3c:	db29      	blt.n	8014a92 <_printf_common+0xa6>
 8014a3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014a42:	6822      	ldr	r2, [r4, #0]
 8014a44:	3300      	adds	r3, #0
 8014a46:	bf18      	it	ne
 8014a48:	2301      	movne	r3, #1
 8014a4a:	0692      	lsls	r2, r2, #26
 8014a4c:	d42e      	bmi.n	8014aac <_printf_common+0xc0>
 8014a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a52:	4639      	mov	r1, r7
 8014a54:	4630      	mov	r0, r6
 8014a56:	47c0      	blx	r8
 8014a58:	3001      	adds	r0, #1
 8014a5a:	d021      	beq.n	8014aa0 <_printf_common+0xb4>
 8014a5c:	6823      	ldr	r3, [r4, #0]
 8014a5e:	68e5      	ldr	r5, [r4, #12]
 8014a60:	f8d9 2000 	ldr.w	r2, [r9]
 8014a64:	f003 0306 	and.w	r3, r3, #6
 8014a68:	2b04      	cmp	r3, #4
 8014a6a:	bf08      	it	eq
 8014a6c:	1aad      	subeq	r5, r5, r2
 8014a6e:	68a3      	ldr	r3, [r4, #8]
 8014a70:	6922      	ldr	r2, [r4, #16]
 8014a72:	bf0c      	ite	eq
 8014a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a78:	2500      	movne	r5, #0
 8014a7a:	4293      	cmp	r3, r2
 8014a7c:	bfc4      	itt	gt
 8014a7e:	1a9b      	subgt	r3, r3, r2
 8014a80:	18ed      	addgt	r5, r5, r3
 8014a82:	f04f 0900 	mov.w	r9, #0
 8014a86:	341a      	adds	r4, #26
 8014a88:	454d      	cmp	r5, r9
 8014a8a:	d11b      	bne.n	8014ac4 <_printf_common+0xd8>
 8014a8c:	2000      	movs	r0, #0
 8014a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a92:	2301      	movs	r3, #1
 8014a94:	4652      	mov	r2, sl
 8014a96:	4639      	mov	r1, r7
 8014a98:	4630      	mov	r0, r6
 8014a9a:	47c0      	blx	r8
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	d103      	bne.n	8014aa8 <_printf_common+0xbc>
 8014aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aa8:	3501      	adds	r5, #1
 8014aaa:	e7c2      	b.n	8014a32 <_printf_common+0x46>
 8014aac:	18e1      	adds	r1, r4, r3
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	2030      	movs	r0, #48	; 0x30
 8014ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ab6:	4422      	add	r2, r4
 8014ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ac0:	3302      	adds	r3, #2
 8014ac2:	e7c4      	b.n	8014a4e <_printf_common+0x62>
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	4622      	mov	r2, r4
 8014ac8:	4639      	mov	r1, r7
 8014aca:	4630      	mov	r0, r6
 8014acc:	47c0      	blx	r8
 8014ace:	3001      	adds	r0, #1
 8014ad0:	d0e6      	beq.n	8014aa0 <_printf_common+0xb4>
 8014ad2:	f109 0901 	add.w	r9, r9, #1
 8014ad6:	e7d7      	b.n	8014a88 <_printf_common+0x9c>

08014ad8 <_printf_i>:
 8014ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014adc:	4617      	mov	r7, r2
 8014ade:	7e0a      	ldrb	r2, [r1, #24]
 8014ae0:	b085      	sub	sp, #20
 8014ae2:	2a6e      	cmp	r2, #110	; 0x6e
 8014ae4:	4698      	mov	r8, r3
 8014ae6:	4606      	mov	r6, r0
 8014ae8:	460c      	mov	r4, r1
 8014aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014af0:	f000 80bc 	beq.w	8014c6c <_printf_i+0x194>
 8014af4:	d81a      	bhi.n	8014b2c <_printf_i+0x54>
 8014af6:	2a63      	cmp	r2, #99	; 0x63
 8014af8:	d02e      	beq.n	8014b58 <_printf_i+0x80>
 8014afa:	d80a      	bhi.n	8014b12 <_printf_i+0x3a>
 8014afc:	2a00      	cmp	r2, #0
 8014afe:	f000 80c8 	beq.w	8014c92 <_printf_i+0x1ba>
 8014b02:	2a58      	cmp	r2, #88	; 0x58
 8014b04:	f000 808a 	beq.w	8014c1c <_printf_i+0x144>
 8014b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014b10:	e02a      	b.n	8014b68 <_printf_i+0x90>
 8014b12:	2a64      	cmp	r2, #100	; 0x64
 8014b14:	d001      	beq.n	8014b1a <_printf_i+0x42>
 8014b16:	2a69      	cmp	r2, #105	; 0x69
 8014b18:	d1f6      	bne.n	8014b08 <_printf_i+0x30>
 8014b1a:	6821      	ldr	r1, [r4, #0]
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8014b22:	d023      	beq.n	8014b6c <_printf_i+0x94>
 8014b24:	1d11      	adds	r1, r2, #4
 8014b26:	6019      	str	r1, [r3, #0]
 8014b28:	6813      	ldr	r3, [r2, #0]
 8014b2a:	e027      	b.n	8014b7c <_printf_i+0xa4>
 8014b2c:	2a73      	cmp	r2, #115	; 0x73
 8014b2e:	f000 80b4 	beq.w	8014c9a <_printf_i+0x1c2>
 8014b32:	d808      	bhi.n	8014b46 <_printf_i+0x6e>
 8014b34:	2a6f      	cmp	r2, #111	; 0x6f
 8014b36:	d02a      	beq.n	8014b8e <_printf_i+0xb6>
 8014b38:	2a70      	cmp	r2, #112	; 0x70
 8014b3a:	d1e5      	bne.n	8014b08 <_printf_i+0x30>
 8014b3c:	680a      	ldr	r2, [r1, #0]
 8014b3e:	f042 0220 	orr.w	r2, r2, #32
 8014b42:	600a      	str	r2, [r1, #0]
 8014b44:	e003      	b.n	8014b4e <_printf_i+0x76>
 8014b46:	2a75      	cmp	r2, #117	; 0x75
 8014b48:	d021      	beq.n	8014b8e <_printf_i+0xb6>
 8014b4a:	2a78      	cmp	r2, #120	; 0x78
 8014b4c:	d1dc      	bne.n	8014b08 <_printf_i+0x30>
 8014b4e:	2278      	movs	r2, #120	; 0x78
 8014b50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014b54:	496e      	ldr	r1, [pc, #440]	; (8014d10 <_printf_i+0x238>)
 8014b56:	e064      	b.n	8014c22 <_printf_i+0x14a>
 8014b58:	681a      	ldr	r2, [r3, #0]
 8014b5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014b5e:	1d11      	adds	r1, r2, #4
 8014b60:	6019      	str	r1, [r3, #0]
 8014b62:	6813      	ldr	r3, [r2, #0]
 8014b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b68:	2301      	movs	r3, #1
 8014b6a:	e0a3      	b.n	8014cb4 <_printf_i+0x1dc>
 8014b6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014b70:	f102 0104 	add.w	r1, r2, #4
 8014b74:	6019      	str	r1, [r3, #0]
 8014b76:	d0d7      	beq.n	8014b28 <_printf_i+0x50>
 8014b78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	da03      	bge.n	8014b88 <_printf_i+0xb0>
 8014b80:	222d      	movs	r2, #45	; 0x2d
 8014b82:	425b      	negs	r3, r3
 8014b84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014b88:	4962      	ldr	r1, [pc, #392]	; (8014d14 <_printf_i+0x23c>)
 8014b8a:	220a      	movs	r2, #10
 8014b8c:	e017      	b.n	8014bbe <_printf_i+0xe6>
 8014b8e:	6820      	ldr	r0, [r4, #0]
 8014b90:	6819      	ldr	r1, [r3, #0]
 8014b92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014b96:	d003      	beq.n	8014ba0 <_printf_i+0xc8>
 8014b98:	1d08      	adds	r0, r1, #4
 8014b9a:	6018      	str	r0, [r3, #0]
 8014b9c:	680b      	ldr	r3, [r1, #0]
 8014b9e:	e006      	b.n	8014bae <_printf_i+0xd6>
 8014ba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ba4:	f101 0004 	add.w	r0, r1, #4
 8014ba8:	6018      	str	r0, [r3, #0]
 8014baa:	d0f7      	beq.n	8014b9c <_printf_i+0xc4>
 8014bac:	880b      	ldrh	r3, [r1, #0]
 8014bae:	4959      	ldr	r1, [pc, #356]	; (8014d14 <_printf_i+0x23c>)
 8014bb0:	2a6f      	cmp	r2, #111	; 0x6f
 8014bb2:	bf14      	ite	ne
 8014bb4:	220a      	movne	r2, #10
 8014bb6:	2208      	moveq	r2, #8
 8014bb8:	2000      	movs	r0, #0
 8014bba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014bbe:	6865      	ldr	r5, [r4, #4]
 8014bc0:	60a5      	str	r5, [r4, #8]
 8014bc2:	2d00      	cmp	r5, #0
 8014bc4:	f2c0 809c 	blt.w	8014d00 <_printf_i+0x228>
 8014bc8:	6820      	ldr	r0, [r4, #0]
 8014bca:	f020 0004 	bic.w	r0, r0, #4
 8014bce:	6020      	str	r0, [r4, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d13f      	bne.n	8014c54 <_printf_i+0x17c>
 8014bd4:	2d00      	cmp	r5, #0
 8014bd6:	f040 8095 	bne.w	8014d04 <_printf_i+0x22c>
 8014bda:	4675      	mov	r5, lr
 8014bdc:	2a08      	cmp	r2, #8
 8014bde:	d10b      	bne.n	8014bf8 <_printf_i+0x120>
 8014be0:	6823      	ldr	r3, [r4, #0]
 8014be2:	07da      	lsls	r2, r3, #31
 8014be4:	d508      	bpl.n	8014bf8 <_printf_i+0x120>
 8014be6:	6923      	ldr	r3, [r4, #16]
 8014be8:	6862      	ldr	r2, [r4, #4]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	bfde      	ittt	le
 8014bee:	2330      	movle	r3, #48	; 0x30
 8014bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014bf4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014bf8:	ebae 0305 	sub.w	r3, lr, r5
 8014bfc:	6123      	str	r3, [r4, #16]
 8014bfe:	f8cd 8000 	str.w	r8, [sp]
 8014c02:	463b      	mov	r3, r7
 8014c04:	aa03      	add	r2, sp, #12
 8014c06:	4621      	mov	r1, r4
 8014c08:	4630      	mov	r0, r6
 8014c0a:	f7ff feef 	bl	80149ec <_printf_common>
 8014c0e:	3001      	adds	r0, #1
 8014c10:	d155      	bne.n	8014cbe <_printf_i+0x1e6>
 8014c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c16:	b005      	add	sp, #20
 8014c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014c20:	493c      	ldr	r1, [pc, #240]	; (8014d14 <_printf_i+0x23c>)
 8014c22:	6822      	ldr	r2, [r4, #0]
 8014c24:	6818      	ldr	r0, [r3, #0]
 8014c26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014c2a:	f100 0504 	add.w	r5, r0, #4
 8014c2e:	601d      	str	r5, [r3, #0]
 8014c30:	d001      	beq.n	8014c36 <_printf_i+0x15e>
 8014c32:	6803      	ldr	r3, [r0, #0]
 8014c34:	e002      	b.n	8014c3c <_printf_i+0x164>
 8014c36:	0655      	lsls	r5, r2, #25
 8014c38:	d5fb      	bpl.n	8014c32 <_printf_i+0x15a>
 8014c3a:	8803      	ldrh	r3, [r0, #0]
 8014c3c:	07d0      	lsls	r0, r2, #31
 8014c3e:	bf44      	itt	mi
 8014c40:	f042 0220 	orrmi.w	r2, r2, #32
 8014c44:	6022      	strmi	r2, [r4, #0]
 8014c46:	b91b      	cbnz	r3, 8014c50 <_printf_i+0x178>
 8014c48:	6822      	ldr	r2, [r4, #0]
 8014c4a:	f022 0220 	bic.w	r2, r2, #32
 8014c4e:	6022      	str	r2, [r4, #0]
 8014c50:	2210      	movs	r2, #16
 8014c52:	e7b1      	b.n	8014bb8 <_printf_i+0xe0>
 8014c54:	4675      	mov	r5, lr
 8014c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8014c5e:	5ccb      	ldrb	r3, [r1, r3]
 8014c60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014c64:	4603      	mov	r3, r0
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d1f5      	bne.n	8014c56 <_printf_i+0x17e>
 8014c6a:	e7b7      	b.n	8014bdc <_printf_i+0x104>
 8014c6c:	6808      	ldr	r0, [r1, #0]
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	6949      	ldr	r1, [r1, #20]
 8014c72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014c76:	d004      	beq.n	8014c82 <_printf_i+0x1aa>
 8014c78:	1d10      	adds	r0, r2, #4
 8014c7a:	6018      	str	r0, [r3, #0]
 8014c7c:	6813      	ldr	r3, [r2, #0]
 8014c7e:	6019      	str	r1, [r3, #0]
 8014c80:	e007      	b.n	8014c92 <_printf_i+0x1ba>
 8014c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014c86:	f102 0004 	add.w	r0, r2, #4
 8014c8a:	6018      	str	r0, [r3, #0]
 8014c8c:	6813      	ldr	r3, [r2, #0]
 8014c8e:	d0f6      	beq.n	8014c7e <_printf_i+0x1a6>
 8014c90:	8019      	strh	r1, [r3, #0]
 8014c92:	2300      	movs	r3, #0
 8014c94:	6123      	str	r3, [r4, #16]
 8014c96:	4675      	mov	r5, lr
 8014c98:	e7b1      	b.n	8014bfe <_printf_i+0x126>
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	1d11      	adds	r1, r2, #4
 8014c9e:	6019      	str	r1, [r3, #0]
 8014ca0:	6815      	ldr	r5, [r2, #0]
 8014ca2:	6862      	ldr	r2, [r4, #4]
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	f7eb faa2 	bl	80001f0 <memchr>
 8014cac:	b108      	cbz	r0, 8014cb2 <_printf_i+0x1da>
 8014cae:	1b40      	subs	r0, r0, r5
 8014cb0:	6060      	str	r0, [r4, #4]
 8014cb2:	6863      	ldr	r3, [r4, #4]
 8014cb4:	6123      	str	r3, [r4, #16]
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014cbc:	e79f      	b.n	8014bfe <_printf_i+0x126>
 8014cbe:	6923      	ldr	r3, [r4, #16]
 8014cc0:	462a      	mov	r2, r5
 8014cc2:	4639      	mov	r1, r7
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	47c0      	blx	r8
 8014cc8:	3001      	adds	r0, #1
 8014cca:	d0a2      	beq.n	8014c12 <_printf_i+0x13a>
 8014ccc:	6823      	ldr	r3, [r4, #0]
 8014cce:	079b      	lsls	r3, r3, #30
 8014cd0:	d507      	bpl.n	8014ce2 <_printf_i+0x20a>
 8014cd2:	2500      	movs	r5, #0
 8014cd4:	f104 0919 	add.w	r9, r4, #25
 8014cd8:	68e3      	ldr	r3, [r4, #12]
 8014cda:	9a03      	ldr	r2, [sp, #12]
 8014cdc:	1a9b      	subs	r3, r3, r2
 8014cde:	429d      	cmp	r5, r3
 8014ce0:	db05      	blt.n	8014cee <_printf_i+0x216>
 8014ce2:	68e0      	ldr	r0, [r4, #12]
 8014ce4:	9b03      	ldr	r3, [sp, #12]
 8014ce6:	4298      	cmp	r0, r3
 8014ce8:	bfb8      	it	lt
 8014cea:	4618      	movlt	r0, r3
 8014cec:	e793      	b.n	8014c16 <_printf_i+0x13e>
 8014cee:	2301      	movs	r3, #1
 8014cf0:	464a      	mov	r2, r9
 8014cf2:	4639      	mov	r1, r7
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	47c0      	blx	r8
 8014cf8:	3001      	adds	r0, #1
 8014cfa:	d08a      	beq.n	8014c12 <_printf_i+0x13a>
 8014cfc:	3501      	adds	r5, #1
 8014cfe:	e7eb      	b.n	8014cd8 <_printf_i+0x200>
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d1a7      	bne.n	8014c54 <_printf_i+0x17c>
 8014d04:	780b      	ldrb	r3, [r1, #0]
 8014d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d0e:	e765      	b.n	8014bdc <_printf_i+0x104>
 8014d10:	0801810a 	.word	0x0801810a
 8014d14:	080180f9 	.word	0x080180f9

08014d18 <_sbrk_r>:
 8014d18:	b538      	push	{r3, r4, r5, lr}
 8014d1a:	4c06      	ldr	r4, [pc, #24]	; (8014d34 <_sbrk_r+0x1c>)
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	4605      	mov	r5, r0
 8014d20:	4608      	mov	r0, r1
 8014d22:	6023      	str	r3, [r4, #0]
 8014d24:	f7ff fa4a 	bl	80141bc <_sbrk>
 8014d28:	1c43      	adds	r3, r0, #1
 8014d2a:	d102      	bne.n	8014d32 <_sbrk_r+0x1a>
 8014d2c:	6823      	ldr	r3, [r4, #0]
 8014d2e:	b103      	cbz	r3, 8014d32 <_sbrk_r+0x1a>
 8014d30:	602b      	str	r3, [r5, #0]
 8014d32:	bd38      	pop	{r3, r4, r5, pc}
 8014d34:	20007754 	.word	0x20007754

08014d38 <__sread>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d40:	f000 fa4a 	bl	80151d8 <_read_r>
 8014d44:	2800      	cmp	r0, #0
 8014d46:	bfab      	itete	ge
 8014d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8014d4c:	181b      	addge	r3, r3, r0
 8014d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d52:	bfac      	ite	ge
 8014d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d56:	81a3      	strhlt	r3, [r4, #12]
 8014d58:	bd10      	pop	{r4, pc}

08014d5a <__swrite>:
 8014d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d5e:	461f      	mov	r7, r3
 8014d60:	898b      	ldrh	r3, [r1, #12]
 8014d62:	05db      	lsls	r3, r3, #23
 8014d64:	4605      	mov	r5, r0
 8014d66:	460c      	mov	r4, r1
 8014d68:	4616      	mov	r6, r2
 8014d6a:	d505      	bpl.n	8014d78 <__swrite+0x1e>
 8014d6c:	2302      	movs	r3, #2
 8014d6e:	2200      	movs	r2, #0
 8014d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d74:	f000 f9b8 	bl	80150e8 <_lseek_r>
 8014d78:	89a3      	ldrh	r3, [r4, #12]
 8014d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d82:	81a3      	strh	r3, [r4, #12]
 8014d84:	4632      	mov	r2, r6
 8014d86:	463b      	mov	r3, r7
 8014d88:	4628      	mov	r0, r5
 8014d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d8e:	f000 b869 	b.w	8014e64 <_write_r>

08014d92 <__sseek>:
 8014d92:	b510      	push	{r4, lr}
 8014d94:	460c      	mov	r4, r1
 8014d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d9a:	f000 f9a5 	bl	80150e8 <_lseek_r>
 8014d9e:	1c43      	adds	r3, r0, #1
 8014da0:	89a3      	ldrh	r3, [r4, #12]
 8014da2:	bf15      	itete	ne
 8014da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014dae:	81a3      	strheq	r3, [r4, #12]
 8014db0:	bf18      	it	ne
 8014db2:	81a3      	strhne	r3, [r4, #12]
 8014db4:	bd10      	pop	{r4, pc}

08014db6 <__sclose>:
 8014db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dba:	f000 b8d3 	b.w	8014f64 <_close_r>
	...

08014dc0 <__swbuf_r>:
 8014dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dc2:	460e      	mov	r6, r1
 8014dc4:	4614      	mov	r4, r2
 8014dc6:	4605      	mov	r5, r0
 8014dc8:	b118      	cbz	r0, 8014dd2 <__swbuf_r+0x12>
 8014dca:	6983      	ldr	r3, [r0, #24]
 8014dcc:	b90b      	cbnz	r3, 8014dd2 <__swbuf_r+0x12>
 8014dce:	f7ff fb8f 	bl	80144f0 <__sinit>
 8014dd2:	4b21      	ldr	r3, [pc, #132]	; (8014e58 <__swbuf_r+0x98>)
 8014dd4:	429c      	cmp	r4, r3
 8014dd6:	d12a      	bne.n	8014e2e <__swbuf_r+0x6e>
 8014dd8:	686c      	ldr	r4, [r5, #4]
 8014dda:	69a3      	ldr	r3, [r4, #24]
 8014ddc:	60a3      	str	r3, [r4, #8]
 8014dde:	89a3      	ldrh	r3, [r4, #12]
 8014de0:	071a      	lsls	r2, r3, #28
 8014de2:	d52e      	bpl.n	8014e42 <__swbuf_r+0x82>
 8014de4:	6923      	ldr	r3, [r4, #16]
 8014de6:	b363      	cbz	r3, 8014e42 <__swbuf_r+0x82>
 8014de8:	6923      	ldr	r3, [r4, #16]
 8014dea:	6820      	ldr	r0, [r4, #0]
 8014dec:	1ac0      	subs	r0, r0, r3
 8014dee:	6963      	ldr	r3, [r4, #20]
 8014df0:	b2f6      	uxtb	r6, r6
 8014df2:	4298      	cmp	r0, r3
 8014df4:	4637      	mov	r7, r6
 8014df6:	db04      	blt.n	8014e02 <__swbuf_r+0x42>
 8014df8:	4621      	mov	r1, r4
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	f000 f94a 	bl	8015094 <_fflush_r>
 8014e00:	bb28      	cbnz	r0, 8014e4e <__swbuf_r+0x8e>
 8014e02:	68a3      	ldr	r3, [r4, #8]
 8014e04:	3b01      	subs	r3, #1
 8014e06:	60a3      	str	r3, [r4, #8]
 8014e08:	6823      	ldr	r3, [r4, #0]
 8014e0a:	1c5a      	adds	r2, r3, #1
 8014e0c:	6022      	str	r2, [r4, #0]
 8014e0e:	701e      	strb	r6, [r3, #0]
 8014e10:	6963      	ldr	r3, [r4, #20]
 8014e12:	3001      	adds	r0, #1
 8014e14:	4298      	cmp	r0, r3
 8014e16:	d004      	beq.n	8014e22 <__swbuf_r+0x62>
 8014e18:	89a3      	ldrh	r3, [r4, #12]
 8014e1a:	07db      	lsls	r3, r3, #31
 8014e1c:	d519      	bpl.n	8014e52 <__swbuf_r+0x92>
 8014e1e:	2e0a      	cmp	r6, #10
 8014e20:	d117      	bne.n	8014e52 <__swbuf_r+0x92>
 8014e22:	4621      	mov	r1, r4
 8014e24:	4628      	mov	r0, r5
 8014e26:	f000 f935 	bl	8015094 <_fflush_r>
 8014e2a:	b190      	cbz	r0, 8014e52 <__swbuf_r+0x92>
 8014e2c:	e00f      	b.n	8014e4e <__swbuf_r+0x8e>
 8014e2e:	4b0b      	ldr	r3, [pc, #44]	; (8014e5c <__swbuf_r+0x9c>)
 8014e30:	429c      	cmp	r4, r3
 8014e32:	d101      	bne.n	8014e38 <__swbuf_r+0x78>
 8014e34:	68ac      	ldr	r4, [r5, #8]
 8014e36:	e7d0      	b.n	8014dda <__swbuf_r+0x1a>
 8014e38:	4b09      	ldr	r3, [pc, #36]	; (8014e60 <__swbuf_r+0xa0>)
 8014e3a:	429c      	cmp	r4, r3
 8014e3c:	bf08      	it	eq
 8014e3e:	68ec      	ldreq	r4, [r5, #12]
 8014e40:	e7cb      	b.n	8014dda <__swbuf_r+0x1a>
 8014e42:	4621      	mov	r1, r4
 8014e44:	4628      	mov	r0, r5
 8014e46:	f000 f81f 	bl	8014e88 <__swsetup_r>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d0cc      	beq.n	8014de8 <__swbuf_r+0x28>
 8014e4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014e52:	4638      	mov	r0, r7
 8014e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e56:	bf00      	nop
 8014e58:	080180a4 	.word	0x080180a4
 8014e5c:	080180c4 	.word	0x080180c4
 8014e60:	08018084 	.word	0x08018084

08014e64 <_write_r>:
 8014e64:	b538      	push	{r3, r4, r5, lr}
 8014e66:	4c07      	ldr	r4, [pc, #28]	; (8014e84 <_write_r+0x20>)
 8014e68:	4605      	mov	r5, r0
 8014e6a:	4608      	mov	r0, r1
 8014e6c:	4611      	mov	r1, r2
 8014e6e:	2200      	movs	r2, #0
 8014e70:	6022      	str	r2, [r4, #0]
 8014e72:	461a      	mov	r2, r3
 8014e74:	f7ff f985 	bl	8014182 <_write>
 8014e78:	1c43      	adds	r3, r0, #1
 8014e7a:	d102      	bne.n	8014e82 <_write_r+0x1e>
 8014e7c:	6823      	ldr	r3, [r4, #0]
 8014e7e:	b103      	cbz	r3, 8014e82 <_write_r+0x1e>
 8014e80:	602b      	str	r3, [r5, #0]
 8014e82:	bd38      	pop	{r3, r4, r5, pc}
 8014e84:	20007754 	.word	0x20007754

08014e88 <__swsetup_r>:
 8014e88:	4b32      	ldr	r3, [pc, #200]	; (8014f54 <__swsetup_r+0xcc>)
 8014e8a:	b570      	push	{r4, r5, r6, lr}
 8014e8c:	681d      	ldr	r5, [r3, #0]
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460c      	mov	r4, r1
 8014e92:	b125      	cbz	r5, 8014e9e <__swsetup_r+0x16>
 8014e94:	69ab      	ldr	r3, [r5, #24]
 8014e96:	b913      	cbnz	r3, 8014e9e <__swsetup_r+0x16>
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f7ff fb29 	bl	80144f0 <__sinit>
 8014e9e:	4b2e      	ldr	r3, [pc, #184]	; (8014f58 <__swsetup_r+0xd0>)
 8014ea0:	429c      	cmp	r4, r3
 8014ea2:	d10f      	bne.n	8014ec4 <__swsetup_r+0x3c>
 8014ea4:	686c      	ldr	r4, [r5, #4]
 8014ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eaa:	b29a      	uxth	r2, r3
 8014eac:	0715      	lsls	r5, r2, #28
 8014eae:	d42c      	bmi.n	8014f0a <__swsetup_r+0x82>
 8014eb0:	06d0      	lsls	r0, r2, #27
 8014eb2:	d411      	bmi.n	8014ed8 <__swsetup_r+0x50>
 8014eb4:	2209      	movs	r2, #9
 8014eb6:	6032      	str	r2, [r6, #0]
 8014eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ebc:	81a3      	strh	r3, [r4, #12]
 8014ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ec2:	bd70      	pop	{r4, r5, r6, pc}
 8014ec4:	4b25      	ldr	r3, [pc, #148]	; (8014f5c <__swsetup_r+0xd4>)
 8014ec6:	429c      	cmp	r4, r3
 8014ec8:	d101      	bne.n	8014ece <__swsetup_r+0x46>
 8014eca:	68ac      	ldr	r4, [r5, #8]
 8014ecc:	e7eb      	b.n	8014ea6 <__swsetup_r+0x1e>
 8014ece:	4b24      	ldr	r3, [pc, #144]	; (8014f60 <__swsetup_r+0xd8>)
 8014ed0:	429c      	cmp	r4, r3
 8014ed2:	bf08      	it	eq
 8014ed4:	68ec      	ldreq	r4, [r5, #12]
 8014ed6:	e7e6      	b.n	8014ea6 <__swsetup_r+0x1e>
 8014ed8:	0751      	lsls	r1, r2, #29
 8014eda:	d512      	bpl.n	8014f02 <__swsetup_r+0x7a>
 8014edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ede:	b141      	cbz	r1, 8014ef2 <__swsetup_r+0x6a>
 8014ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ee4:	4299      	cmp	r1, r3
 8014ee6:	d002      	beq.n	8014eee <__swsetup_r+0x66>
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f7ff fb93 	bl	8014614 <_free_r>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8014ef2:	89a3      	ldrh	r3, [r4, #12]
 8014ef4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ef8:	81a3      	strh	r3, [r4, #12]
 8014efa:	2300      	movs	r3, #0
 8014efc:	6063      	str	r3, [r4, #4]
 8014efe:	6923      	ldr	r3, [r4, #16]
 8014f00:	6023      	str	r3, [r4, #0]
 8014f02:	89a3      	ldrh	r3, [r4, #12]
 8014f04:	f043 0308 	orr.w	r3, r3, #8
 8014f08:	81a3      	strh	r3, [r4, #12]
 8014f0a:	6923      	ldr	r3, [r4, #16]
 8014f0c:	b94b      	cbnz	r3, 8014f22 <__swsetup_r+0x9a>
 8014f0e:	89a3      	ldrh	r3, [r4, #12]
 8014f10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f18:	d003      	beq.n	8014f22 <__swsetup_r+0x9a>
 8014f1a:	4621      	mov	r1, r4
 8014f1c:	4630      	mov	r0, r6
 8014f1e:	f000 f919 	bl	8015154 <__smakebuf_r>
 8014f22:	89a2      	ldrh	r2, [r4, #12]
 8014f24:	f012 0301 	ands.w	r3, r2, #1
 8014f28:	d00c      	beq.n	8014f44 <__swsetup_r+0xbc>
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	60a3      	str	r3, [r4, #8]
 8014f2e:	6963      	ldr	r3, [r4, #20]
 8014f30:	425b      	negs	r3, r3
 8014f32:	61a3      	str	r3, [r4, #24]
 8014f34:	6923      	ldr	r3, [r4, #16]
 8014f36:	b953      	cbnz	r3, 8014f4e <__swsetup_r+0xc6>
 8014f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014f40:	d1ba      	bne.n	8014eb8 <__swsetup_r+0x30>
 8014f42:	bd70      	pop	{r4, r5, r6, pc}
 8014f44:	0792      	lsls	r2, r2, #30
 8014f46:	bf58      	it	pl
 8014f48:	6963      	ldrpl	r3, [r4, #20]
 8014f4a:	60a3      	str	r3, [r4, #8]
 8014f4c:	e7f2      	b.n	8014f34 <__swsetup_r+0xac>
 8014f4e:	2000      	movs	r0, #0
 8014f50:	e7f7      	b.n	8014f42 <__swsetup_r+0xba>
 8014f52:	bf00      	nop
 8014f54:	2000001c 	.word	0x2000001c
 8014f58:	080180a4 	.word	0x080180a4
 8014f5c:	080180c4 	.word	0x080180c4
 8014f60:	08018084 	.word	0x08018084

08014f64 <_close_r>:
 8014f64:	b538      	push	{r3, r4, r5, lr}
 8014f66:	4c06      	ldr	r4, [pc, #24]	; (8014f80 <_close_r+0x1c>)
 8014f68:	2300      	movs	r3, #0
 8014f6a:	4605      	mov	r5, r0
 8014f6c:	4608      	mov	r0, r1
 8014f6e:	6023      	str	r3, [r4, #0]
 8014f70:	f7ff f952 	bl	8014218 <_close>
 8014f74:	1c43      	adds	r3, r0, #1
 8014f76:	d102      	bne.n	8014f7e <_close_r+0x1a>
 8014f78:	6823      	ldr	r3, [r4, #0]
 8014f7a:	b103      	cbz	r3, 8014f7e <_close_r+0x1a>
 8014f7c:	602b      	str	r3, [r5, #0]
 8014f7e:	bd38      	pop	{r3, r4, r5, pc}
 8014f80:	20007754 	.word	0x20007754

08014f84 <__sflush_r>:
 8014f84:	898a      	ldrh	r2, [r1, #12]
 8014f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f8a:	4605      	mov	r5, r0
 8014f8c:	0710      	lsls	r0, r2, #28
 8014f8e:	460c      	mov	r4, r1
 8014f90:	d45a      	bmi.n	8015048 <__sflush_r+0xc4>
 8014f92:	684b      	ldr	r3, [r1, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	dc05      	bgt.n	8014fa4 <__sflush_r+0x20>
 8014f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	dc02      	bgt.n	8014fa4 <__sflush_r+0x20>
 8014f9e:	2000      	movs	r0, #0
 8014fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fa6:	2e00      	cmp	r6, #0
 8014fa8:	d0f9      	beq.n	8014f9e <__sflush_r+0x1a>
 8014faa:	2300      	movs	r3, #0
 8014fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014fb0:	682f      	ldr	r7, [r5, #0]
 8014fb2:	602b      	str	r3, [r5, #0]
 8014fb4:	d033      	beq.n	801501e <__sflush_r+0x9a>
 8014fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014fb8:	89a3      	ldrh	r3, [r4, #12]
 8014fba:	075a      	lsls	r2, r3, #29
 8014fbc:	d505      	bpl.n	8014fca <__sflush_r+0x46>
 8014fbe:	6863      	ldr	r3, [r4, #4]
 8014fc0:	1ac0      	subs	r0, r0, r3
 8014fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fc4:	b10b      	cbz	r3, 8014fca <__sflush_r+0x46>
 8014fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014fc8:	1ac0      	subs	r0, r0, r3
 8014fca:	2300      	movs	r3, #0
 8014fcc:	4602      	mov	r2, r0
 8014fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fd0:	6a21      	ldr	r1, [r4, #32]
 8014fd2:	4628      	mov	r0, r5
 8014fd4:	47b0      	blx	r6
 8014fd6:	1c43      	adds	r3, r0, #1
 8014fd8:	89a3      	ldrh	r3, [r4, #12]
 8014fda:	d106      	bne.n	8014fea <__sflush_r+0x66>
 8014fdc:	6829      	ldr	r1, [r5, #0]
 8014fde:	291d      	cmp	r1, #29
 8014fe0:	d84b      	bhi.n	801507a <__sflush_r+0xf6>
 8014fe2:	4a2b      	ldr	r2, [pc, #172]	; (8015090 <__sflush_r+0x10c>)
 8014fe4:	40ca      	lsrs	r2, r1
 8014fe6:	07d6      	lsls	r6, r2, #31
 8014fe8:	d547      	bpl.n	801507a <__sflush_r+0xf6>
 8014fea:	2200      	movs	r2, #0
 8014fec:	6062      	str	r2, [r4, #4]
 8014fee:	04d9      	lsls	r1, r3, #19
 8014ff0:	6922      	ldr	r2, [r4, #16]
 8014ff2:	6022      	str	r2, [r4, #0]
 8014ff4:	d504      	bpl.n	8015000 <__sflush_r+0x7c>
 8014ff6:	1c42      	adds	r2, r0, #1
 8014ff8:	d101      	bne.n	8014ffe <__sflush_r+0x7a>
 8014ffa:	682b      	ldr	r3, [r5, #0]
 8014ffc:	b903      	cbnz	r3, 8015000 <__sflush_r+0x7c>
 8014ffe:	6560      	str	r0, [r4, #84]	; 0x54
 8015000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015002:	602f      	str	r7, [r5, #0]
 8015004:	2900      	cmp	r1, #0
 8015006:	d0ca      	beq.n	8014f9e <__sflush_r+0x1a>
 8015008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801500c:	4299      	cmp	r1, r3
 801500e:	d002      	beq.n	8015016 <__sflush_r+0x92>
 8015010:	4628      	mov	r0, r5
 8015012:	f7ff faff 	bl	8014614 <_free_r>
 8015016:	2000      	movs	r0, #0
 8015018:	6360      	str	r0, [r4, #52]	; 0x34
 801501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801501e:	6a21      	ldr	r1, [r4, #32]
 8015020:	2301      	movs	r3, #1
 8015022:	4628      	mov	r0, r5
 8015024:	47b0      	blx	r6
 8015026:	1c41      	adds	r1, r0, #1
 8015028:	d1c6      	bne.n	8014fb8 <__sflush_r+0x34>
 801502a:	682b      	ldr	r3, [r5, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d0c3      	beq.n	8014fb8 <__sflush_r+0x34>
 8015030:	2b1d      	cmp	r3, #29
 8015032:	d001      	beq.n	8015038 <__sflush_r+0xb4>
 8015034:	2b16      	cmp	r3, #22
 8015036:	d101      	bne.n	801503c <__sflush_r+0xb8>
 8015038:	602f      	str	r7, [r5, #0]
 801503a:	e7b0      	b.n	8014f9e <__sflush_r+0x1a>
 801503c:	89a3      	ldrh	r3, [r4, #12]
 801503e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015042:	81a3      	strh	r3, [r4, #12]
 8015044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015048:	690f      	ldr	r7, [r1, #16]
 801504a:	2f00      	cmp	r7, #0
 801504c:	d0a7      	beq.n	8014f9e <__sflush_r+0x1a>
 801504e:	0793      	lsls	r3, r2, #30
 8015050:	680e      	ldr	r6, [r1, #0]
 8015052:	bf08      	it	eq
 8015054:	694b      	ldreq	r3, [r1, #20]
 8015056:	600f      	str	r7, [r1, #0]
 8015058:	bf18      	it	ne
 801505a:	2300      	movne	r3, #0
 801505c:	eba6 0807 	sub.w	r8, r6, r7
 8015060:	608b      	str	r3, [r1, #8]
 8015062:	f1b8 0f00 	cmp.w	r8, #0
 8015066:	dd9a      	ble.n	8014f9e <__sflush_r+0x1a>
 8015068:	4643      	mov	r3, r8
 801506a:	463a      	mov	r2, r7
 801506c:	6a21      	ldr	r1, [r4, #32]
 801506e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015070:	4628      	mov	r0, r5
 8015072:	47b0      	blx	r6
 8015074:	2800      	cmp	r0, #0
 8015076:	dc07      	bgt.n	8015088 <__sflush_r+0x104>
 8015078:	89a3      	ldrh	r3, [r4, #12]
 801507a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801507e:	81a3      	strh	r3, [r4, #12]
 8015080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015088:	4407      	add	r7, r0
 801508a:	eba8 0800 	sub.w	r8, r8, r0
 801508e:	e7e8      	b.n	8015062 <__sflush_r+0xde>
 8015090:	20400001 	.word	0x20400001

08015094 <_fflush_r>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	690b      	ldr	r3, [r1, #16]
 8015098:	4605      	mov	r5, r0
 801509a:	460c      	mov	r4, r1
 801509c:	b1db      	cbz	r3, 80150d6 <_fflush_r+0x42>
 801509e:	b118      	cbz	r0, 80150a8 <_fflush_r+0x14>
 80150a0:	6983      	ldr	r3, [r0, #24]
 80150a2:	b90b      	cbnz	r3, 80150a8 <_fflush_r+0x14>
 80150a4:	f7ff fa24 	bl	80144f0 <__sinit>
 80150a8:	4b0c      	ldr	r3, [pc, #48]	; (80150dc <_fflush_r+0x48>)
 80150aa:	429c      	cmp	r4, r3
 80150ac:	d109      	bne.n	80150c2 <_fflush_r+0x2e>
 80150ae:	686c      	ldr	r4, [r5, #4]
 80150b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150b4:	b17b      	cbz	r3, 80150d6 <_fflush_r+0x42>
 80150b6:	4621      	mov	r1, r4
 80150b8:	4628      	mov	r0, r5
 80150ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150be:	f7ff bf61 	b.w	8014f84 <__sflush_r>
 80150c2:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <_fflush_r+0x4c>)
 80150c4:	429c      	cmp	r4, r3
 80150c6:	d101      	bne.n	80150cc <_fflush_r+0x38>
 80150c8:	68ac      	ldr	r4, [r5, #8]
 80150ca:	e7f1      	b.n	80150b0 <_fflush_r+0x1c>
 80150cc:	4b05      	ldr	r3, [pc, #20]	; (80150e4 <_fflush_r+0x50>)
 80150ce:	429c      	cmp	r4, r3
 80150d0:	bf08      	it	eq
 80150d2:	68ec      	ldreq	r4, [r5, #12]
 80150d4:	e7ec      	b.n	80150b0 <_fflush_r+0x1c>
 80150d6:	2000      	movs	r0, #0
 80150d8:	bd38      	pop	{r3, r4, r5, pc}
 80150da:	bf00      	nop
 80150dc:	080180a4 	.word	0x080180a4
 80150e0:	080180c4 	.word	0x080180c4
 80150e4:	08018084 	.word	0x08018084

080150e8 <_lseek_r>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4c07      	ldr	r4, [pc, #28]	; (8015108 <_lseek_r+0x20>)
 80150ec:	4605      	mov	r5, r0
 80150ee:	4608      	mov	r0, r1
 80150f0:	4611      	mov	r1, r2
 80150f2:	2200      	movs	r2, #0
 80150f4:	6022      	str	r2, [r4, #0]
 80150f6:	461a      	mov	r2, r3
 80150f8:	f7ff f8b5 	bl	8014266 <_lseek>
 80150fc:	1c43      	adds	r3, r0, #1
 80150fe:	d102      	bne.n	8015106 <_lseek_r+0x1e>
 8015100:	6823      	ldr	r3, [r4, #0]
 8015102:	b103      	cbz	r3, 8015106 <_lseek_r+0x1e>
 8015104:	602b      	str	r3, [r5, #0]
 8015106:	bd38      	pop	{r3, r4, r5, pc}
 8015108:	20007754 	.word	0x20007754

0801510c <__swhatbuf_r>:
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	460e      	mov	r6, r1
 8015110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015114:	2900      	cmp	r1, #0
 8015116:	b090      	sub	sp, #64	; 0x40
 8015118:	4614      	mov	r4, r2
 801511a:	461d      	mov	r5, r3
 801511c:	da07      	bge.n	801512e <__swhatbuf_r+0x22>
 801511e:	2300      	movs	r3, #0
 8015120:	602b      	str	r3, [r5, #0]
 8015122:	89b3      	ldrh	r3, [r6, #12]
 8015124:	061a      	lsls	r2, r3, #24
 8015126:	d410      	bmi.n	801514a <__swhatbuf_r+0x3e>
 8015128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801512c:	e00e      	b.n	801514c <__swhatbuf_r+0x40>
 801512e:	aa01      	add	r2, sp, #4
 8015130:	f000 f864 	bl	80151fc <_fstat_r>
 8015134:	2800      	cmp	r0, #0
 8015136:	dbf2      	blt.n	801511e <__swhatbuf_r+0x12>
 8015138:	9a02      	ldr	r2, [sp, #8]
 801513a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801513e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015142:	425a      	negs	r2, r3
 8015144:	415a      	adcs	r2, r3
 8015146:	602a      	str	r2, [r5, #0]
 8015148:	e7ee      	b.n	8015128 <__swhatbuf_r+0x1c>
 801514a:	2340      	movs	r3, #64	; 0x40
 801514c:	2000      	movs	r0, #0
 801514e:	6023      	str	r3, [r4, #0]
 8015150:	b010      	add	sp, #64	; 0x40
 8015152:	bd70      	pop	{r4, r5, r6, pc}

08015154 <__smakebuf_r>:
 8015154:	898b      	ldrh	r3, [r1, #12]
 8015156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015158:	079d      	lsls	r5, r3, #30
 801515a:	4606      	mov	r6, r0
 801515c:	460c      	mov	r4, r1
 801515e:	d507      	bpl.n	8015170 <__smakebuf_r+0x1c>
 8015160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	6123      	str	r3, [r4, #16]
 8015168:	2301      	movs	r3, #1
 801516a:	6163      	str	r3, [r4, #20]
 801516c:	b002      	add	sp, #8
 801516e:	bd70      	pop	{r4, r5, r6, pc}
 8015170:	ab01      	add	r3, sp, #4
 8015172:	466a      	mov	r2, sp
 8015174:	f7ff ffca 	bl	801510c <__swhatbuf_r>
 8015178:	9900      	ldr	r1, [sp, #0]
 801517a:	4605      	mov	r5, r0
 801517c:	4630      	mov	r0, r6
 801517e:	f7ff fa97 	bl	80146b0 <_malloc_r>
 8015182:	b948      	cbnz	r0, 8015198 <__smakebuf_r+0x44>
 8015184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015188:	059a      	lsls	r2, r3, #22
 801518a:	d4ef      	bmi.n	801516c <__smakebuf_r+0x18>
 801518c:	f023 0303 	bic.w	r3, r3, #3
 8015190:	f043 0302 	orr.w	r3, r3, #2
 8015194:	81a3      	strh	r3, [r4, #12]
 8015196:	e7e3      	b.n	8015160 <__smakebuf_r+0xc>
 8015198:	4b0d      	ldr	r3, [pc, #52]	; (80151d0 <__smakebuf_r+0x7c>)
 801519a:	62b3      	str	r3, [r6, #40]	; 0x28
 801519c:	89a3      	ldrh	r3, [r4, #12]
 801519e:	6020      	str	r0, [r4, #0]
 80151a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151a4:	81a3      	strh	r3, [r4, #12]
 80151a6:	9b00      	ldr	r3, [sp, #0]
 80151a8:	6163      	str	r3, [r4, #20]
 80151aa:	9b01      	ldr	r3, [sp, #4]
 80151ac:	6120      	str	r0, [r4, #16]
 80151ae:	b15b      	cbz	r3, 80151c8 <__smakebuf_r+0x74>
 80151b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151b4:	4630      	mov	r0, r6
 80151b6:	f000 f833 	bl	8015220 <_isatty_r>
 80151ba:	b128      	cbz	r0, 80151c8 <__smakebuf_r+0x74>
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	f023 0303 	bic.w	r3, r3, #3
 80151c2:	f043 0301 	orr.w	r3, r3, #1
 80151c6:	81a3      	strh	r3, [r4, #12]
 80151c8:	89a3      	ldrh	r3, [r4, #12]
 80151ca:	431d      	orrs	r5, r3
 80151cc:	81a5      	strh	r5, [r4, #12]
 80151ce:	e7cd      	b.n	801516c <__smakebuf_r+0x18>
 80151d0:	08014471 	.word	0x08014471

080151d4 <__malloc_lock>:
 80151d4:	4770      	bx	lr

080151d6 <__malloc_unlock>:
 80151d6:	4770      	bx	lr

080151d8 <_read_r>:
 80151d8:	b538      	push	{r3, r4, r5, lr}
 80151da:	4c07      	ldr	r4, [pc, #28]	; (80151f8 <_read_r+0x20>)
 80151dc:	4605      	mov	r5, r0
 80151de:	4608      	mov	r0, r1
 80151e0:	4611      	mov	r1, r2
 80151e2:	2200      	movs	r2, #0
 80151e4:	6022      	str	r2, [r4, #0]
 80151e6:	461a      	mov	r2, r3
 80151e8:	f7fe ffae 	bl	8014148 <_read>
 80151ec:	1c43      	adds	r3, r0, #1
 80151ee:	d102      	bne.n	80151f6 <_read_r+0x1e>
 80151f0:	6823      	ldr	r3, [r4, #0]
 80151f2:	b103      	cbz	r3, 80151f6 <_read_r+0x1e>
 80151f4:	602b      	str	r3, [r5, #0]
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	20007754 	.word	0x20007754

080151fc <_fstat_r>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	4c07      	ldr	r4, [pc, #28]	; (801521c <_fstat_r+0x20>)
 8015200:	2300      	movs	r3, #0
 8015202:	4605      	mov	r5, r0
 8015204:	4608      	mov	r0, r1
 8015206:	4611      	mov	r1, r2
 8015208:	6023      	str	r3, [r4, #0]
 801520a:	f7ff f811 	bl	8014230 <_fstat>
 801520e:	1c43      	adds	r3, r0, #1
 8015210:	d102      	bne.n	8015218 <_fstat_r+0x1c>
 8015212:	6823      	ldr	r3, [r4, #0]
 8015214:	b103      	cbz	r3, 8015218 <_fstat_r+0x1c>
 8015216:	602b      	str	r3, [r5, #0]
 8015218:	bd38      	pop	{r3, r4, r5, pc}
 801521a:	bf00      	nop
 801521c:	20007754 	.word	0x20007754

08015220 <_isatty_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	4c06      	ldr	r4, [pc, #24]	; (801523c <_isatty_r+0x1c>)
 8015224:	2300      	movs	r3, #0
 8015226:	4605      	mov	r5, r0
 8015228:	4608      	mov	r0, r1
 801522a:	6023      	str	r3, [r4, #0]
 801522c:	f7ff f810 	bl	8014250 <_isatty>
 8015230:	1c43      	adds	r3, r0, #1
 8015232:	d102      	bne.n	801523a <_isatty_r+0x1a>
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	b103      	cbz	r3, 801523a <_isatty_r+0x1a>
 8015238:	602b      	str	r3, [r5, #0]
 801523a:	bd38      	pop	{r3, r4, r5, pc}
 801523c:	20007754 	.word	0x20007754

08015240 <_init>:
 8015240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015242:	bf00      	nop
 8015244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015246:	bc08      	pop	{r3}
 8015248:	469e      	mov	lr, r3
 801524a:	4770      	bx	lr

0801524c <_fini>:
 801524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801524e:	bf00      	nop
 8015250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015252:	bc08      	pop	{r3}
 8015254:	469e      	mov	lr, r3
 8015256:	4770      	bx	lr
